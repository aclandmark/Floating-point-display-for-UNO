
TWI_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000005c6  0000065a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800062  00800062  0000065c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000006c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b1  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067a  00000000  00000000  00001111  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000721  00000000  00000000  0000178b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047f  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000275  00000000  00000000  0000244b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000026c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	54 c1       	rjmp	.+680    	; 0x2b6 <__vector_6>
   e:	34 c0       	rjmp	.+104    	; 0x78 <__vector_7>
  10:	4c c0       	rjmp	.+152    	; 0xaa <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	68 c2       	rjmp	.+1232   	; 0x4ee <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d1 e0       	ldi	r29, 0x01	; 1
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ec       	ldi	r30, 0xC6	; 198
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 38       	cpi	r26, 0x8A	; 138
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	bd d0       	rcall	.+378    	; 0x1d4 <main>
  5a:	b3 c2       	rjmp	.+1382   	; 0x5c2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <USI_TWI_Slave_Initialise>:


/***************************************************************************************************************************************/
void USI_TWI_Slave_Initialise(unsigned char TWI_ownAddress )
{
	TWI_slaveAddress = TWI_ownAddress;
  5e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <TWI_slaveAddress>

	PORT_USI |=  (1<<PORT_USI_SCL);                                 // Set SCL high (WPU)
  62:	da 9a       	sbi	0x1b, 2	; 27
	PORT_USI |=  (1<<PORT_USI_SDA);                                 // Set SDA high (WPU)
  64:	d8 9a       	sbi	0x1b, 0	; 27
	DDR_USI  |=  (1<<PORT_USI_SCL);                                 // Set SCL as output (HIGH)
  66:	d2 9a       	sbi	0x1a, 2	; 26
	DDR_USI  &= ~(1<<PORT_USI_SDA);                                 // Set SDA as input (HIGH)
  68:	d0 98       	cbi	0x1a, 0	; 26
	USICR    =  (1<<USISIE)|(0<<USIOIE)|                            // Enable Start Condition Interrupt. Disable Overflow Interrupt.
  6a:	88 ea       	ldi	r24, 0xA8	; 168
  6c:	8d b9       	out	0x0d, r24	; 13
				(1<<USIWM1)|(0<<USIWM0)|							// Set USI in Two-wire mode. No USI Counter overflow prior
																	// to first Start Condition (potential failure)
				(1<<USICS1)|(0<<USICS0)|(0<<USICLK)|				// Shift Register Clock Source = External, positive edge
				(0<<USITC);
				USISR    = 0xF0;									// Clear all flags and reset overflow counter
  6e:	80 ef       	ldi	r24, 0xF0	; 240
  70:	8e b9       	out	0x0e, r24	; 14
				USI_busy = 0;										//My line  used for data flow
  72:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <USI_busy>
  76:	08 95       	ret

00000078 <__vector_7>:



/***************************************************************************************************************************************/
ISR (USI_START_vect)
{	
  78:	1f 92       	push	r1
  7a:	0f 92       	push	r0
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	0f 92       	push	r0
  80:	11 24       	eor	r1, r1
  82:	8f 93       	push	r24
	unsigned char tmpUSISR;											// Temporary variable to store volatile
	tmpUSISR = USISR;												// Not necessary, but prevents warnings
  84:	8e b1       	in	r24, 0x0e	; 14
																	// Set default starting conditions for new TWI package
	USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
  86:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	DDR_USI  &= ~(1<<PORT_USI_SDA);									// Set SDA as input
  8a:	d0 98       	cbi	0x1a, 0	; 26
	while ( (PIN_USI & (1<<PORT_USI_SCL)) &\
  8c:	89 b3       	in	r24, 0x19	; 25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <__vector_7+0x18>
  94:	00 00       	nop
	 !(tmpUSISR & (1<<USIPF)) );									// Wait for SCL to go low to ensure the "Start Condition" has completed.
	
	_delay_us(5);													//Additional delay added for more reliable operation
																	//for slower TWI clocks
		
	USICR   =   (1<<USISIE)|(1<<USIOIE)|							// Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
  96:	88 ef       	ldi	r24, 0xF8	; 248
  98:	8d b9       	out	0x0d, r24	; 13
	(1<<USIWM1)|(1<<USIWM0)|										// Set USI in Two-wire mode.
	(1<<USICS1)|(0<<USICS0)|(0<<USICLK)|							// Shift Register Clock Source = External, positive edge
	(0<<USITC);
	
	USISR  =    (1<<USI_START_COND_INT)|\
  9a:	80 ef       	ldi	r24, 0xF0	; 240
  9c:	8e b9       	out	0x0e, r24	; 14
	(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|								// Clear flags INCLUDING the start condition interrupt fag
	(0x0<<USICNT0);													// Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <__vector_8>:


ISR (USI_OVF_vect)
{	
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
	switch (USI_TWI_Overflow_State)												//Transaction starts here
  bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	09 f4       	brne	.+2      	; 0xc6 <__vector_8+0x1c>
  c4:	4d c0       	rjmp	.+154    	; 0x160 <__stack+0x1>
  c6:	28 f4       	brcc	.+10     	; 0xd2 <__vector_8+0x28>
  c8:	88 23       	and	r24, r24
  ca:	59 f0       	breq	.+22     	; 0xe2 <__vector_8+0x38>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	49 f1       	breq	.+82     	; 0x122 <__vector_8+0x78>
  d0:	78 c0       	rjmp	.+240    	; 0x1c2 <__stack+0x63>
  d2:	84 30       	cpi	r24, 0x04	; 4
  d4:	09 f4       	brne	.+2      	; 0xd8 <__vector_8+0x2e>
  d6:	4a c0       	rjmp	.+148    	; 0x16c <__stack+0xd>
  d8:	08 f1       	brcs	.+66     	; 0x11c <__vector_8+0x72>
  da:	85 30       	cpi	r24, 0x05	; 5
  dc:	09 f4       	brne	.+2      	; 0xe0 <__vector_8+0x36>
  de:	4c c0       	rjmp	.+152    	; 0x178 <__stack+0x19>
  e0:	70 c0       	rjmp	.+224    	; 0x1c2 <__stack+0x63>
	{	case USI_SLAVE_CHECK_ADDRESS:
		if ((USIDR == 0) || (( USIDR>>1 ) == TWI_slaveAddress))
  e2:	8f b1       	in	r24, 0x0f	; 15
  e4:	88 23       	and	r24, r24
  e6:	31 f0       	breq	.+12     	; 0xf4 <__vector_8+0x4a>
  e8:	8f b1       	in	r24, 0x0f	; 15
  ea:	86 95       	lsr	r24
  ec:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <TWI_slaveAddress>
  f0:	89 13       	cpse	r24, r25
  f2:	59 c0       	rjmp	.+178    	; 0x1a6 <__stack+0x47>
		{	USI_busy = 1;														//Own address detected: Enter busy state
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <USI_busy>
			if ( USIDR & 0x01 )
  fa:	78 9b       	sbis	0x0f, 0	; 15
  fc:	07 c0       	rjmp	.+14     	; 0x10c <__vector_8+0x62>
			{USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;						//Master requires data								
  fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			Tx_data_ptr = 0;}													//Initialise Tx_data pointer
 102:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <Tx_data_ptr+0x1>
 106:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Tx_data_ptr>
 10a:	03 c0       	rjmp	.+6      	; 0x112 <__vector_8+0x68>
			else
			USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;					//Master has data for slave
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			Rx_data_ptr = 0;													//Initialise receive data buffer pointer
 112:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <Rx_data_ptr+0x1>
 116:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <Rx_data_ptr>
 11a:	4f c0       	rjmp	.+158    	; 0x1ba <__stack+0x5b>
		{SET_USI_TO_TWI_START_CONDITION_MODE();}break;							//Abort transaction: Not our address
		
		
		/************************************************************************/
		case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
		if ( USIDR )															// If NACK, the master does not want more data.
 11c:	8f b1       	in	r24, 0x0f	; 15
 11e:	81 11       	cpse	r24, r1
 120:	42 c0       	rjmp	.+132    	; 0x1a6 <__stack+0x47>
			SET_USI_TO_TWI_START_CONDITION_MODE();return;}
		
		
		/************************************************************************/
		case USI_SLAVE_SEND_DATA:
		if (Tx_data[Tx_data_ptr]) 
 122:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <Tx_data_ptr>
 126:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <Tx_data_ptr+0x1>
 12a:	ed 59       	subi	r30, 0x9D	; 157
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	80 81       	ld	r24, Z
 130:	88 23       	and	r24, r24
 132:	c9 f1       	breq	.+114    	; 0x1a6 <__stack+0x47>
		{USIDR = Tx_data[Tx_data_ptr];  Tx_data_ptr += 1;}							//Tx data string is terminated in a null
 134:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <Tx_data_ptr>
 138:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <Tx_data_ptr+0x1>
 13c:	ed 59       	subi	r30, 0x9D	; 157
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	80 81       	ld	r24, Z
 142:	8f b9       	out	0x0f, r24	; 15
 144:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Tx_data_ptr>
 148:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <Tx_data_ptr+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <Tx_data_ptr+0x1>
 152:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Tx_data_ptr>
		/****************************************************************/
		
		else {
		SET_USI_TO_TWI_START_CONDITION_MODE();	return;}							//Exit when all data sent or NACK received
			
		USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		SET_USI_TO_SEND_DATA();
 15c:	d0 9a       	sbi	0x1a, 0	; 26
 15e:	0a c0       	rjmp	.+20     	; 0x174 <__stack+0x15>
		break;
		
		/************************************************************************/
		case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA: 
		USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		SET_USI_TO_READ_ACK();
 166:	d0 98       	cbi	0x1a, 0	; 26
 168:	1f b8       	out	0x0f, r1	; 15
 16a:	29 c0       	rjmp	.+82     	; 0x1be <__stack+0x5f>

		
		
		/************************************************************************/
		case USI_SLAVE_REQUEST_DATA:
		USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		SET_USI_TO_READ_DATA();
 172:	d0 98       	cbi	0x1a, 0	; 26
 174:	80 e7       	ldi	r24, 0x70	; 112
 176:	24 c0       	rjmp	.+72     	; 0x1c0 <__stack+0x61>

		
		/************************************************************************/
		case USI_SLAVE_GET_DATA_AND_SEND_ACK:
		
		Rx_data[Rx_data_ptr] = USIDR;												//Load receive data buffer
 178:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <Rx_data_ptr>
 17c:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <Rx_data_ptr+0x1>
 180:	8f b1       	in	r24, 0x0f	; 15
 182:	e7 58       	subi	r30, 0x87	; 135
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	80 83       	st	Z, r24
		Rx_data_ptr += 1;															//Increment buffer pointer
 188:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <Rx_data_ptr>
 18c:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <Rx_data_ptr+0x1>
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <Rx_data_ptr+0x1>
 196:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <Rx_data_ptr>
		if (Rx_data_ptr == 4)														//Buffer can only hold 4 data items
 19a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <Rx_data_ptr>
 19e:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <Rx_data_ptr+0x1>
 1a2:	04 97       	sbiw	r24, 0x04	; 4
 1a4:	39 f4       	brne	.+14     	; 0x1b4 <__stack+0x55>
		{//Rx_data_ptr = 0;
			SET_USI_TO_TWI_START_CONDITION_MODE();return;};							//Terminate transmission and return to ready state
 1a6:	88 ea       	ldi	r24, 0xA8	; 168
 1a8:	8d b9       	out	0x0d, r24	; 13
 1aa:	80 e7       	ldi	r24, 0x70	; 112
 1ac:	8e b9       	out	0x0e, r24	; 14
 1ae:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <USI_busy>
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <__stack+0x63>
		USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		SET_USI_TO_SEND_ACK();
 1ba:	1f b8       	out	0x0f, r1	; 15
 1bc:	d0 9a       	sbi	0x1a, 0	; 26
 1be:	8e e7       	ldi	r24, 0x7E	; 126
 1c0:	8e b9       	out	0x0e, r24	; 14
		break;
	}
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <main>:
volatile int buf_ptr;
volatile int int_counter;

int main (void){

setup_ATtiny_HW;	
 1d4:	a8 95       	wdr
 1d6:	84 b7       	in	r24, 0x34	; 52
 1d8:	87 7f       	andi	r24, 0xF7	; 247
 1da:	84 bf       	out	0x34, r24	; 52
 1dc:	81 b5       	in	r24, 0x21	; 33
 1de:	88 61       	ori	r24, 0x18	; 24
 1e0:	81 bd       	out	0x21, r24	; 33
 1e2:	11 bc       	out	0x21, r1	; 33
 1e4:	88 9a       	sbi	0x11, 0	; 17
 1e6:	d9 9a       	sbi	0x1b, 1	; 27
 1e8:	61 b7       	in	r22, 0x31	; 49
 1ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f2:	03 97       	sbiw	r24, 0x03	; 3
 1f4:	d8 d1       	rcall	.+944    	; 0x5a6 <eeprom_write_byte>
 1f6:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fa:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1fe:	c8 01       	movw	r24, r16
 200:	02 97       	sbiw	r24, 0x02	; 2
 202:	c9 d1       	rcall	.+914    	; 0x596 <eeprom_read_byte>
 204:	c8 2f       	mov	r28, r24
 206:	80 ef       	ldi	r24, 0xF0	; 240
 208:	8c 0f       	add	r24, r28
 20a:	80 3e       	cpi	r24, 0xE0	; 224
 20c:	30 f4       	brcc	.+12     	; 0x21a <main+0x46>
 20e:	c8 01       	movw	r24, r16
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	c1 d1       	rcall	.+898    	; 0x596 <eeprom_read_byte>
 214:	c8 13       	cpse	r28, r24
 216:	01 c0       	rjmp	.+2      	; 0x21a <main+0x46>
 218:	c1 bf       	out	0x31, r28	; 49

set_digit_drivers;
 21a:	8a b3       	in	r24, 0x1a	; 26
 21c:	88 6f       	ori	r24, 0xF8	; 248
 21e:	8a bb       	out	0x1a, r24	; 26
 220:	87 b3       	in	r24, 0x17	; 23
 222:	8f 67       	ori	r24, 0x7F	; 127
 224:	87 bb       	out	0x17, r24	; 23
clear_digits;
 226:	88 b3       	in	r24, 0x18	; 24
 228:	8e 7b       	andi	r24, 0xBE	; 190
 22a:	88 bb       	out	0x18, r24	; 24
 22c:	8b b3       	in	r24, 0x1b	; 27
 22e:	8f 79       	andi	r24, 0x9F	; 159
 230:	8b bb       	out	0x1b, r24	; 27
clear_display;	
 232:	8b b3       	in	r24, 0x1b	; 27
 234:	88 69       	ori	r24, 0x98	; 152
 236:	8b bb       	out	0x1b, r24	; 27
 238:	88 b3       	in	r24, 0x18	; 24
 23a:	8e 63       	ori	r24, 0x3E	; 62
 23c:	88 bb       	out	0x18, r24	; 24
TCCR0A |= 1 << TCW0;									//16 bit mode
 23e:	af 9a       	sbi	0x15, 7	; 21
OCR0B =	0xE4;											//Used to control intensity
 240:	84 ee       	ldi	r24, 0xE4	; 228
 242:	82 bb       	out	0x12, r24	; 18
OCR0A = 0x0;
 244:	13 ba       	out	0x13, r1	; 19
TCNT0H = 0xE0;											//Generates 1mS interrupt stream
 246:	80 ee       	ldi	r24, 0xE0	; 224
 248:	84 bb       	out	0x14, r24	; 20
TCNT0L = 0x0;
 24a:	12 be       	out	0x32, r1	; 50
TIMSK |= (1 << TOIE0) | (1 << OCIE0A);					//Initialise Timer interrupts
 24c:	89 b7       	in	r24, 0x39	; 57
 24e:	82 61       	ori	r24, 0x12	; 18
 250:	89 bf       	out	0x39, r24	; 57
TCCR0B = 1;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	83 bf       	out	0x33, r24	; 51
sei();
 256:	78 94       	sei

USI_TWI_Slave_Initialise(4);							//Address of this slave is 4
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	01 df       	rcall	.-510    	; 0x5e <USI_TWI_Slave_Initialise>

while(!(USI_busy));										//wait for master request
 25c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <USI_busy>
 260:	88 23       	and	r24, r24
 262:	e1 f3       	breq	.-8      	; 0x25c <main+0x88>
while((USI_busy));										//Pause here while data is received
 264:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <USI_busy>
 268:	81 11       	cpse	r24, r1
 26a:	fc cf       	rjmp	.-8      	; 0x264 <main+0x90>
 26c:	8d e7       	ldi	r24, 0x7D	; 125
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	e9 e7       	ldi	r30, 0x79	; 121
 272:	f0 e0       	ldi	r31, 0x00	; 0
for(int m = 0; m <= 3; m++)
{display_intensity = Rx_data[m]; Rx_data[m] = 0;}
 274:	20 81       	ld	r18, Z
 276:	20 93 87 00 	sts	0x0087, r18	; 0x800087 <display_intensity>
 27a:	11 92       	st	Z+, r1

USI_TWI_Slave_Initialise(4);							//Address of this slave is 4

while(!(USI_busy));										//wait for master request
while((USI_busy));										//Pause here while data is received
for(int m = 0; m <= 3; m++)
 27c:	8e 17       	cp	r24, r30
 27e:	9f 07       	cpc	r25, r31
 280:	c9 f7       	brne	.-14     	; 0x274 <main+0xa0>
sei();

USI_TWI_Slave_Initialise(4);							//Address of this slave is 4

while(!(USI_busy));										//wait for master request
while((USI_busy));										//Pause here while data is received
 282:	23 e0       	ldi	r18, 0x03	; 3
 284:	30 e0       	ldi	r19, 0x00	; 0
for(int m = 0; m <= 3; m++)
{display_intensity = Rx_data[m]; Rx_data[m] = 0;}

while(1){												//Receive floating point number strings to drive display
for(int m = 0; m <= 2; m++){
while(!(USI_busy));										//wait for master request
 286:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <USI_busy>
 28a:	88 23       	and	r24, r24
 28c:	e1 f3       	breq	.-8      	; 0x286 <main+0xb2>
while((USI_busy));										//Pause here while data is received
 28e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <USI_busy>
 292:	81 11       	cpse	r24, r1
 294:	fc cf       	rjmp	.-8      	; 0x28e <main+0xba>
 296:	e9 e7       	ldi	r30, 0x79	; 121
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	90 e0       	ldi	r25, 0x00	; 0
for(int m = 0; m <= 3; m++)
{display_buf[3-m] = Rx_data[m]; Rx_data[m] = 0;}}
 29e:	40 81       	ld	r20, Z
 2a0:	dc 01       	movw	r26, r24
 2a2:	a1 58       	subi	r26, 0x81	; 129
 2a4:	bf 4f       	sbci	r27, 0xFF	; 255
 2a6:	4c 93       	st	X, r20
 2a8:	11 92       	st	Z+, r1
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	c0 f7       	brcc	.-16     	; 0x29e <main+0xca>
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	31 09       	sbc	r19, r1
while((USI_busy));										//Pause here while data is received
for(int m = 0; m <= 3; m++)
{display_intensity = Rx_data[m]; Rx_data[m] = 0;}

while(1){												//Receive floating point number strings to drive display
for(int m = 0; m <= 2; m++){
 2b2:	49 f7       	brne	.-46     	; 0x286 <main+0xb2>
 2b4:	e6 cf       	rjmp	.-52     	; 0x282 <main+0xae>

000002b6 <__vector_6>:


/******************************************************************************************************/


ISR (TIMER0_OVF_vect){TCNT0H = 0xE0;						//Generates interrupt every 4.096mS.
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	80 ee       	ldi	r24, 0xE0	; 224
 2c6:	84 bb       	out	0x14, r24	; 20
	TCNT0L = 0x0;
 2c8:	12 be       	out	0x32, r1	; 50
	
	int_counter ++;
 2ca:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <int_counter>
 2ce:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <int_counter+0x1>
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <int_counter+0x1>
 2d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <int_counter>
	if (int_counter == 20){	int_counter = 0;}
 2dc:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <int_counter>
 2e0:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <int_counter+0x1>
 2e4:	44 97       	sbiw	r24, 0x14	; 20
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <__vector_6+0x3a>
 2e8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <int_counter+0x1>
 2ec:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <int_counter>
		
	clear_digits;
 2f0:	88 b3       	in	r24, 0x18	; 24
 2f2:	8e 7b       	andi	r24, 0xBE	; 190
 2f4:	88 bb       	out	0x18, r24	; 24
 2f6:	8b b3       	in	r24, 0x1b	; 27
 2f8:	8f 79       	andi	r24, 0x9F	; 159
 2fa:	8b bb       	out	0x1b, r24	; 27
	clear_display;	
 2fc:	8b b3       	in	r24, 0x1b	; 27
 2fe:	88 69       	ori	r24, 0x98	; 152
 300:	8b bb       	out	0x1b, r24	; 27
 302:	88 b3       	in	r24, 0x18	; 24
 304:	8e 63       	ori	r24, 0x3E	; 62
 306:	88 bb       	out	0x18, r24	; 24
}
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <Char_definition>:



/******************************************************************************************************/
	void Char_definition()
	{switch (display_buf[buf_ptr]){
 316:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <buf_ptr>
 31a:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <buf_ptr+0x1>
 31e:	e1 58       	subi	r30, 0x81	; 129
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	80 81       	ld	r24, Z
 324:	85 34       	cpi	r24, 0x45	; 69
 326:	09 f4       	brne	.+2      	; 0x32a <Char_definition+0x14>
 328:	7f c0       	rjmp	.+254    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 32a:	40 f5       	brcc	.+80     	; 0x37c <Char_definition+0x66>
 32c:	84 33       	cpi	r24, 0x34	; 52
 32e:	09 f4       	brne	.+2      	; 0x332 <Char_definition+0x1c>
 330:	5d c0       	rjmp	.+186    	; 0x3ec <Char_definition+0xd6>
 332:	90 f4       	brcc	.+36     	; 0x358 <Char_definition+0x42>
 334:	81 33       	cpi	r24, 0x31	; 49
 336:	09 f4       	brne	.+2      	; 0x33a <Char_definition+0x24>
 338:	51 c0       	rjmp	.+162    	; 0x3dc <Char_definition+0xc6>
 33a:	38 f4       	brcc	.+14     	; 0x34a <Char_definition+0x34>
 33c:	8d 32       	cpi	r24, 0x2D	; 45
 33e:	09 f4       	brne	.+2      	; 0x342 <Char_definition+0x2c>
 340:	71 c0       	rjmp	.+226    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 342:	80 33       	cpi	r24, 0x30	; 48
 344:	09 f4       	brne	.+2      	; 0x348 <Char_definition+0x32>
 346:	44 c0       	rjmp	.+136    	; 0x3d0 <Char_definition+0xba>
 348:	08 95       	ret
 34a:	82 33       	cpi	r24, 0x32	; 50
 34c:	09 f4       	brne	.+2      	; 0x350 <Char_definition+0x3a>
 34e:	48 c0       	rjmp	.+144    	; 0x3e0 <Char_definition+0xca>
 350:	83 33       	cpi	r24, 0x33	; 51
 352:	09 f4       	brne	.+2      	; 0x356 <Char_definition+0x40>
 354:	48 c0       	rjmp	.+144    	; 0x3e6 <Char_definition+0xd0>
 356:	08 95       	ret
 358:	87 33       	cpi	r24, 0x37	; 55
 35a:	09 f4       	brne	.+2      	; 0x35e <Char_definition+0x48>
 35c:	52 c0       	rjmp	.+164    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 35e:	38 f4       	brcc	.+14     	; 0x36e <Char_definition+0x58>
 360:	85 33       	cpi	r24, 0x35	; 53
 362:	09 f4       	brne	.+2      	; 0x366 <Char_definition+0x50>
 364:	46 c0       	rjmp	.+140    	; 0x3f2 <Char_definition+0xdc>
 366:	86 33       	cpi	r24, 0x36	; 54
 368:	09 f4       	brne	.+2      	; 0x36c <Char_definition+0x56>
 36a:	49 c0       	rjmp	.+146    	; 0x3fe <Char_definition+0xe8>
 36c:	08 95       	ret
 36e:	88 33       	cpi	r24, 0x38	; 56
 370:	09 f4       	brne	.+2      	; 0x374 <Char_definition+0x5e>
 372:	4c c0       	rjmp	.+152    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 374:	89 33       	cpi	r24, 0x39	; 57
 376:	09 f4       	brne	.+2      	; 0x37a <Char_definition+0x64>
 378:	4f c0       	rjmp	.+158    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 37a:	08 95       	ret
 37c:	83 3b       	cpi	r24, 0xB3	; 179
 37e:	09 f4       	brne	.+2      	; 0x382 <Char_definition+0x6c>
 380:	68 c0       	rjmp	.+208    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 382:	90 f4       	brcc	.+36     	; 0x3a8 <Char_definition+0x92>
 384:	80 3b       	cpi	r24, 0xB0	; 176
 386:	09 f4       	brne	.+2      	; 0x38a <Char_definition+0x74>
 388:	56 c0       	rjmp	.+172    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 38a:	38 f4       	brcc	.+14     	; 0x39a <Char_definition+0x84>
 38c:	85 36       	cpi	r24, 0x65	; 101
 38e:	09 f4       	brne	.+2      	; 0x392 <Char_definition+0x7c>
 390:	4b c0       	rjmp	.+150    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 392:	8d 3a       	cpi	r24, 0xAD	; 173
 394:	09 f4       	brne	.+2      	; 0x398 <Char_definition+0x82>
 396:	7d c0       	rjmp	.+250    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 398:	08 95       	ret
 39a:	81 3b       	cpi	r24, 0xB1	; 177
 39c:	09 f4       	brne	.+2      	; 0x3a0 <Char_definition+0x8a>
 39e:	51 c0       	rjmp	.+162    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3a0:	82 3b       	cpi	r24, 0xB2	; 178
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <Char_definition+0x90>
 3a4:	50 c0       	rjmp	.+160    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3a6:	08 95       	ret
 3a8:	86 3b       	cpi	r24, 0xB6	; 182
 3aa:	09 f4       	brne	.+2      	; 0x3ae <Char_definition+0x98>
 3ac:	5e c0       	rjmp	.+188    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 3ae:	38 f4       	brcc	.+14     	; 0x3be <Char_definition+0xa8>
 3b0:	84 3b       	cpi	r24, 0xB4	; 180
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <Char_definition+0xa0>
 3b4:	51 c0       	rjmp	.+162    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 3b6:	85 3b       	cpi	r24, 0xB5	; 181
 3b8:	09 f4       	brne	.+2      	; 0x3bc <Char_definition+0xa6>
 3ba:	51 c0       	rjmp	.+162    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3bc:	08 95       	ret
 3be:	88 3b       	cpi	r24, 0xB8	; 184
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <Char_definition+0xae>
 3c2:	5a c0       	rjmp	.+180    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 3c4:	08 f4       	brcc	.+2      	; 0x3c8 <Char_definition+0xb2>
 3c6:	53 c0       	rjmp	.+166    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 3c8:	89 3b       	cpi	r24, 0xB9	; 185
 3ca:	09 f4       	brne	.+2      	; 0x3ce <Char_definition+0xb8>
 3cc:	5b c0       	rjmp	.+182    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 3ce:	08 95       	ret
		case '0': zero; break;
 3d0:	8b b3       	in	r24, 0x1b	; 27
 3d2:	87 76       	andi	r24, 0x67	; 103
 3d4:	8b bb       	out	0x1b, r24	; 27
 3d6:	88 b3       	in	r24, 0x18	; 24
 3d8:	89 7e       	andi	r24, 0xE9	; 233
 3da:	2b c0       	rjmp	.+86     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		case '1': one; break;
 3dc:	df 98       	cbi	0x1b, 7	; 27
 3de:	14 c0       	rjmp	.+40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		case '2': two; break;
 3e0:	8b b3       	in	r24, 0x1b	; 27
 3e2:	87 77       	andi	r24, 0x77	; 119
 3e4:	23 c0       	rjmp	.+70     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		case '3': three; break;
 3e6:	8b b3       	in	r24, 0x1b	; 27
 3e8:	87 77       	andi	r24, 0x77	; 119
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <Char_definition+0xe0>
		case '4': four; break;
 3ec:	8b b3       	in	r24, 0x1b	; 27
 3ee:	8f 76       	andi	r24, 0x6F	; 111
 3f0:	15 c0       	rjmp	.+42     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		case '5': five; break;
 3f2:	8b b3       	in	r24, 0x1b	; 27
 3f4:	87 7e       	andi	r24, 0xE7	; 231
 3f6:	8b bb       	out	0x1b, r24	; 27
 3f8:	88 b3       	in	r24, 0x18	; 24
 3fa:	8b 7c       	andi	r24, 0xCB	; 203
 3fc:	1a c0       	rjmp	.+52     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		case '6': six; break;
 3fe:	dc 98       	cbi	0x1b, 4	; 27
 400:	08 c0       	rjmp	.+16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		case '7': seven; break;
 402:	8b b3       	in	r24, 0x1b	; 27
 404:	87 77       	andi	r24, 0x77	; 119
 406:	8b bb       	out	0x1b, r24	; 27
 408:	c4 98       	cbi	0x18, 4	; 24
 40a:	08 95       	ret
		case '8': eight; break;
 40c:	8b b3       	in	r24, 0x1b	; 27
 40e:	87 76       	andi	r24, 0x67	; 103
 410:	8b bb       	out	0x1b, r24	; 27
 412:	88 b3       	in	r24, 0x18	; 24
 414:	89 7c       	andi	r24, 0xC9	; 201
 416:	0d c0       	rjmp	.+26     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		case '9': nine; break;
 418:	8b b3       	in	r24, 0x1b	; 27
 41a:	87 76       	andi	r24, 0x67	; 103
 41c:	8b bb       	out	0x1b, r24	; 27
 41e:	88 b3       	in	r24, 0x18	; 24
 420:	8f 7c       	andi	r24, 0xCF	; 207
 422:	07 c0       	rjmp	.+14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		case '-': minus; break;
 424:	c5 98       	cbi	0x18, 5	; 24
 426:	08 95       	ret
		case 'E': case 'e':
	PORTA &= (~(seg_a | seg_f)); PORTB &= (~(seg_d | seg_e | seg_g ));break;
 428:	8b b3       	in	r24, 0x1b	; 27
 42a:	87 7e       	andi	r24, 0xE7	; 231
 42c:	8b bb       	out	0x1b, r24	; 27
 42e:	88 b3       	in	r24, 0x18	; 24
 430:	89 7d       	andi	r24, 0xD9	; 217
 432:	88 bb       	out	0x18, r24	; 24
 434:	08 95       	ret
	
	
	case ('0' | 0x80): zero_point; break;
 436:	8b b3       	in	r24, 0x1b	; 27
 438:	87 76       	andi	r24, 0x67	; 103
 43a:	8b bb       	out	0x1b, r24	; 27
 43c:	88 b3       	in	r24, 0x18	; 24
 43e:	89 7e       	andi	r24, 0xE9	; 233
 440:	26 c0       	rjmp	.+76     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	case ('1' | 0x80): one_point; break;
 442:	df 98       	cbi	0x1b, 7	; 27
 444:	17 c0       	rjmp	.+46     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
	case ('2' | 0x80): two_point; break;
 446:	8b b3       	in	r24, 0x1b	; 27
 448:	87 77       	andi	r24, 0x77	; 119
 44a:	8b bb       	out	0x1b, r24	; 27
 44c:	88 b3       	in	r24, 0x18	; 24
 44e:	89 7d       	andi	r24, 0xD9	; 217
 450:	1e c0       	rjmp	.+60     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	case ('3' | 0x80): three_point; break;
 452:	8b b3       	in	r24, 0x1b	; 27
 454:	87 77       	andi	r24, 0x77	; 119
 456:	05 c0       	rjmp	.+10     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	case ('4' | 0x80): four_point; break;
 458:	8b b3       	in	r24, 0x1b	; 27
 45a:	8f 76       	andi	r24, 0x6F	; 111
 45c:	15 c0       	rjmp	.+42     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	case ('5' | 0x80): five_point; break;
 45e:	8b b3       	in	r24, 0x1b	; 27
 460:	87 7e       	andi	r24, 0xE7	; 231
 462:	8b bb       	out	0x1b, r24	; 27
 464:	88 b3       	in	r24, 0x18	; 24
 466:	8b 7c       	andi	r24, 0xCB	; 203
 468:	12 c0       	rjmp	.+36     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	case ('6' | 0x80): six_point; break;
 46a:	dc 98       	cbi	0x1b, 4	; 27
 46c:	08 c0       	rjmp	.+16     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	case ('7' | 0x80): seven_point; break;
 46e:	8b b3       	in	r24, 0x1b	; 27
 470:	87 77       	andi	r24, 0x77	; 119
 472:	8b bb       	out	0x1b, r24	; 27
 474:	c4 98       	cbi	0x18, 4	; 24
 476:	0e c0       	rjmp	.+28     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	case ('8' | 0x80): eight_point; break;
 478:	8b b3       	in	r24, 0x1b	; 27
 47a:	87 76       	andi	r24, 0x67	; 103
 47c:	8b bb       	out	0x1b, r24	; 27
 47e:	88 b3       	in	r24, 0x18	; 24
 480:	89 7c       	andi	r24, 0xC9	; 201
 482:	05 c0       	rjmp	.+10     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	case ('9' | 0x80): nine_point; break;
 484:	8b b3       	in	r24, 0x1b	; 27
 486:	87 76       	andi	r24, 0x67	; 103
 488:	8b bb       	out	0x1b, r24	; 27
 48a:	88 b3       	in	r24, 0x18	; 24
 48c:	8f 7c       	andi	r24, 0xCF	; 207
 48e:	88 bb       	out	0x18, r24	; 24
 490:	01 c0       	rjmp	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	case ('-' | 0x80): minus_point; break;	
 492:	c5 98       	cbi	0x18, 5	; 24
 494:	c3 98       	cbi	0x18, 3	; 24
 496:	08 95       	ret

00000498 <Display_driver>:



/******************************************************************************************************/
void Display_driver()
{buf_ptr++; buf_ptr = buf_ptr%4;
 498:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <buf_ptr>
 49c:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <buf_ptr+0x1>
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <buf_ptr+0x1>
 4a6:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <buf_ptr>
 4aa:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <buf_ptr>
 4ae:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <buf_ptr+0x1>
 4b2:	64 e0       	ldi	r22, 0x04	; 4
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	48 d0       	rcall	.+144    	; 0x548 <__divmodhi4>
 4b8:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <buf_ptr+0x1>
 4bc:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <buf_ptr>
	
	switch(buf_ptr){
 4c0:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <buf_ptr>
 4c4:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <buf_ptr+0x1>
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	91 05       	cpc	r25, r1
 4cc:	61 f0       	breq	.+24     	; 0x4e6 <Display_driver+0x4e>
 4ce:	24 f4       	brge	.+8      	; 0x4d8 <Display_driver+0x40>
 4d0:	89 2b       	or	r24, r25
 4d2:	61 f4       	brne	.+24     	; 0x4ec <Display_driver+0x54>
		case 0: {digit_0;} break;
 4d4:	c0 9a       	sbi	0x18, 0	; 24
 4d6:	0a c0       	rjmp	.+20     	; 0x4ec <Display_driver+0x54>

/******************************************************************************************************/
void Display_driver()
{buf_ptr++; buf_ptr = buf_ptr%4;
	
	switch(buf_ptr){
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	91 05       	cpc	r25, r1
 4dc:	31 f0       	breq	.+12     	; 0x4ea <Display_driver+0x52>
 4de:	03 97       	sbiw	r24, 0x03	; 3
 4e0:	29 f4       	brne	.+10     	; 0x4ec <Display_driver+0x54>
		case 0: {digit_0;} break;
		case 1: {digit_1;} break;
		case 2: {digit_2;} break;
		case 3: {digit_3;} break;}
 4e2:	c6 9a       	sbi	0x18, 6	; 24
 4e4:	03 c0       	rjmp	.+6      	; 0x4ec <Display_driver+0x54>
void Display_driver()
{buf_ptr++; buf_ptr = buf_ptr%4;
	
	switch(buf_ptr){
		case 0: {digit_0;} break;
		case 1: {digit_1;} break;
 4e6:	dd 9a       	sbi	0x1b, 5	; 27
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <Display_driver+0x54>
		case 2: {digit_2;} break;
 4ea:	de 9a       	sbi	0x1b, 6	; 27
		case 3: {digit_3;} break;}
	Char_definition();}
 4ec:	14 cf       	rjmp	.-472    	; 0x316 <Char_definition>

000004ee <__vector_14>:



/******************************************************************************************************/
	/******************************************************************************************************/
	ISR (TIMER0_COMPA_vect){								//Controls display intensity
 4ee:	1f 92       	push	r1
 4f0:	0f 92       	push	r0
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	0f 92       	push	r0
 4f6:	11 24       	eor	r1, r1
 4f8:	2f 93       	push	r18
 4fa:	3f 93       	push	r19
 4fc:	4f 93       	push	r20
 4fe:	5f 93       	push	r21
 500:	6f 93       	push	r22
 502:	7f 93       	push	r23
 504:	8f 93       	push	r24
 506:	9f 93       	push	r25
 508:	af 93       	push	r26
 50a:	bf 93       	push	r27
 50c:	ef 93       	push	r30
 50e:	ff 93       	push	r31
		if(!(int_counter%display_intensity))				//1 or 4
 510:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <int_counter>
 514:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <int_counter+0x1>
 518:	60 91 87 00 	lds	r22, 0x0087	; 0x800087 <display_intensity>
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	14 d0       	rcall	.+40     	; 0x548 <__divmodhi4>
 520:	89 2b       	or	r24, r25
 522:	09 f4       	brne	.+2      	; 0x526 <__vector_14+0x38>
		{Display_driver();}}
 524:	b9 df       	rcall	.-142    	; 0x498 <Display_driver>
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	bf 91       	pop	r27
 52c:	af 91       	pop	r26
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	7f 91       	pop	r23
 534:	6f 91       	pop	r22
 536:	5f 91       	pop	r21
 538:	4f 91       	pop	r20
 53a:	3f 91       	pop	r19
 53c:	2f 91       	pop	r18
 53e:	0f 90       	pop	r0
 540:	0f be       	out	0x3f, r0	; 63
 542:	0f 90       	pop	r0
 544:	1f 90       	pop	r1
 546:	18 95       	reti

00000548 <__divmodhi4>:
 548:	97 fb       	bst	r25, 7
 54a:	07 2e       	mov	r0, r23
 54c:	16 f4       	brtc	.+4      	; 0x552 <__divmodhi4+0xa>
 54e:	00 94       	com	r0
 550:	06 d0       	rcall	.+12     	; 0x55e <__divmodhi4_neg1>
 552:	77 fd       	sbrc	r23, 7
 554:	08 d0       	rcall	.+16     	; 0x566 <__divmodhi4_neg2>
 556:	0b d0       	rcall	.+22     	; 0x56e <__udivmodhi4>
 558:	07 fc       	sbrc	r0, 7
 55a:	05 d0       	rcall	.+10     	; 0x566 <__divmodhi4_neg2>
 55c:	3e f4       	brtc	.+14     	; 0x56c <__divmodhi4_exit>

0000055e <__divmodhi4_neg1>:
 55e:	90 95       	com	r25
 560:	81 95       	neg	r24
 562:	9f 4f       	sbci	r25, 0xFF	; 255
 564:	08 95       	ret

00000566 <__divmodhi4_neg2>:
 566:	70 95       	com	r23
 568:	61 95       	neg	r22
 56a:	7f 4f       	sbci	r23, 0xFF	; 255

0000056c <__divmodhi4_exit>:
 56c:	08 95       	ret

0000056e <__udivmodhi4>:
 56e:	aa 1b       	sub	r26, r26
 570:	bb 1b       	sub	r27, r27
 572:	51 e1       	ldi	r21, 0x11	; 17
 574:	07 c0       	rjmp	.+14     	; 0x584 <__udivmodhi4_ep>

00000576 <__udivmodhi4_loop>:
 576:	aa 1f       	adc	r26, r26
 578:	bb 1f       	adc	r27, r27
 57a:	a6 17       	cp	r26, r22
 57c:	b7 07       	cpc	r27, r23
 57e:	10 f0       	brcs	.+4      	; 0x584 <__udivmodhi4_ep>
 580:	a6 1b       	sub	r26, r22
 582:	b7 0b       	sbc	r27, r23

00000584 <__udivmodhi4_ep>:
 584:	88 1f       	adc	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	5a 95       	dec	r21
 58a:	a9 f7       	brne	.-22     	; 0x576 <__udivmodhi4_loop>
 58c:	80 95       	com	r24
 58e:	90 95       	com	r25
 590:	bc 01       	movw	r22, r24
 592:	cd 01       	movw	r24, r26
 594:	08 95       	ret

00000596 <eeprom_read_byte>:
 596:	e1 99       	sbic	0x1c, 1	; 28
 598:	fe cf       	rjmp	.-4      	; 0x596 <eeprom_read_byte>
 59a:	1f ba       	out	0x1f, r1	; 31
 59c:	8e bb       	out	0x1e, r24	; 30
 59e:	e0 9a       	sbi	0x1c, 0	; 28
 5a0:	99 27       	eor	r25, r25
 5a2:	8d b3       	in	r24, 0x1d	; 29
 5a4:	08 95       	ret

000005a6 <eeprom_write_byte>:
 5a6:	26 2f       	mov	r18, r22

000005a8 <eeprom_write_r18>:
 5a8:	e1 99       	sbic	0x1c, 1	; 28
 5aa:	fe cf       	rjmp	.-4      	; 0x5a8 <eeprom_write_r18>
 5ac:	1c ba       	out	0x1c, r1	; 28
 5ae:	1f ba       	out	0x1f, r1	; 31
 5b0:	8e bb       	out	0x1e, r24	; 30
 5b2:	2d bb       	out	0x1d, r18	; 29
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	e2 9a       	sbi	0x1c, 2	; 28
 5ba:	e1 9a       	sbi	0x1c, 1	; 28
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	08 95       	ret

000005c2 <_exit>:
 5c2:	f8 94       	cli

000005c4 <__stop_program>:
 5c4:	ff cf       	rjmp	.-2      	; 0x5c4 <__stop_program>
