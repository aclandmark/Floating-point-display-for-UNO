
TWI_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001d42  00001dd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  00800064  00800064  00001dda  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001e78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015c3  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b7  00000000  00000000  0000351b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f43  00000000  00000000  00003cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00004c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060d  00000000  00000000  00004f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001512  00000000  00000000  0000552d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00006a3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	8b c0       	rjmp	.+278    	; 0x11a <__bad_interrupt>
       4:	8a c0       	rjmp	.+276    	; 0x11a <__bad_interrupt>
       6:	89 c0       	rjmp	.+274    	; 0x11a <__bad_interrupt>
       8:	88 c0       	rjmp	.+272    	; 0x11a <__bad_interrupt>
       a:	87 c0       	rjmp	.+270    	; 0x11a <__bad_interrupt>
       c:	3a c5       	rjmp	.+2676   	; 0xa82 <__vector_6>
       e:	85 c0       	rjmp	.+266    	; 0x11a <__bad_interrupt>
      10:	84 c0       	rjmp	.+264    	; 0x11a <__bad_interrupt>
      12:	83 c0       	rjmp	.+262    	; 0x11a <__bad_interrupt>
      14:	82 c0       	rjmp	.+260    	; 0x11a <__bad_interrupt>
      16:	81 c0       	rjmp	.+258    	; 0x11a <__bad_interrupt>
      18:	80 c0       	rjmp	.+256    	; 0x11a <__bad_interrupt>
      1a:	7f c0       	rjmp	.+254    	; 0x11a <__bad_interrupt>
      1c:	a4 c6       	rjmp	.+3400   	; 0xd66 <__vector_14>
      1e:	7d c0       	rjmp	.+250    	; 0x11a <__bad_interrupt>
      20:	7c c0       	rjmp	.+248    	; 0x11a <__bad_interrupt>
      22:	7b c0       	rjmp	.+246    	; 0x11a <__bad_interrupt>
      24:	7a c0       	rjmp	.+244    	; 0x11a <__bad_interrupt>
      26:	07 63       	ori	r16, 0x37	; 55
      28:	42 36       	cpi	r20, 0x62	; 98
      2a:	b7 9b       	sbis	0x16, 7	; 22
      2c:	d8 a7       	std	Y+40, r29	; 0x28
      2e:	1a 39       	cpi	r17, 0x9A	; 154
      30:	68 56       	subi	r22, 0x68	; 104
      32:	18 ae       	std	Y+56, r1	; 0x38
      34:	ba ab       	std	Y+50, r27	; 0x32
      36:	55 8c       	ldd	r5, Z+29	; 0x1d
      38:	1d 3c       	cpi	r17, 0xCD	; 205
      3a:	b7 cc       	rjmp	.-1682   	; 0xfffff9aa <__eeprom_end+0xff7ef9aa>
      3c:	57 63       	ori	r21, 0x37	; 55
      3e:	bd 6d       	ori	r27, 0xDD	; 221
      40:	ed fd       	.word	0xfded	; ????
      42:	75 3e       	cpi	r23, 0xE5	; 229
      44:	f6 17       	cp	r31, r22
      46:	72 31       	cpi	r23, 0x12	; 18
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	08 00       	.word	0x0008	; ????
      50:	00 00       	nop
      52:	be 92       	st	-X, r11
      54:	24 49       	sbci	r18, 0x94	; 148
      56:	12 3e       	cpi	r17, 0xE2	; 226
      58:	ab aa       	std	Y+51, r10	; 0x33
      5a:	aa 2a       	or	r10, r26
      5c:	be cd       	rjmp	.-1156   	; 0xfffffbda <__eeprom_end+0xff7efbda>
      5e:	cc cc       	rjmp	.-1640   	; 0xfffff9f8 <__eeprom_end+0xff7ef9f8>
      60:	4c 3e       	cpi	r20, 0xEC	; 236
      62:	00 00       	nop
      64:	00 80       	ld	r0, Z
      66:	be ab       	std	Y+54, r27	; 0x36
      68:	aa aa       	std	Y+50, r10	; 0x32
      6a:	aa 3e       	cpi	r26, 0xEA	; 234
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	bf 00       	.word	0x00bf	; ????
      72:	00 00       	nop
      74:	80 3f       	cpi	r24, 0xF0	; 240
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 08       	sbc	r0, r0
      7c:	41 78       	andi	r20, 0x81	; 129
      7e:	d3 bb       	out	0x13, r29	; 19
      80:	43 87       	std	Z+11, r20	; 0x0b
      82:	d1 13       	cpse	r29, r17
      84:	3d 19       	sub	r19, r13
      86:	0e 3c       	cpi	r16, 0xCE	; 206
      88:	c3 bd       	out	0x23, r28	; 35
      8a:	42 82       	std	Z+2, r4	; 0x02
      8c:	ad 2b       	or	r26, r29
      8e:	3e 68       	ori	r19, 0x8E	; 142
      90:	ec 82       	std	Y+4, r14	; 0x04
      92:	76 be       	out	0x36, r7	; 54
      94:	d9 8f       	std	Y+25, r29	; 0x19
      96:	e1 a9       	ldd	r30, Z+49	; 0x31
      98:	3e 4c       	sbci	r19, 0xCE	; 206
      9a:	80 ef       	ldi	r24, 0xF0	; 240
      9c:	ff be       	out	0x3f, r15	; 63
      9e:	01 c4       	rjmp	.+2050   	; 0x8a2 <data_from_UNO+0x14c>
      a0:	ff 7f       	andi	r31, 0xFF	; 255
      a2:	3f 00       	.word	0x003f	; ????
      a4:	00 00       	nop
	...

000000a8 <__trampolines_end>:
      a8:	4e 41       	sbci	r20, 0x1E	; 30
      aa:	4e 49       	Address 0x000000aa is out of bounds.
.word	0xffff	; ????

000000ab <pstr_inity>:
      ab:	49 4e 49 54 59                                      INITY

000000b0 <pstr_inf>:
      b0:	49 4e 46                                            INF

000000b3 <pwr_m10>:
      b3:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      c3:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000cb <pwr_p10>:
      cb:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      db:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf e5       	ldi	r28, 0x5F	; 95
      ea:	d2 e0       	ldi	r29, 0x02	; 2
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	a0 e6       	ldi	r26, 0x60	; 96
      f4:	b0 e0       	ldi	r27, 0x00	; 0
      f6:	e2 e4       	ldi	r30, 0x42	; 66
      f8:	fd e1       	ldi	r31, 0x1D	; 29
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	a4 36       	cpi	r26, 0x64	; 100
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	a4 e6       	ldi	r26, 0x64	; 100
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	aa 3a       	cpi	r26, 0xAA	; 170
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	a6 d6       	rcall	.+3404   	; 0xe64 <main>
     118:	12 ce       	rjmp	.-988    	; 0xfffffd3e <__eeprom_end+0xff7efd3e>

0000011a <__bad_interrupt>:
     11a:	72 cf       	rjmp	.-284    	; 0x0 <__vectors>

0000011c <USI_TWI_Master_Initialise>:


/*************************************************************************************************************************************/
void USI_TWI_Master_Initialise( void )
{
	PORT_USI |= (1<<PIN_USI_SDA);										// Enable pull-up on SDA, to set high as released state.
     11c:	d8 9a       	sbi	0x1b, 0	; 27
	PORT_USI |= (1<<PIN_USI_SCL);										// Enable pull-up on SCL, to set high as released state.
     11e:	da 9a       	sbi	0x1b, 2	; 27
	
	DDR_USI  |= (1<<PIN_USI_SCL);										// Enable SCL as output.
     120:	d2 9a       	sbi	0x1a, 2	; 26
	DDR_USI  |= (1<<PIN_USI_SDA);										// Enable SDA as output.
     122:	d0 9a       	sbi	0x1a, 0	; 26
	
	USIDR    =  0xFF;													// Pre-load data register with "released level" data.
     124:	8f ef       	ldi	r24, 0xFF	; 255
     126:	8f b9       	out	0x0f, r24	; 15
	USICR    =  (0<<USISIE)|(0<<USIOIE)|								// Disable Interrupts.
     128:	8a e2       	ldi	r24, 0x2A	; 42
     12a:	8d b9       	out	0x0d, r24	; 13
	(1<<USIWM1)|(0<<USIWM0)|											// Set USI in Two-wire mode.
	(1<<USICS1)|(0<<USICS0)|(1<<USICLK)|								// Software strobe as counter clock source  (EXTERNAL DATA CLOCK)
	(0<<USITC);
	USISR   =   (1<<USISIF)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|			// Clear flags,
     12c:	80 ef       	ldi	r24, 0xF0	; 240
     12e:	8e b9       	out	0x0e, r24	; 14
     130:	08 95       	ret

00000132 <USI_TWI_Master_Transfer>:


/*************************************************************************************************************************************/
unsigned char USI_TWI_Master_Transfer( unsigned char temp )
{
	USISR = temp;														// Set USISR according to temp.
     132:	8e b9       	out	0x0e, r24	; 14
	(1<<USICS1)|(0<<USICS0)|(1<<USICLK)|								// Software clock strobe as source.
	(1<<USITC);															// Toggle Clock Port.
	do
	{
		T2_delay;
		USICR = temp;													// Generate positive SCL edge.
     134:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     136:	95 e0       	ldi	r25, 0x05	; 5
     138:	9a 95       	dec	r25
     13a:	f1 f7       	brne	.-4      	; 0x138 <USI_TWI_Master_Transfer+0x6>
     13c:	00 00       	nop
     13e:	8d b9       	out	0x0d, r24	; 13
		while( !(PIN_USI & (1<<PIN_USI_SCL)) );							// Wait for SCL to go high.
     140:	ca 9b       	sbis	0x19, 2	; 25
     142:	fe cf       	rjmp	.-4      	; 0x140 <USI_TWI_Master_Transfer+0xe>
     144:	92 e0       	ldi	r25, 0x02	; 2
     146:	9a 95       	dec	r25
     148:	f1 f7       	brne	.-4      	; 0x146 <USI_TWI_Master_Transfer+0x14>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <USI_TWI_Master_Transfer+0x1a>
		T4_delay;
		USICR = temp;													// Generate negative SCL edge.
     14c:	8d b9       	out	0x0d, r24	; 13
	}while( !(USISR & (1<<USIOIF)) );									// Check for transfer complete.
     14e:	76 9b       	sbis	0x0e, 6	; 14
     150:	f2 cf       	rjmp	.-28     	; 0x136 <USI_TWI_Master_Transfer+0x4>
     152:	85 e0       	ldi	r24, 0x05	; 5
     154:	8a 95       	dec	r24
     156:	f1 f7       	brne	.-4      	; 0x154 <USI_TWI_Master_Transfer+0x22>
     158:	00 00       	nop
	
	T2_delay;	
	temp  = USIDR;														// Read out data.
     15a:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;														// Release SDA.
     15c:	9f ef       	ldi	r25, 0xFF	; 255
     15e:	9f b9       	out	0x0f, r25	; 15
	DDR_USI |= (1<<PIN_USI_SDA);										// Enable SDA as output.
     160:	d0 9a       	sbi	0x1a, 0	; 26

	return temp;														// Return the data from the USIDR
}
     162:	08 95       	ret

00000164 <send_save_address_plus_RW_bit>:
}


/*************************************************************************************************************************************/
char send_save_address_plus_RW_bit(unsigned char address_plus_RW_bit)
{PORT_USI |= (1<<PIN_USI_SCL);											// Release SCL. (output hight)
     164:	da 9a       	sbi	0x1b, 2	; 27
while( !(PIN_USI & (1<<PIN_USI_SCL)) );									// Verify that SCL becomes high.
     166:	ca 9b       	sbis	0x19, 2	; 25
     168:	fe cf       	rjmp	.-4      	; 0x166 <send_save_address_plus_RW_bit+0x2>
     16a:	92 e0       	ldi	r25, 0x02	; 2
     16c:	9a 95       	dec	r25
     16e:	f1 f7       	brne	.-4      	; 0x16c <send_save_address_plus_RW_bit+0x8>
     170:	00 c0       	rjmp	.+0      	; 0x172 <send_save_address_plus_RW_bit+0xe>
T4_delay;																// Delay for T2_TWI

PORT_USI &= ~(1<<PIN_USI_SDA);											// Force SDA LOW to Generate Start Condition.
     172:	d8 98       	cbi	0x1b, 0	; 27
     174:	92 e0       	ldi	r25, 0x02	; 2
     176:	9a 95       	dec	r25
     178:	f1 f7       	brne	.-4      	; 0x176 <send_save_address_plus_RW_bit+0x12>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <send_save_address_plus_RW_bit+0x18>
T4_delay;	
PORT_USI &= ~(1<<PIN_USI_SCL);											// Pull SCL LOW.
     17c:	da 98       	cbi	0x1b, 2	; 27
PORT_USI |= (1<<PIN_USI_SDA);											// Release SDA.	
     17e:	d8 9a       	sbi	0x1b, 0	; 27
PORT_USI &= ~(1<<PIN_USI_SCL);											// Pull SCL LOW.
     180:	da 98       	cbi	0x1b, 2	; 27

USIDR     = address_plus_RW_bit;										// copy slave address to data register.
     182:	8f b9       	out	0x0f, r24	; 15
USI_TWI_Master_Transfer( tempUSISR_8bit );								// Send 8 bits on bus.	
     184:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <tempUSISR_8bit>
     188:	d4 df       	rcall	.-88     	; 0x132 <USI_TWI_Master_Transfer>
DDR_USI  &= ~(1<<PIN_USI_SDA);											// Enable SDA as input.
     18a:	d0 98       	cbi	0x1a, 0	; 26
if(!(USI_TWI_Master_Transfer( tempUSISR_1bit ) & 1)	)					// Wait for (N)Ack byte
     18c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <tempUSISR_1bit>
     190:	d0 df       	rcall	.-96     	; 0x132 <USI_TWI_Master_Transfer>
     192:	80 95       	com	r24
return 1;																//Ack received
else return 0;}															//Nack received
     194:	81 70       	andi	r24, 0x01	; 1
     196:	08 95       	ret

00000198 <USI_TWI_Master_Stop>:


/*************************************************************************************************************************************/
void USI_TWI_Master_Stop( void )
{
	PORT_USI &= ~(1<<PIN_USI_SDA);										// Pull SDA low.
     198:	d8 98       	cbi	0x1b, 0	; 27
	PORT_USI |= (1<<PIN_USI_SCL);										// Release SCL.
     19a:	da 9a       	sbi	0x1b, 2	; 27
	while( !(PIN_USI & (1<<PIN_USI_SCL)) );								// Wait for SCL to go high.
     19c:	ca 9b       	sbis	0x19, 2	; 25
     19e:	fe cf       	rjmp	.-4      	; 0x19c <USI_TWI_Master_Stop+0x4>
     1a0:	82 e0       	ldi	r24, 0x02	; 2
     1a2:	8a 95       	dec	r24
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <USI_TWI_Master_Stop+0xa>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <USI_TWI_Master_Stop+0x10>
	T4_delay;	
	PORT_USI |= (1<<PIN_USI_SDA);										// Release SDA.
     1a8:	d8 9a       	sbi	0x1b, 0	; 27
     1aa:	85 e0       	ldi	r24, 0x05	; 5
     1ac:	8a 95       	dec	r24
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <USI_TWI_Master_Stop+0x14>
     1b0:	00 00       	nop
     1b2:	08 95       	ret

000001b4 <write_data_to_slave>:
else return 0;}															//Nack received



/*************************************************************************************************************************************/
void write_data_to_slave(unsigned char data_byte, char last_char){
     1b4:	cf 93       	push	r28
     1b6:	c6 2f       	mov	r28, r22
PORT_USI &= ~(1<<PIN_USI_SCL);											// Pull SCL LOW.
     1b8:	da 98       	cbi	0x1b, 2	; 27
USIDR     = data_byte;													// Setup data.
     1ba:	8f b9       	out	0x0f, r24	; 15
USI_TWI_Master_Transfer( tempUSISR_8bit );								// Send 8 bits on bus.
     1bc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <tempUSISR_8bit>
     1c0:	b8 df       	rcall	.-144    	; 0x132 <USI_TWI_Master_Transfer>

DDR_USI  &= ~(1<<PIN_USI_SDA);											// Enable SDA as input.
     1c2:	d0 98       	cbi	0x1a, 0	; 26
USI_TWI_Master_Transfer( tempUSISR_1bit );								// Wait for (N)Ack byte
     1c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <tempUSISR_1bit>
     1c8:	b4 df       	rcall	.-152    	; 0x132 <USI_TWI_Master_Transfer>
if(last_char)USI_TWI_Master_Stop();}
     1ca:	cc 23       	and	r28, r28
     1cc:	11 f0       	breq	.+4      	; 0x1d2 <write_data_to_slave+0x1e>
     1ce:	cf 91       	pop	r28
     1d0:	e3 cf       	rjmp	.-58     	; 0x198 <USI_TWI_Master_Stop>
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <read_data_from_slave>:




/*************************************************************************************************************************************/
unsigned char read_data_from_slave(char last_char){
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	c8 2f       	mov	r28, r24
unsigned char data_byte;
	
DDR_USI   &= ~(1<<PIN_USI_SDA);											// Enable SDA as input.
     1dc:	d0 98       	cbi	0x1a, 0	; 26
data_byte  = USI_TWI_Master_Transfer( tempUSISR_8bit );
     1de:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <tempUSISR_8bit>
     1e2:	a7 df       	rcall	.-178    	; 0x132 <USI_TWI_Master_Transfer>
     1e4:	d8 2f       	mov	r29, r24

if( last_char) {USIDR = 0xFF;}											// Load NACK to confirm End Of Transmission.
     1e6:	cc 23       	and	r28, r28
     1e8:	19 f0       	breq	.+6      	; 0x1f0 <read_data_from_slave+0x1a>
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	8f b9       	out	0x0f, r24	; 15
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <read_data_from_slave+0x1c>
else {USIDR = 0x00; }													// Load ACK. Set data register bit 7 (output for SDA) low.
     1f0:	1f b8       	out	0x0f, r1	; 15
USI_TWI_Master_Transfer( tempUSISR_1bit );								// Send ACK/NACK.
     1f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <tempUSISR_1bit>
     1f6:	9d df       	rcall	.-198    	; 0x132 <USI_TWI_Master_Transfer>
if(last_char)USI_TWI_Master_Stop();
     1f8:	c1 11       	cpse	r28, r1
     1fa:	ce df       	rcall	.-100    	; 0x198 <USI_TWI_Master_Stop>
return data_byte;}
     1fc:	8d 2f       	mov	r24, r29
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	08 95       	ret

00000204 <Format_for_Display>:
void ftoaL(float, char *);														//Local version of the float to askii routine



/*********************************************************************************************************************************/
signed char Format_for_Display(char* array, char sign, signed char expt){		//Receives FP_strings with MSB or sign in location 0 (RH end of display)
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	fc 01       	movw	r30, r24
																				//Takes positive numbers ONLY but adds a negative sign bit if necessary
	int array_ptr, LSB_ptr;
	char E_space;																//Space required on display for exponential notation
		
	if (array[0] == '9'){														//If array zero is 9 shift it one place to the right
     212:	80 81       	ld	r24, Z
     214:	9f 01       	movw	r18, r30
     216:	21 5f       	subi	r18, 0xF1	; 241
     218:	3f 4f       	sbci	r19, 0xFF	; 255
     21a:	89 33       	cpi	r24, 0x39	; 57
     21c:	59 f4       	brne	.+22     	; 0x234 <Format_for_Display+0x30>
     21e:	d9 01       	movw	r26, r18
		for(int m = 0; m <= 14; m++)array[15-m] = array[14-m];					//to allow for the possibility of rounding
     220:	8e 91       	ld	r24, -X
     222:	11 96       	adiw	r26, 0x01	; 1
     224:	8c 93       	st	X, r24
     226:	11 97       	sbiw	r26, 0x01	; 1
     228:	ae 17       	cp	r26, r30
     22a:	bf 07       	cpc	r27, r31
     22c:	c9 f7       	brne	.-14     	; 0x220 <Format_for_Display+0x1c>
	array[0] = '0'; expt += 1;}													//Exponent must be incremented
     22e:	80 e3       	ldi	r24, 0x30	; 48
     230:	80 83       	st	Z, r24
     232:	4f 5f       	subi	r20, 0xFF	; 255
     234:	7f 01       	movw	r14, r30
void ftoaL(float, char *);														//Local version of the float to askii routine



/*********************************************************************************************************************************/
signed char Format_for_Display(char* array, char sign, signed char expt){		//Receives FP_strings with MSB or sign in location 0 (RH end of display)
     236:	d9 01       	movw	r26, r18
		for(int m = 0; m <= 14; m++)array[15-m] = array[14-m];					//to allow for the possibility of rounding
	array[0] = '0'; expt += 1;}													//Exponent must be incremented
	
	
	for (int m = 15; m; m--)													//Convert trailing zeros to null characters 
	{if (array[m] == 0) continue;
     238:	8c 91       	ld	r24, X
     23a:	88 23       	and	r24, r24
     23c:	39 f0       	breq	.+14     	; 0x24c <Format_for_Display+0x48>
		if (array [m] == '0') array[m] = 0;
     23e:	80 33       	cpi	r24, 0x30	; 48
     240:	21 f0       	breq	.+8      	; 0x24a <Format_for_Display+0x46>
void ftoaL(float, char *);														//Local version of the float to askii routine



/*********************************************************************************************************************************/
signed char Format_for_Display(char* array, char sign, signed char expt){		//Receives FP_strings with MSB or sign in location 0 (RH end of display)
     242:	89 01       	movw	r16, r18
     244:	8f e0       	ldi	r24, 0x0F	; 15
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0c c0       	rjmp	.+24     	; 0x262 <__stack+0x3>
	array[0] = '0'; expt += 1;}													//Exponent must be incremented
	
	
	for (int m = 15; m; m--)													//Convert trailing zeros to null characters 
	{if (array[m] == 0) continue;
		if (array [m] == '0') array[m] = 0;
     24a:	1c 92       	st	X, r1
     24c:	11 97       	sbiw	r26, 0x01	; 1
	if (array[0] == '9'){														//If array zero is 9 shift it one place to the right
		for(int m = 0; m <= 14; m++)array[15-m] = array[14-m];					//to allow for the possibility of rounding
	array[0] = '0'; expt += 1;}													//Exponent must be incremented
	
	
	for (int m = 15; m; m--)													//Convert trailing zeros to null characters 
     24e:	ae 17       	cp	r26, r30
     250:	bf 07       	cpc	r27, r31
     252:	91 f7       	brne	.-28     	; 0x238 <Format_for_Display+0x34>
     254:	f6 cf       	rjmp	.-20     	; 0x242 <Format_for_Display+0x3e>
	{if (array[m] == 0) continue;
		if (array [m] == '0') array[m] = 0;
	else break;}

	for (int m = 15; m; m--)													//Identify location of the least significant digit
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	01 50       	subi	r16, 0x01	; 1
     25a:	11 09       	sbc	r17, r1
     25c:	00 97       	sbiw	r24, 0x00	; 0
     25e:	09 f4       	brne	.+2      	; 0x262 <__stack+0x3>
     260:	40 c0       	rjmp	.+128    	; 0x2e2 <__stack+0x83>
	{LSB_ptr = m;
		if (array[m] == 0) continue;
     262:	d8 01       	movw	r26, r16
     264:	5c 91       	ld	r21, X
     266:	55 23       	and	r21, r21
     268:	b1 f3       	breq	.-20     	; 0x256 <Format_for_Display+0x52>
	else  break;}
	
if (array[LSB_ptr] == '.') array [LSB_ptr + 1] = '0';							//Rounding is not required
     26a:	5e 32       	cpi	r21, 0x2E	; 46
     26c:	39 f4       	brne	.+14     	; 0x27c <__stack+0x1d>
     26e:	df 01       	movw	r26, r30
     270:	a8 0f       	add	r26, r24
     272:	b9 1f       	adc	r27, r25
     274:	50 e3       	ldi	r21, 0x30	; 48
     276:	11 96       	adiw	r26, 0x01	; 1
     278:	5c 93       	st	X, r21
     27a:	33 c0       	rjmp	.+102    	; 0x2e2 <__stack+0x83>
	
else
{
	if (LSB_ptr >= 5){
     27c:	85 30       	cpi	r24, 0x05	; 5
     27e:	91 05       	cpc	r25, r1
     280:	84 f1       	brlt	.+96     	; 0x2e2 <__stack+0x83>

	if (array[LSB_ptr] >= '5')													//Round least significant digit
     282:	55 33       	cpi	r21, 0x35	; 53
     284:	70 f1       	brcs	.+92     	; 0x2e2 <__stack+0x83>
	{array[LSB_ptr--] = 0; if(array[LSB_ptr] == '.')LSB_ptr -= 1;				//Round additional digits as necessary
     286:	dc 01       	movw	r26, r24
     288:	11 97       	sbiw	r26, 0x01	; 1
     28a:	e8 01       	movw	r28, r16
     28c:	18 82       	st	Y, r1
     28e:	8f 01       	movw	r16, r30
     290:	0a 0f       	add	r16, r26
     292:	1b 1f       	adc	r17, r27
     294:	e8 01       	movw	r28, r16
     296:	58 81       	ld	r21, Y
     298:	5e 32       	cpi	r21, 0x2E	; 46
     29a:	09 f4       	brne	.+2      	; 0x29e <__stack+0x3f>
     29c:	11 97       	sbiw	r26, 0x01	; 1
		array[LSB_ptr] += 1;
     29e:	8f 01       	movw	r16, r30
     2a0:	0a 0f       	add	r16, r26
     2a2:	1b 1f       	adc	r17, r27
     2a4:	e8 01       	movw	r28, r16
     2a6:	88 81       	ld	r24, Y
     2a8:	8f 5f       	subi	r24, 0xFF	; 255
     2aa:	88 83       	st	Y, r24
		
		while (array[LSB_ptr] == ':'){array[LSB_ptr--] = 0;						//If a 9 is incremented the next digit must also be incremented  
     2ac:	8f 01       	movw	r16, r30
     2ae:	0a 0f       	add	r16, r26
     2b0:	1b 1f       	adc	r17, r27
     2b2:	e8 01       	movw	r28, r16
     2b4:	88 81       	ld	r24, Y
     2b6:	8a 33       	cpi	r24, 0x3A	; 58
     2b8:	a1 f4       	brne	.+40     	; 0x2e2 <__stack+0x83>
     2ba:	cd 01       	movw	r24, r26
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	e8 01       	movw	r28, r16
     2c0:	18 82       	st	Y, r1
			if (array[LSB_ptr] == '.')LSB_ptr -= 1;								//Note '9' incremented becomes ':'
     2c2:	8f 01       	movw	r16, r30
     2c4:	08 0f       	add	r16, r24
     2c6:	19 1f       	adc	r17, r25
     2c8:	e8 01       	movw	r28, r16
     2ca:	58 81       	ld	r21, Y
     2cc:	5e 32       	cpi	r21, 0x2E	; 46
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <__stack+0x73>
     2d0:	01 97       	sbiw	r24, 0x01	; 1
		array[LSB_ptr] += 1;}}
     2d2:	df 01       	movw	r26, r30
     2d4:	a8 0f       	add	r26, r24
     2d6:	b9 1f       	adc	r27, r25
     2d8:	5c 91       	ld	r21, X
     2da:	5f 5f       	subi	r21, 0xFF	; 255
     2dc:	5c 93       	st	X, r21
     2de:	dc 01       	movw	r26, r24
     2e0:	e5 cf       	rjmp	.-54     	; 0x2ac <__stack+0x4d>
	}
}
		
		
		array_ptr = 0;
		if (flt_array[0] == '.')flt_array[0] = '0' | 0x80;						//Convert a decimal point in location zero to "0."
     2e2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <flt_array>
     2e6:	8e 32       	cpi	r24, 0x2E	; 46
     2e8:	21 f4       	brne	.+8      	; 0x2f2 <__stack+0x93>
     2ea:	80 eb       	ldi	r24, 0xB0	; 176
     2ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <flt_array>
     2f0:	1e c0       	rjmp	.+60     	; 0x32e <__stack+0xcf>
     2f2:	df 01       	movw	r26, r30
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
		else
		{for(int m = 0; m <= 15; m++)											//Locate decimal point
			{if (array[m] != '.' )continue;
     2f8:	5d 91       	ld	r21, X+
     2fa:	5e 32       	cpi	r21, 0x2E	; 46
     2fc:	31 f0       	breq	.+12     	; 0x30a <__stack+0xab>
		
		
		array_ptr = 0;
		if (flt_array[0] == '.')flt_array[0] = '0' | 0x80;						//Convert a decimal point in location zero to "0."
		else
		{for(int m = 0; m <= 15; m++)											//Locate decimal point
     2fe:	01 96       	adiw	r24, 0x01	; 1
     300:	80 31       	cpi	r24, 0x10	; 16
     302:	91 05       	cpc	r25, r1
     304:	c9 f7       	brne	.-14     	; 0x2f8 <__stack+0x99>
		array[LSB_ptr] += 1;}}
	}
}
		
		
		array_ptr = 0;
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
		if (flt_array[0] == '.')flt_array[0] = '0' | 0x80;						//Convert a decimal point in location zero to "0."
		else
		{for(int m = 0; m <= 15; m++)											//Locate decimal point
			{if (array[m] != '.' )continue;
			else array_ptr = m; break;}											//Combine it with the preceding digit
			array[array_ptr-1] |= 0x80;
     30a:	dc 01       	movw	r26, r24
     30c:	11 97       	sbiw	r26, 0x01	; 1
     30e:	ae 0f       	add	r26, r30
     310:	bf 1f       	adc	r27, r31
     312:	5c 91       	ld	r21, X
     314:	50 68       	ori	r21, 0x80	; 128
     316:	5c 93       	st	X, r21
     318:	df 01       	movw	r26, r30
     31a:	a8 0f       	add	r26, r24
     31c:	b9 1f       	adc	r27, r25
		for (int m = array_ptr; m <=14; m++)array[m] = array[m+1];}				//Shift array to fill the space left by the decimal point
     31e:	2a 17       	cp	r18, r26
     320:	3b 07       	cpc	r19, r27
     322:	29 f0       	breq	.+10     	; 0x32e <__stack+0xcf>
     324:	11 96       	adiw	r26, 0x01	; 1
     326:	8c 91       	ld	r24, X
     328:	11 97       	sbiw	r26, 0x01	; 1
     32a:	8d 93       	st	X+, r24
     32c:	f8 cf       	rjmp	.-16     	; 0x31e <__stack+0xbf>
		
		if (array[0] == '0'){expt -= 1;											//Location zero still empty:  Shift array one place to the right
     32e:	80 81       	ld	r24, Z
     330:	80 33       	cpi	r24, 0x30	; 48
     332:	49 f4       	brne	.+18     	; 0x346 <__stack+0xe7>
     334:	41 50       	subi	r20, 0x01	; 1
     336:	df 01       	movw	r26, r30
		for (int m = 0; m <= 14; m++) array [m] = array[m+1];}					//Restore exponent to its original value
     338:	11 96       	adiw	r26, 0x01	; 1
     33a:	8c 91       	ld	r24, X
     33c:	11 97       	sbiw	r26, 0x01	; 1
     33e:	8d 93       	st	X+, r24
     340:	2a 17       	cp	r18, r26
     342:	3b 07       	cpc	r19, r27
     344:	c9 f7       	brne	.-14     	; 0x338 <__stack+0xd9>
				
		if(array[1] == 0x80){array[0] |= 0x80; array[1] = '0';}					//Special case:  09.9999 E22 (say)
     346:	81 81       	ldd	r24, Z+1	; 0x01
     348:	80 38       	cpi	r24, 0x80	; 128
     34a:	29 f4       	brne	.+10     	; 0x356 <__stack+0xf7>
     34c:	80 81       	ld	r24, Z
     34e:	80 68       	ori	r24, 0x80	; 128
     350:	80 83       	st	Z, r24
     352:	80 e3       	ldi	r24, 0x30	; 48
     354:	81 83       	std	Z+1, r24	; 0x01
		if((array[0] & 0x80) && (!(array[1]))) array[1] = '0';					//Special case 1.9999, 2.9999999, 3.9999999 etc.
     356:	80 81       	ld	r24, Z
     358:	87 ff       	sbrs	r24, 7
     35a:	05 c0       	rjmp	.+10     	; 0x366 <__stack+0x107>
     35c:	81 81       	ldd	r24, Z+1	; 0x01
     35e:	81 11       	cpse	r24, r1
     360:	02 c0       	rjmp	.+4      	; 0x366 <__stack+0x107>
     362:	80 e3       	ldi	r24, 0x30	; 48
     364:	81 83       	std	Z+1, r24	; 0x01
		
		if(sign == '-')																		
     366:	6d 32       	cpi	r22, 0x2D	; 45
     368:	51 f4       	brne	.+20     	; 0x37e <__stack+0x11f>
     36a:	d9 01       	movw	r26, r18
		{for(int m = 0; m <= 14; m++)array[15-m] = array[14-m];					//For negative numbers shift the array once place to the right
     36c:	8e 91       	ld	r24, -X
     36e:	11 96       	adiw	r26, 0x01	; 1
     370:	8c 93       	st	X, r24
     372:	11 97       	sbiw	r26, 0x01	; 1
     374:	ea 17       	cp	r30, r26
     376:	fb 07       	cpc	r31, r27
     378:	c9 f7       	brne	.-14     	; 0x36c <__stack+0x10d>
		array[0] = '-';}														//and add the minus sign
     37a:	8d e2       	ldi	r24, 0x2D	; 45
     37c:	80 83       	st	Z, r24
				
		if (!(expt)){															//If there is no exponent right justify string on display
     37e:	41 11       	cpse	r20, r1
     380:	20 c0       	rjmp	.+64     	; 0x3c2 <__stack+0x163>
     382:	df 01       	movw	r26, r30
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	70 e0       	ldi	r23, 0x00	; 0
			for(int m = 0; m <= 15; m++)										//First get the length of the string
			{array_ptr = m; if (array[m]  == 0)break;}							
     388:	8d 91       	ld	r24, X+
     38a:	81 11       	cpse	r24, r1
     38c:	05 c0       	rjmp	.+10     	; 0x398 <__stack+0x139>
			array_ptr = 8 - array_ptr;											//Then shift it.
     38e:	88 e0       	ldi	r24, 0x08	; 8
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	86 1b       	sub	r24, r22
     394:	97 0b       	sbc	r25, r23
			while(array_ptr){for (int m = 15; m; m--)
     396:	10 c0       	rjmp	.+32     	; 0x3b8 <__stack+0x159>
		if(sign == '-')																		
		{for(int m = 0; m <= 14; m++)array[15-m] = array[14-m];					//For negative numbers shift the array once place to the right
		array[0] = '-';}														//and add the minus sign
				
		if (!(expt)){															//If there is no exponent right justify string on display
			for(int m = 0; m <= 15; m++)										//First get the length of the string
     398:	cb 01       	movw	r24, r22
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	80 31       	cpi	r24, 0x10	; 16
     39e:	91 05       	cpc	r25, r1
     3a0:	b1 f3       	breq	.-20     	; 0x38e <__stack+0x12f>
     3a2:	bc 01       	movw	r22, r24
     3a4:	f1 cf       	rjmp	.-30     	; 0x388 <__stack+0x129>
			{array_ptr = m; if (array[m]  == 0)break;}							
			array_ptr = 8 - array_ptr;											//Then shift it.
			while(array_ptr){for (int m = 15; m; m--)
				{array[m] = array[m-1];} array[0] = 0; array_ptr -= 1;}}
     3a6:	5e 91       	ld	r21, -X
     3a8:	11 96       	adiw	r26, 0x01	; 1
     3aa:	5c 93       	st	X, r21
     3ac:	11 97       	sbiw	r26, 0x01	; 1
				
		if (!(expt)){															//If there is no exponent right justify string on display
			for(int m = 0; m <= 15; m++)										//First get the length of the string
			{array_ptr = m; if (array[m]  == 0)break;}							
			array_ptr = 8 - array_ptr;											//Then shift it.
			while(array_ptr){for (int m = 15; m; m--)
     3ae:	ae 17       	cp	r26, r30
     3b0:	bf 07       	cpc	r27, r31
     3b2:	c9 f7       	brne	.-14     	; 0x3a6 <__stack+0x147>
				{array[m] = array[m-1];} array[0] = 0; array_ptr -= 1;}}
     3b4:	10 82       	st	Z, r1
     3b6:	01 97       	sbiw	r24, 0x01	; 1
				
		if (!(expt)){															//If there is no exponent right justify string on display
			for(int m = 0; m <= 15; m++)										//First get the length of the string
			{array_ptr = m; if (array[m]  == 0)break;}							
			array_ptr = 8 - array_ptr;											//Then shift it.
			while(array_ptr){for (int m = 15; m; m--)
     3b8:	00 97       	sbiw	r24, 0x00	; 0
     3ba:	09 f4       	brne	.+2      	; 0x3be <__stack+0x15f>
     3bc:	55 c0       	rjmp	.+170    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     3be:	d9 01       	movw	r26, r18
     3c0:	f2 cf       	rjmp	.-28     	; 0x3a6 <__stack+0x147>
				{array[m] = array[m-1];} array[0] = 0; array_ptr -= 1;}}
			
			else{																//If there is an exponent overwrite the RH display digits
				E_space = 2;														//with the Exponential notation
				if (expt >= 10) E_space = 3;										//and leave the number at the left hand end of the display
     3c2:	4a 30       	cpi	r20, 0x0A	; 10
     3c4:	24 f4       	brge	.+8      	; 0x3ce <__stack+0x16f>
				if (expt <= -10)E_space = 4;
     3c6:	47 3f       	cpi	r20, 0xF7	; 247
     3c8:	24 f0       	brlt	.+8      	; 0x3d2 <__stack+0x173>
			array_ptr = 8 - array_ptr;											//Then shift it.
			while(array_ptr){for (int m = 15; m; m--)
				{array[m] = array[m-1];} array[0] = 0; array_ptr -= 1;}}
			
			else{																//If there is an exponent overwrite the RH display digits
				E_space = 2;														//with the Exponential notation
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <__stack+0x175>
				if (expt >= 10) E_space = 3;										//and leave the number at the left hand end of the display
     3ce:	83 e0       	ldi	r24, 0x03	; 3
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <__stack+0x175>
				if (expt <= -10)E_space = 4;
     3d2:	84 e0       	ldi	r24, 0x04	; 4
				if ((expt < 0) && (expt > (-10)))E_space = 3;
     3d4:	99 e0       	ldi	r25, 0x09	; 9
     3d6:	94 0f       	add	r25, r20
     3d8:	99 30       	cpi	r25, 0x09	; 9
     3da:	08 f4       	brcc	.+2      	; 0x3de <__stack+0x17f>
     3dc:	83 e0       	ldi	r24, 0x03	; 3
     3de:	a7 e9       	ldi	r26, 0x97	; 151
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	27 ea       	ldi	r18, 0xA7	; 167
     3e4:	30 e0       	ldi	r19, 0x00	; 0
				
				for(int m = 0; m <= 15; m++)Non_exp_array[m] = array[m];			//Save array before overwriting with exponent
     3e6:	e7 01       	movw	r28, r14
     3e8:	99 91       	ld	r25, Y+
     3ea:	7e 01       	movw	r14, r28
     3ec:	9d 93       	st	X+, r25
     3ee:	2a 17       	cp	r18, r26
     3f0:	3b 07       	cpc	r19, r27
     3f2:	c9 f7       	brne	.-14     	; 0x3e6 <__stack+0x187>
							
				switch (E_space){
     3f4:	83 30       	cpi	r24, 0x03	; 3
     3f6:	41 f0       	breq	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f8:	84 30       	cpi	r24, 0x04	; 4
     3fa:	99 f0       	breq	.+38     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
					case 2:	array[7] = expt + '0';array[6] = 'E';break;			//E1 to E9
     3fc:	80 e3       	ldi	r24, 0x30	; 48
     3fe:	84 0f       	add	r24, r20
     400:	87 83       	std	Z+7, r24	; 0x07
     402:	85 e4       	ldi	r24, 0x45	; 69
     404:	86 83       	std	Z+6, r24	; 0x06
     406:	30 c0       	rjmp	.+96     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
					case 3:	if (expt > 0)										//E10, E11, E12......etc
     408:	14 16       	cp	r1, r20
     40a:	3c f5       	brge	.+78     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
					{array[7] = (expt%10) + '0'; 
     40c:	2a e0       	ldi	r18, 0x0A	; 10
     40e:	84 2f       	mov	r24, r20
     410:	62 2f       	mov	r22, r18
     412:	68 da       	rcall	.-2864   	; 0xfffff8e4 <__eeprom_end+0xff7ef8e4>
     414:	90 5d       	subi	r25, 0xD0	; 208
     416:	97 83       	std	Z+7, r25	; 0x07
					array[6] = ((expt/10)%10) + '0';array[5] = 'E';}
     418:	62 2f       	mov	r22, r18
     41a:	64 da       	rcall	.-2872   	; 0xfffff8e4 <__eeprom_end+0xff7ef8e4>
     41c:	90 5d       	subi	r25, 0xD0	; 208
     41e:	96 83       	std	Z+6, r25	; 0x06
     420:	21 c0       	rjmp	.+66     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
					if (expt < 0)												//E-1 to E-9
					{array[7] = expt*(-1) + '0';
					array[6] = '-';array[5] = 'E';}
					break;
					case 4:	array[7] = ((expt*(-1))%10) + '0';					//E-10, E-11, E-12....etc
     422:	c4 2f       	mov	r28, r20
     424:	04 2e       	mov	r0, r20
     426:	00 0c       	add	r0, r0
     428:	dd 0b       	sbc	r29, r29
     42a:	88 27       	eor	r24, r24
     42c:	99 27       	eor	r25, r25
     42e:	8c 1b       	sub	r24, r28
     430:	9d 0b       	sbc	r25, r29
     432:	2a e0       	ldi	r18, 0x0A	; 10
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	b9 01       	movw	r22, r18
     438:	62 da       	rcall	.-2876   	; 0xfffff8fe <__eeprom_end+0xff7ef8fe>
     43a:	80 5d       	subi	r24, 0xD0	; 208
     43c:	87 83       	std	Z+7, r24	; 0x07
					array[6] = (((expt*(-1))/10)%10) + '0';
     43e:	ce 01       	movw	r24, r28
     440:	66 ef       	ldi	r22, 0xF6	; 246
     442:	7f ef       	ldi	r23, 0xFF	; 255
     444:	5c da       	rcall	.-2888   	; 0xfffff8fe <__eeprom_end+0xff7ef8fe>
     446:	cb 01       	movw	r24, r22
     448:	b9 01       	movw	r22, r18
     44a:	59 da       	rcall	.-2894   	; 0xfffff8fe <__eeprom_end+0xff7ef8fe>
     44c:	80 5d       	subi	r24, 0xD0	; 208
     44e:	86 83       	std	Z+6, r24	; 0x06
					array[5] = '-';array[4] = 'E';
     450:	8d e2       	ldi	r24, 0x2D	; 45
     452:	85 83       	std	Z+5, r24	; 0x05
     454:	85 e4       	ldi	r24, 0x45	; 69
     456:	84 83       	std	Z+4, r24	; 0x04
					break;
     458:	07 c0       	rjmp	.+14     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
					case 2:	array[7] = expt + '0';array[6] = 'E';break;			//E1 to E9
					case 3:	if (expt > 0)										//E10, E11, E12......etc
					{array[7] = (expt%10) + '0'; 
					array[6] = ((expt/10)%10) + '0';array[5] = 'E';}
					if (expt < 0)												//E-1 to E-9
					{array[7] = expt*(-1) + '0';
     45a:	80 e3       	ldi	r24, 0x30	; 48
     45c:	84 1b       	sub	r24, r20
     45e:	87 83       	std	Z+7, r24	; 0x07
					array[6] = '-';array[5] = 'E';}
     460:	8d e2       	ldi	r24, 0x2D	; 45
     462:	86 83       	std	Z+6, r24	; 0x06
     464:	85 e4       	ldi	r24, 0x45	; 69
     466:	85 83       	std	Z+5, r24	; 0x05
					array[6] = (((expt*(-1))/10)%10) + '0';
					array[5] = '-';array[4] = 'E';
					break;
					}}
			
		Display_mode = 1;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Display_mode>
		
		return expt;}
     46e:	84 2f       	mov	r24, r20
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	ff 90       	pop	r15
     47a:	ef 90       	pop	r14
     47c:	08 95       	ret

0000047e <reverse>:


/***************************************************************************************************************************************/
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
     47e:	9b 01       	movw	r18, r22
     480:	21 50       	subi	r18, 0x01	; 1
     482:	31 09       	sbc	r19, r1
     484:	fc 01       	movw	r30, r24
     486:	e6 0f       	add	r30, r22
     488:	f7 1f       	adc	r31, r23
	while (i<j)
     48a:	dc 01       	movw	r26, r24
     48c:	ad 01       	movw	r20, r26
     48e:	48 1b       	sub	r20, r24
     490:	59 0b       	sbc	r21, r25
     492:	42 17       	cp	r20, r18
     494:	53 07       	cpc	r21, r19
     496:	3c f4       	brge	.+14     	; 0x4a6 <reverse+0x28>
	{   temp = str[i];
     498:	4c 91       	ld	r20, X
		str[i] = str[j];
     49a:	52 91       	ld	r21, -Z
     49c:	5d 93       	st	X+, r21
		str[j] = temp;
     49e:	40 83       	st	Z, r20
	i++; j--; }}
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	31 09       	sbc	r19, r1
     4a4:	f3 cf       	rjmp	.-26     	; 0x48c <reverse+0xe>
     4a6:	08 95       	ret

000004a8 <longToStr>:



/***************************************************************************************************************************************/
long longToStr(long x, char str[], int d)
{
     4a8:	8f 92       	push	r8
     4aa:	9f 92       	push	r9
     4ac:	af 92       	push	r10
     4ae:	bf 92       	push	r11
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	8a 01       	movw	r16, r20
     4c2:	69 01       	movw	r12, r18
	int i = 0;
	while (x)
     4c4:	7a 01       	movw	r14, r20
	{   str[i++] = (x%10) + '0';
     4c6:	2a e0       	ldi	r18, 0x0A	; 10
     4c8:	82 2e       	mov	r8, r18
     4ca:	91 2c       	mov	r9, r1
     4cc:	a1 2c       	mov	r10, r1
     4ce:	b1 2c       	mov	r11, r1
     4d0:	e7 01       	movw	r28, r14
     4d2:	c0 1b       	sub	r28, r16
     4d4:	d1 0b       	sbc	r29, r17

/***************************************************************************************************************************************/
long longToStr(long x, char str[], int d)
{
	int i = 0;
	while (x)
     4d6:	61 15       	cp	r22, r1
     4d8:	71 05       	cpc	r23, r1
     4da:	81 05       	cpc	r24, r1
     4dc:	91 05       	cpc	r25, r1
     4de:	51 f0       	breq	.+20     	; 0x4f4 <longToStr+0x4c>
	{   str[i++] = (x%10) + '0';
     4e0:	a5 01       	movw	r20, r10
     4e2:	94 01       	movw	r18, r8
     4e4:	1f da       	rcall	.-3010   	; 0xfffff924 <__eeprom_end+0xff7ef924>
     4e6:	60 5d       	subi	r22, 0xD0	; 208
     4e8:	f7 01       	movw	r30, r14
     4ea:	61 93       	st	Z+, r22
     4ec:	7f 01       	movw	r14, r30
	x = x/10; }
     4ee:	b9 01       	movw	r22, r18
     4f0:	ca 01       	movw	r24, r20
     4f2:	ee cf       	rjmp	.-36     	; 0x4d0 <longToStr+0x28>
     4f4:	f8 01       	movw	r30, r16
     4f6:	ec 0f       	add	r30, r28
     4f8:	fd 1f       	adc	r31, r29
	
	while (i < d)
	str[i++] = '0';
     4fa:	80 e3       	ldi	r24, 0x30	; 48
	int i = 0;
	while (x)
	{   str[i++] = (x%10) + '0';
	x = x/10; }
	
	while (i < d)
     4fc:	cc 15       	cp	r28, r12
     4fe:	dd 05       	cpc	r29, r13
     500:	1c f4       	brge	.+6      	; 0x508 <longToStr+0x60>
	str[i++] = '0';
     502:	21 96       	adiw	r28, 0x01	; 1
     504:	81 93       	st	Z+, r24
     506:	fa cf       	rjmp	.-12     	; 0x4fc <longToStr+0x54>
	reverse(str, i);
     508:	be 01       	movw	r22, r28
     50a:	c8 01       	movw	r24, r16
     50c:	b8 df       	rcall	.-144    	; 0x47e <reverse>
	str[i] = '\0';
     50e:	f8 01       	movw	r30, r16
     510:	ec 0f       	add	r30, r28
     512:	fd 1f       	adc	r31, r29
     514:	10 82       	st	Z, r1
return i; }
     516:	be 01       	movw	r22, r28
     518:	dd 0f       	add	r29, r29
     51a:	88 0b       	sbc	r24, r24
     51c:	99 0b       	sbc	r25, r25
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	df 90       	pop	r13
     52c:	cf 90       	pop	r12
     52e:	bf 90       	pop	r11
     530:	af 90       	pop	r10
     532:	9f 90       	pop	r9
     534:	8f 90       	pop	r8
     536:	08 95       	ret

00000538 <ftoaL>:




/***************************************************************************************************************************************/
void ftoaL(float Fnum, char FP_string[]){
     538:	2f 92       	push	r2
     53a:	3f 92       	push	r3
     53c:	4f 92       	push	r4
     53e:	5f 92       	push	r5
     540:	6f 92       	push	r6
     542:	7f 92       	push	r7
     544:	8f 92       	push	r8
     546:	9f 92       	push	r9
     548:	af 92       	push	r10
     54a:	bf 92       	push	r11
     54c:	cf 92       	push	r12
     54e:	df 92       	push	r13
     550:	ef 92       	push	r14
     552:	ff 92       	push	r15
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	6b 01       	movw	r12, r22
     55e:	7c 01       	movw	r14, r24
     560:	8a 01       	movw	r16, r20
	int afterpoint = 0;
	long ipart, Fnum_int;
	char sign = '+';
	signed char expt;
	
	if (Fnum < 0){sign = '-'; Fnum *= (-1);}									//Convert negative numbers to positive ones and set the sign character
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	a9 01       	movw	r20, r18
     568:	64 d6       	rcall	.+3272   	; 0x1232 <__cmpsf2>
     56a:	87 ff       	sbrs	r24, 7
     56c:	07 c0       	rjmp	.+14     	; 0x57c <ftoaL+0x44>
     56e:	f7 fa       	bst	r15, 7
     570:	f0 94       	com	r15
     572:	f7 f8       	bld	r15, 7
     574:	f0 94       	com	r15
     576:	9d e2       	ldi	r25, 0x2D	; 45
     578:	29 2e       	mov	r2, r25
     57a:	02 c0       	rjmp	.+4      	; 0x580 <ftoaL+0x48>

/***************************************************************************************************************************************/
void ftoaL(float Fnum, char FP_string[]){
	int afterpoint = 0;
	long ipart, Fnum_int;
	char sign = '+';
     57c:	8b e2       	ldi	r24, 0x2B	; 43
     57e:	28 2e       	mov	r2, r24
     580:	f8 01       	movw	r30, r16
     582:	c8 01       	movw	r24, r16
     584:	40 96       	adiw	r24, 0x10	; 16
	signed char expt;
	
	if (Fnum < 0){sign = '-'; Fnum *= (-1);}									//Convert negative numbers to positive ones and set the sign character
	
	for(int m = 0; m <= 15; m++) FP_string[m] = 0;								//Clear the floating point array
     586:	11 92       	st	Z+, r1
     588:	e8 17       	cp	r30, r24
     58a:	f9 07       	cpc	r31, r25
     58c:	e1 f7       	brne	.-8      	; 0x586 <ftoaL+0x4e>
	
	Fnum_int = (long)Fnum;														//Obtain integer part of the number
     58e:	c7 01       	movw	r24, r14
     590:	b6 01       	movw	r22, r12
     592:	bb d6       	rcall	.+3446   	; 0x130a <__fixsfsi>
	
	if (Fnum_int < 10)afterpoint = 5;											//Number of decimal places is matched to display length
     594:	6a 30       	cpi	r22, 0x0A	; 10
     596:	71 05       	cpc	r23, r1
     598:	81 05       	cpc	r24, r1
     59a:	91 05       	cpc	r25, r1
     59c:	1c f4       	brge	.+6      	; 0x5a4 <ftoaL+0x6c>
     59e:	c5 e0       	ldi	r28, 0x05	; 5
     5a0:	d0 e0       	ldi	r29, 0x00	; 0
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <ftoaL+0x70>



/***************************************************************************************************************************************/
void ftoaL(float Fnum, char FP_string[]){
	int afterpoint = 0;
     5a4:	c0 e0       	ldi	r28, 0x00	; 0
     5a6:	d0 e0       	ldi	r29, 0x00	; 0
	for(int m = 0; m <= 15; m++) FP_string[m] = 0;								//Clear the floating point array
	
	Fnum_int = (long)Fnum;														//Obtain integer part of the number
	
	if (Fnum_int < 10)afterpoint = 5;											//Number of decimal places is matched to display length
	if ((Fnum_int >= 10) && (Fnum_int < 100))afterpoint = 4;
     5a8:	4b 01       	movw	r8, r22
     5aa:	5c 01       	movw	r10, r24
     5ac:	2a e0       	ldi	r18, 0x0A	; 10
     5ae:	82 1a       	sub	r8, r18
     5b0:	91 08       	sbc	r9, r1
     5b2:	a1 08       	sbc	r10, r1
     5b4:	b1 08       	sbc	r11, r1
     5b6:	2a e5       	ldi	r18, 0x5A	; 90
     5b8:	82 16       	cp	r8, r18
     5ba:	91 04       	cpc	r9, r1
     5bc:	a1 04       	cpc	r10, r1
     5be:	b1 04       	cpc	r11, r1
     5c0:	10 f4       	brcc	.+4      	; 0x5c6 <ftoaL+0x8e>
     5c2:	c4 e0       	ldi	r28, 0x04	; 4
     5c4:	d0 e0       	ldi	r29, 0x00	; 0
	if ((Fnum_int >= 100) && (Fnum_int < 1000))afterpoint = 3;
     5c6:	4b 01       	movw	r8, r22
     5c8:	5c 01       	movw	r10, r24
     5ca:	24 e6       	ldi	r18, 0x64	; 100
     5cc:	82 1a       	sub	r8, r18
     5ce:	91 08       	sbc	r9, r1
     5d0:	a1 08       	sbc	r10, r1
     5d2:	b1 08       	sbc	r11, r1
     5d4:	24 e8       	ldi	r18, 0x84	; 132
     5d6:	82 16       	cp	r8, r18
     5d8:	23 e0       	ldi	r18, 0x03	; 3
     5da:	92 06       	cpc	r9, r18
     5dc:	a1 04       	cpc	r10, r1
     5de:	b1 04       	cpc	r11, r1
     5e0:	10 f4       	brcc	.+4      	; 0x5e6 <ftoaL+0xae>
     5e2:	c3 e0       	ldi	r28, 0x03	; 3
     5e4:	d0 e0       	ldi	r29, 0x00	; 0
	if ((Fnum_int >= 1000) && (Fnum_int < 10000))afterpoint = 2;
     5e6:	dc 01       	movw	r26, r24
     5e8:	cb 01       	movw	r24, r22
     5ea:	88 5e       	subi	r24, 0xE8	; 232
     5ec:	93 40       	sbci	r25, 0x03	; 3
     5ee:	a1 09       	sbc	r26, r1
     5f0:	b1 09       	sbc	r27, r1
     5f2:	88 32       	cpi	r24, 0x28	; 40
     5f4:	93 42       	sbci	r25, 0x23	; 35
     5f6:	a1 05       	cpc	r26, r1
     5f8:	b1 05       	cpc	r27, r1
     5fa:	10 f4       	brcc	.+4      	; 0x600 <ftoaL+0xc8>
     5fc:	c2 e0       	ldi	r28, 0x02	; 2
     5fe:	d0 e0       	ldi	r29, 0x00	; 0
	
	expt = 0;																	//Convert very large and small numbers to scientific form
	if (Fnum  >= 10000) {while (Fnum >= 10)
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e4       	ldi	r19, 0x40	; 64
     604:	4c e1       	ldi	r20, 0x1C	; 28
     606:	56 e4       	ldi	r21, 0x46	; 70
     608:	c7 01       	movw	r24, r14
     60a:	b6 01       	movw	r22, r12
     60c:	61 d7       	rcall	.+3778   	; 0x14d0 <__gesf2>
     60e:	87 fd       	sbrc	r24, 7
     610:	15 c0       	rjmp	.+42     	; 0x63c <ftoaL+0x104>
     612:	31 2c       	mov	r3, r1
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	40 e2       	ldi	r20, 0x20	; 32
     61a:	51 e4       	ldi	r21, 0x41	; 65
     61c:	c7 01       	movw	r24, r14
     61e:	b6 01       	movw	r22, r12
     620:	57 d7       	rcall	.+3758   	; 0x14d0 <__gesf2>
     622:	87 fd       	sbrc	r24, 7
     624:	16 c0       	rjmp	.+44     	; 0x652 <ftoaL+0x11a>
	{Fnum /= 10; expt += 1;}afterpoint = 5;}
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	40 e2       	ldi	r20, 0x20	; 32
     62c:	51 e4       	ldi	r21, 0x41	; 65
     62e:	c7 01       	movw	r24, r14
     630:	b6 01       	movw	r22, r12
     632:	03 d6       	rcall	.+3078   	; 0x123a <__divsf3>
     634:	6b 01       	movw	r12, r22
     636:	7c 01       	movw	r14, r24
     638:	33 94       	inc	r3
     63a:	ec cf       	rjmp	.-40     	; 0x614 <ftoaL+0xdc>
	
	if(Fnum < 0.01) {while (Fnum < 1){Fnum *= 10; expt -= 1;}}
     63c:	2a e0       	ldi	r18, 0x0A	; 10
     63e:	37 ed       	ldi	r19, 0xD7	; 215
     640:	43 e2       	ldi	r20, 0x23	; 35
     642:	5c e3       	ldi	r21, 0x3C	; 60
     644:	c7 01       	movw	r24, r14
     646:	b6 01       	movw	r22, r12
     648:	f4 d5       	rcall	.+3048   	; 0x1232 <__cmpsf2>
	if (Fnum_int < 10)afterpoint = 5;											//Number of decimal places is matched to display length
	if ((Fnum_int >= 10) && (Fnum_int < 100))afterpoint = 4;
	if ((Fnum_int >= 100) && (Fnum_int < 1000))afterpoint = 3;
	if ((Fnum_int >= 1000) && (Fnum_int < 10000))afterpoint = 2;
	
	expt = 0;																	//Convert very large and small numbers to scientific form
     64a:	31 2c       	mov	r3, r1
	if (Fnum  >= 10000) {while (Fnum >= 10)
	{Fnum /= 10; expt += 1;}afterpoint = 5;}
	
	if(Fnum < 0.01) {while (Fnum < 1){Fnum *= 10; expt -= 1;}}
     64c:	87 ff       	sbrs	r24, 7
     64e:	20 c0       	rjmp	.+64     	; 0x690 <ftoaL+0x158>
     650:	0b c0       	rjmp	.+22     	; 0x668 <ftoaL+0x130>
     652:	2a e0       	ldi	r18, 0x0A	; 10
     654:	37 ed       	ldi	r19, 0xD7	; 215
     656:	43 e2       	ldi	r20, 0x23	; 35
     658:	5c e3       	ldi	r21, 0x3C	; 60
     65a:	c7 01       	movw	r24, r14
     65c:	b6 01       	movw	r22, r12
     65e:	e9 d5       	rcall	.+3026   	; 0x1232 <__cmpsf2>
     660:	87 ff       	sbrs	r24, 7
     662:	61 c0       	rjmp	.+194    	; 0x726 <ftoaL+0x1ee>
	if ((Fnum_int >= 100) && (Fnum_int < 1000))afterpoint = 3;
	if ((Fnum_int >= 1000) && (Fnum_int < 10000))afterpoint = 2;
	
	expt = 0;																	//Convert very large and small numbers to scientific form
	if (Fnum  >= 10000) {while (Fnum >= 10)
	{Fnum /= 10; expt += 1;}afterpoint = 5;}
     664:	c5 e0       	ldi	r28, 0x05	; 5
     666:	d0 e0       	ldi	r29, 0x00	; 0
	
	if(Fnum < 0.01) {while (Fnum < 1){Fnum *= 10; expt -= 1;}}
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	40 e8       	ldi	r20, 0x80	; 128
     66e:	5f e3       	ldi	r21, 0x3F	; 63
     670:	c7 01       	movw	r24, r14
     672:	b6 01       	movw	r22, r12
     674:	de d5       	rcall	.+3004   	; 0x1232 <__cmpsf2>
     676:	87 ff       	sbrs	r24, 7
     678:	0b c0       	rjmp	.+22     	; 0x690 <ftoaL+0x158>
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	40 e2       	ldi	r20, 0x20	; 32
     680:	51 e4       	ldi	r21, 0x41	; 65
     682:	c7 01       	movw	r24, r14
     684:	b6 01       	movw	r22, r12
     686:	28 d7       	rcall	.+3664   	; 0x14d8 <__mulsf3>
     688:	6b 01       	movw	r12, r22
     68a:	7c 01       	movw	r14, r24
     68c:	3a 94       	dec	r3
     68e:	ec cf       	rjmp	.-40     	; 0x668 <ftoaL+0x130>
	
																				//FP to askii routines taken from "https://www.geeksforgeeks.org/convert-floating-point-number-string/"
	ipart = (long)Fnum;															//Obtain integer part of FP number
     690:	c7 01       	movw	r24, r14
     692:	b6 01       	movw	r22, r12
     694:	3a d6       	rcall	.+3188   	; 0x130a <__fixsfsi>
     696:	2b 01       	movw	r4, r22
     698:	3c 01       	movw	r6, r24
	float fpart = Fnum - (float)ipart;											//Obtain floating part
	long i = longToStr(ipart, FP_string, 0);									//Convert integer part to string
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	a8 01       	movw	r20, r16
     6a0:	03 df       	rcall	.-506    	; 0x4a8 <longToStr>
     6a2:	4b 01       	movw	r8, r22
     6a4:	5c 01       	movw	r10, r24

	if (afterpoint != 0){														//Add Decimal part to the string
     6a6:	20 97       	sbiw	r28, 0x00	; 0
     6a8:	41 f1       	breq	.+80     	; 0x6fa <ftoaL+0x1c2>
	
	if(Fnum < 0.01) {while (Fnum < 1){Fnum *= 10; expt -= 1;}}
	
																				//FP to askii routines taken from "https://www.geeksforgeeks.org/convert-floating-point-number-string/"
	ipart = (long)Fnum;															//Obtain integer part of FP number
	float fpart = Fnum - (float)ipart;											//Obtain floating part
     6aa:	c3 01       	movw	r24, r6
     6ac:	b2 01       	movw	r22, r4
     6ae:	60 d6       	rcall	.+3264   	; 0x1370 <__floatsisf>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	c7 01       	movw	r24, r14
     6b6:	b6 01       	movw	r22, r12
     6b8:	57 d5       	rcall	.+2734   	; 0x1168 <__subsf3>
     6ba:	6b 01       	movw	r12, r22
     6bc:	7c 01       	movw	r14, r24
	long i = longToStr(ipart, FP_string, 0);									//Convert integer part to string

	if (afterpoint != 0){														//Add Decimal part to the string
		FP_string[i] = '.';
     6be:	f8 01       	movw	r30, r16
     6c0:	e8 0d       	add	r30, r8
     6c2:	f9 1d       	adc	r31, r9
     6c4:	8e e2       	ldi	r24, 0x2E	; 46
     6c6:	80 83       	st	Z, r24
		fpart = fpart * pow(10,afterpoint);
     6c8:	be 01       	movw	r22, r28
     6ca:	0d 2e       	mov	r0, r29
     6cc:	00 0c       	add	r0, r0
     6ce:	88 0b       	sbc	r24, r24
     6d0:	99 0b       	sbc	r25, r25
     6d2:	4e d6       	rcall	.+3228   	; 0x1370 <__floatsisf>
     6d4:	9b 01       	movw	r18, r22
     6d6:	ac 01       	movw	r20, r24
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	80 e2       	ldi	r24, 0x20	; 32
     6de:	91 e4       	ldi	r25, 0x41	; 65
     6e0:	66 d7       	rcall	.+3788   	; 0x15ae <pow>
	longToStr((long)fpart, FP_string + i + 1, afterpoint);}
     6e2:	2f ef       	ldi	r18, 0xFF	; 255
     6e4:	82 1a       	sub	r8, r18
     6e6:	92 0a       	sbc	r9, r18
     6e8:	80 0e       	add	r8, r16
     6ea:	91 1e       	adc	r9, r17
     6ec:	a7 01       	movw	r20, r14
     6ee:	96 01       	movw	r18, r12
     6f0:	f3 d6       	rcall	.+3558   	; 0x14d8 <__mulsf3>
     6f2:	0b d6       	rcall	.+3094   	; 0x130a <__fixsfsi>
     6f4:	9e 01       	movw	r18, r28
     6f6:	a4 01       	movw	r20, r8
     6f8:	d7 de       	rcall	.-594    	; 0x4a8 <longToStr>
	
	expt = Format_for_Display(FP_string, sign, expt);
     6fa:	43 2d       	mov	r20, r3
     6fc:	62 2d       	mov	r22, r2
     6fe:	c8 01       	movw	r24, r16
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	9f 90       	pop	r9
     716:	8f 90       	pop	r8
     718:	7f 90       	pop	r7
     71a:	6f 90       	pop	r6
     71c:	5f 90       	pop	r5
     71e:	4f 90       	pop	r4
     720:	3f 90       	pop	r3
     722:	2f 90       	pop	r2
	if (afterpoint != 0){														//Add Decimal part to the string
		FP_string[i] = '.';
		fpart = fpart * pow(10,afterpoint);
	longToStr((long)fpart, FP_string + i + 1, afterpoint);}
	
	expt = Format_for_Display(FP_string, sign, expt);
     724:	6f cd       	rjmp	.-1314   	; 0x204 <Format_for_Display>
	{Fnum /= 10; expt += 1;}afterpoint = 5;}
	
	if(Fnum < 0.01) {while (Fnum < 1){Fnum *= 10; expt -= 1;}}
	
																				//FP to askii routines taken from "https://www.geeksforgeeks.org/convert-floating-point-number-string/"
	ipart = (long)Fnum;															//Obtain integer part of FP number
     726:	c7 01       	movw	r24, r14
     728:	b6 01       	movw	r22, r12
     72a:	ef d5       	rcall	.+3038   	; 0x130a <__fixsfsi>
     72c:	4b 01       	movw	r8, r22
     72e:	5c 01       	movw	r10, r24
	float fpart = Fnum - (float)ipart;											//Obtain floating part
     730:	1f d6       	rcall	.+3134   	; 0x1370 <__floatsisf>
     732:	9b 01       	movw	r18, r22
     734:	ac 01       	movw	r20, r24
     736:	c7 01       	movw	r24, r14
     738:	b6 01       	movw	r22, r12
     73a:	16 d5       	rcall	.+2604   	; 0x1168 <__subsf3>
     73c:	6b 01       	movw	r12, r22
     73e:	7c 01       	movw	r14, r24
	long i = longToStr(ipart, FP_string, 0);									//Convert integer part to string
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	a8 01       	movw	r20, r16
     746:	c5 01       	movw	r24, r10
     748:	b4 01       	movw	r22, r8
     74a:	ae de       	rcall	.-676    	; 0x4a8 <longToStr>
     74c:	4b 01       	movw	r8, r22
     74e:	5c 01       	movw	r10, r24
	if ((Fnum_int >= 100) && (Fnum_int < 1000))afterpoint = 3;
	if ((Fnum_int >= 1000) && (Fnum_int < 10000))afterpoint = 2;
	
	expt = 0;																	//Convert very large and small numbers to scientific form
	if (Fnum  >= 10000) {while (Fnum >= 10)
	{Fnum /= 10; expt += 1;}afterpoint = 5;}
     750:	c5 e0       	ldi	r28, 0x05	; 5
     752:	d0 e0       	ldi	r29, 0x00	; 0
     754:	b4 cf       	rjmp	.-152    	; 0x6be <ftoaL+0x186>

00000756 <data_from_UNO>:
	
	


	/*************************************************************************************************************************************/
	void data_from_UNO(void){char counter = 32; 
     756:	4f 92       	push	r4
     758:	5f 92       	push	r5
     75a:	6f 92       	push	r6
     75c:	7f 92       	push	r7
     75e:	8f 92       	push	r8
     760:	9f 92       	push	r9
     762:	af 92       	push	r10
     764:	bf 92       	push	r11
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	28 97       	sbiw	r28, 0x08	; 8
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
     786:	10 e2       	ldi	r17, 0x20	; 32
	
	char temp[8];
	int display_counter;												//Used to convert integer number to string
	char sign = '+';													//Sign of integer number
		
	while (((!(send_save_address_plus_RW_bit(0x7)))) && counter)		//Address is 3 and W/R bit is 1 for UNO transmit. 
     788:	87 e0       	ldi	r24, 0x07	; 7
     78a:	ec dc       	rcall	.-1576   	; 0x164 <send_save_address_plus_RW_bit>
     78c:	81 11       	cpse	r24, r1
     78e:	05 c0       	rjmp	.+10     	; 0x79a <data_from_UNO+0x44>
     790:	11 23       	and	r17, r17
     792:	09 f4       	brne	.+2      	; 0x796 <data_from_UNO+0x40>
     794:	48 c1       	rjmp	.+656    	; 0xa26 <data_from_UNO+0x2d0>
	{ counter -= 1;}													//Master polls UNO 32 times and gives up if no response
     796:	11 50       	subi	r17, 0x01	; 1
     798:	f7 cf       	rjmp	.-18     	; 0x788 <data_from_UNO+0x32>
	
	if (counter){														//UNO responds
     79a:	11 23       	and	r17, r17
     79c:	09 f4       	brne	.+2      	; 0x7a0 <data_from_UNO+0x4a>
     79e:	43 c1       	rjmp	.+646    	; 0xa26 <data_from_UNO+0x2d0>
	transaction_type = read_data_from_slave(0);							//First data byte gives transaction type
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	19 dd       	rcall	.-1486   	; 0x1d6 <read_data_from_slave>
     7a4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <transaction_type>
	
	Display_mode = 0;
     7a8:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Display_mode>
		
	switch (transaction_type){
     7ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <transaction_type>
     7b0:	82 34       	cpi	r24, 0x42	; 66
     7b2:	e9 f0       	breq	.+58     	; 0x7ee <data_from_UNO+0x98>
     7b4:	50 f4       	brcc	.+20     	; 0x7ca <data_from_UNO+0x74>
     7b6:	81 34       	cpi	r24, 0x41	; 65
     7b8:	09 f0       	breq	.+2      	; 0x7bc <data_from_UNO+0x66>
     7ba:	4c c1       	rjmp	.+664    	; 0xa54 <data_from_UNO+0x2fe>
     7bc:	0c e7       	ldi	r16, 0x7C	; 124
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	e4 e7       	ldi	r30, 0x74	; 116
     7c2:	ee 2e       	mov	r14, r30
     7c4:	e0 e0       	ldi	r30, 0x00	; 0
     7c6:	fe 2e       	mov	r15, r30
     7c8:	09 c0       	rjmp	.+18     	; 0x7dc <data_from_UNO+0x86>
     7ca:	83 34       	cpi	r24, 0x43	; 67
     7cc:	09 f4       	brne	.+2      	; 0x7d0 <data_from_UNO+0x7a>
     7ce:	b3 c0       	rjmp	.+358    	; 0x936 <data_from_UNO+0x1e0>
     7d0:	84 34       	cpi	r24, 0x44	; 68
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <data_from_UNO+0x80>
     7d4:	3f c1       	rjmp	.+638    	; 0xa54 <data_from_UNO+0x2fe>
     7d6:	e1 e8       	ldi	r30, 0x81	; 129
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	bd c0       	rjmp	.+378    	; 0x956 <data_from_UNO+0x200>
	case 'A':															//UNO sends a integer string terminated in carriage return
	for(int m = 0; m <= 7; m++)	{
	display_buf[7-m] = read_data_from_slave(0);}						//Receive string members one at a time	
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	fb dc       	rcall	.-1546   	; 0x1d6 <read_data_from_slave>
     7e0:	d8 01       	movw	r26, r16
     7e2:	8e 93       	st	-X, r24
     7e4:	8d 01       	movw	r16, r26
	
	Display_mode = 0;
		
	switch (transaction_type){
	case 'A':															//UNO sends a integer string terminated in carriage return
	for(int m = 0; m <= 7; m++)	{
     7e6:	ea 16       	cp	r14, r26
     7e8:	fb 06       	cpc	r15, r27
     7ea:	c1 f7       	brne	.-16     	; 0x7dc <data_from_UNO+0x86>
     7ec:	af c0       	rjmp	.+350    	; 0x94c <data_from_UNO+0x1f6>
	cr_keypress = read_data_from_slave(1);								//One for a carriage return, otherwise zero 
	break;
	
	
	case 'B':															//UO sends a binary integer as four bytes
	I_number = read_data_from_slave(0);									//Assemble the I_number
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	f2 dc       	rcall	.-1564   	; 0x1d6 <read_data_from_slave>
     7f2:	c8 2e       	mov	r12, r24
     7f4:	d1 2c       	mov	r13, r1
     7f6:	e1 2c       	mov	r14, r1
     7f8:	f1 2c       	mov	r15, r1
     7fa:	c0 92 70 00 	sts	0x0070, r12	; 0x800070 <I_number>
     7fe:	d0 92 71 00 	sts	0x0071, r13	; 0x800071 <I_number+0x1>
     802:	e0 92 72 00 	sts	0x0072, r14	; 0x800072 <I_number+0x2>
     806:	f0 92 73 00 	sts	0x0073, r15	; 0x800073 <I_number+0x3>
	I_number = (I_number << 8) + read_data_from_slave(0);
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	e4 dc       	rcall	.-1592   	; 0x1d6 <read_data_from_slave>
     80e:	fe 2c       	mov	r15, r14
     810:	ed 2c       	mov	r14, r13
     812:	dc 2c       	mov	r13, r12
     814:	cc 24       	eor	r12, r12
     816:	c8 0e       	add	r12, r24
     818:	d1 1c       	adc	r13, r1
     81a:	e1 1c       	adc	r14, r1
     81c:	f1 1c       	adc	r15, r1
     81e:	c0 92 70 00 	sts	0x0070, r12	; 0x800070 <I_number>
     822:	d0 92 71 00 	sts	0x0071, r13	; 0x800071 <I_number+0x1>
     826:	e0 92 72 00 	sts	0x0072, r14	; 0x800072 <I_number+0x2>
     82a:	f0 92 73 00 	sts	0x0073, r15	; 0x800073 <I_number+0x3>
	I_number = (I_number << 8) + read_data_from_slave(0);
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	d2 dc       	rcall	.-1628   	; 0x1d6 <read_data_from_slave>
     832:	fe 2c       	mov	r15, r14
     834:	ed 2c       	mov	r14, r13
     836:	dc 2c       	mov	r13, r12
     838:	cc 24       	eor	r12, r12
     83a:	c8 0e       	add	r12, r24
     83c:	d1 1c       	adc	r13, r1
     83e:	e1 1c       	adc	r14, r1
     840:	f1 1c       	adc	r15, r1
     842:	c0 92 70 00 	sts	0x0070, r12	; 0x800070 <I_number>
     846:	d0 92 71 00 	sts	0x0071, r13	; 0x800071 <I_number+0x1>
     84a:	e0 92 72 00 	sts	0x0072, r14	; 0x800072 <I_number+0x2>
     84e:	f0 92 73 00 	sts	0x0073, r15	; 0x800073 <I_number+0x3>
	I_number = (I_number << 8) + read_data_from_slave(1);
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	c0 dc       	rcall	.-1664   	; 0x1d6 <read_data_from_slave>
     856:	fe 2c       	mov	r15, r14
     858:	ed 2c       	mov	r14, r13
     85a:	dc 2c       	mov	r13, r12
     85c:	cc 24       	eor	r12, r12
     85e:	a7 01       	movw	r20, r14
     860:	96 01       	movw	r18, r12
     862:	28 0f       	add	r18, r24
     864:	31 1d       	adc	r19, r1
     866:	41 1d       	adc	r20, r1
     868:	51 1d       	adc	r21, r1
     86a:	da 01       	movw	r26, r20
     86c:	c9 01       	movw	r24, r18
	
	display_counter = 0;												//Format integer for display
	if(I_number < 0 ){sign = '-'; I_number *= (-1);}
     86e:	57 fd       	sbrc	r21, 7
     870:	0b c0       	rjmp	.+22     	; 0x888 <data_from_UNO+0x132>
	
	case 'B':															//UO sends a binary integer as four bytes
	I_number = read_data_from_slave(0);									//Assemble the I_number
	I_number = (I_number << 8) + read_data_from_slave(0);
	I_number = (I_number << 8) + read_data_from_slave(0);
	I_number = (I_number << 8) + read_data_from_slave(1);
     872:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <I_number>
     876:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <I_number+0x1>
     87a:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <I_number+0x2>
     87e:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <I_number+0x3>
	/*************************************************************************************************************************************/
	void data_from_UNO(void){char counter = 32; 
	
	char temp[8];
	int display_counter;												//Used to convert integer number to string
	char sign = '+';													//Sign of integer number
     882:	4b e2       	ldi	r20, 0x2B	; 43
     884:	d4 2e       	mov	r13, r20
     886:	11 c0       	rjmp	.+34     	; 0x8aa <data_from_UNO+0x154>
	I_number = (I_number << 8) + read_data_from_slave(0);
	I_number = (I_number << 8) + read_data_from_slave(0);
	I_number = (I_number << 8) + read_data_from_slave(1);
	
	display_counter = 0;												//Format integer for display
	if(I_number < 0 ){sign = '-'; I_number *= (-1);}
     888:	b0 95       	com	r27
     88a:	a0 95       	com	r26
     88c:	90 95       	com	r25
     88e:	81 95       	neg	r24
     890:	9f 4f       	sbci	r25, 0xFF	; 255
     892:	af 4f       	sbci	r26, 0xFF	; 255
     894:	bf 4f       	sbci	r27, 0xFF	; 255
     896:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <I_number>
     89a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <I_number+0x1>
     89e:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <I_number+0x2>
     8a2:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <I_number+0x3>
     8a6:	3d e2       	ldi	r19, 0x2D	; 45
     8a8:	d3 2e       	mov	r13, r19
     8aa:	8e 01       	movw	r16, r28
     8ac:	0f 5f       	subi	r16, 0xFF	; 255
     8ae:	1f 4f       	sbci	r17, 0xFF	; 255
     8b0:	7e 01       	movw	r14, r28
     8b2:	39 e0       	ldi	r19, 0x09	; 9
     8b4:	e3 0e       	add	r14, r19
     8b6:	f1 1c       	adc	r15, r1
     8b8:	f8 01       	movw	r30, r16
	for(int m = 0; m<=7; m++)temp[m] = 0;
     8ba:	11 92       	st	Z+, r1
     8bc:	ee 15       	cp	r30, r14
     8be:	ff 05       	cpc	r31, r15
     8c0:	e1 f7       	brne	.-8      	; 0x8ba <data_from_UNO+0x164>
     8c2:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <I_number>
     8c6:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <I_number+0x1>
     8ca:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <I_number+0x2>
     8ce:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <I_number+0x3>
     8d2:	47 01       	movw	r8, r14
     8d4:	a1 2c       	mov	r10, r1
     8d6:	b1 2c       	mov	r11, r1
	do {temp[7 - display_counter] = (I_number % 10) + '0' ;
     8d8:	2a e0       	ldi	r18, 0x0A	; 10
     8da:	42 2e       	mov	r4, r18
     8dc:	51 2c       	mov	r5, r1
     8de:	61 2c       	mov	r6, r1
     8e0:	71 2c       	mov	r7, r1
     8e2:	a3 01       	movw	r20, r6
     8e4:	92 01       	movw	r18, r4
     8e6:	1e d8       	rcall	.-4036   	; 0xfffff924 <__eeprom_end+0xff7ef924>
     8e8:	60 5d       	subi	r22, 0xD0	; 208
     8ea:	d4 01       	movw	r26, r8
     8ec:	6e 93       	st	-X, r22
     8ee:	4d 01       	movw	r8, r26
	display_counter++;} while ((I_number = I_number/10) > 0);
     8f0:	bf ef       	ldi	r27, 0xFF	; 255
     8f2:	ab 1a       	sub	r10, r27
     8f4:	bb 0a       	sbc	r11, r27
     8f6:	b9 01       	movw	r22, r18
     8f8:	ca 01       	movw	r24, r20
     8fa:	16 16       	cp	r1, r22
     8fc:	17 06       	cpc	r1, r23
     8fe:	18 06       	cpc	r1, r24
     900:	19 06       	cpc	r1, r25
     902:	7c f3       	brlt	.-34     	; 0x8e2 <data_from_UNO+0x18c>
     904:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <I_number>
     908:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <I_number+0x1>
     90c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <I_number+0x2>
     910:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <I_number+0x3>
	if (sign == '-'){temp[7 - display_counter] = '-';}
     914:	ed e2       	ldi	r30, 0x2D	; 45
     916:	de 12       	cpse	r13, r30
     918:	04 c0       	rjmp	.+8      	; 0x922 <data_from_UNO+0x1cc>
     91a:	f8 01       	movw	r30, r16
     91c:	ea 19       	sub	r30, r10
     91e:	fb 09       	sbc	r31, r11
     920:	d7 82       	std	Z+7, r13	; 0x07
     922:	e4 e7       	ldi	r30, 0x74	; 116
     924:	f0 e0       	ldi	r31, 0x00	; 0
	for(int m = 0; m <= 7; m++)	display_buf[m]  = temp[m];
     926:	d8 01       	movw	r26, r16
     928:	8d 91       	ld	r24, X+
     92a:	8d 01       	movw	r16, r26
     92c:	81 93       	st	Z+, r24
     92e:	ae 15       	cp	r26, r14
     930:	bf 05       	cpc	r27, r15
     932:	c9 f7       	brne	.-14     	; 0x926 <data_from_UNO+0x1d0>
     934:	8f c0       	rjmp	.+286    	; 0xa54 <data_from_UNO+0x2fe>
     936:	0c e7       	ldi	r16, 0x7C	; 124
     938:	10 e0       	ldi	r17, 0x00	; 0
	break;
	
	case 'C':															//UNO sends a float string terminated in carriage return
	for(int m = 0; m <= 7; m++)	{
	display_buf[7-m] = read_data_from_slave(0);	}						//Receive string members one at a time
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	4c dc       	rcall	.-1896   	; 0x1d6 <read_data_from_slave>
     93e:	f8 01       	movw	r30, r16
     940:	82 93       	st	-Z, r24
     942:	8f 01       	movw	r16, r30
	if (sign == '-'){temp[7 - display_counter] = '-';}
	for(int m = 0; m <= 7; m++)	display_buf[m]  = temp[m];
	break;
	
	case 'C':															//UNO sends a float string terminated in carriage return
	for(int m = 0; m <= 7; m++)	{
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	04 37       	cpi	r16, 0x74	; 116
     948:	1f 07       	cpc	r17, r31
     94a:	b9 f7       	brne	.-18     	; 0x93a <data_from_UNO+0x1e4>
	display_buf[7-m] = read_data_from_slave(0);	}						//Receive string members one at a time
	cr_keypress = read_data_from_slave(1);								//One for a carriage return, otherwise zero
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	43 dc       	rcall	.-1914   	; 0x1d6 <read_data_from_slave>
     950:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
     954:	7f c0       	rjmp	.+254    	; 0xa54 <data_from_UNO+0x2fe>
	break;
	
	case 'D':															//UNO sends a binary number as four bytes
	for (int m = 0; m <= 9; m++)flt_array[m] = 0;
     956:	11 92       	st	Z+, r1
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	eb 38       	cpi	r30, 0x8B	; 139
     95c:	f2 07       	cpc	r31, r18
     95e:	d9 f7       	brne	.-10     	; 0x956 <data_from_UNO+0x200>
	char_ptr = (char*)&flt_num;											//Save the bytes to a floating point location
     960:	05 e6       	ldi	r16, 0x65	; 101
     962:	10 e0       	ldi	r17, 0x00	; 0
     964:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <char_ptr+0x1>
     968:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <char_ptr>
	*char_ptr = read_data_from_slave(0);char_ptr += 1;
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	33 dc       	rcall	.-1946   	; 0x1d6 <read_data_from_slave>
     970:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <flt_num>
     974:	e0 90 6e 00 	lds	r14, 0x006E	; 0x80006e <char_ptr>
     978:	f0 90 6f 00 	lds	r15, 0x006F	; 0x80006f <char_ptr+0x1>
     97c:	c7 01       	movw	r24, r14
     97e:	01 96       	adiw	r24, 0x01	; 1
     980:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <char_ptr+0x1>
     984:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <char_ptr>
	*char_ptr = read_data_from_slave(0);char_ptr += 1;
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	25 dc       	rcall	.-1974   	; 0x1d6 <read_data_from_slave>
     98c:	d7 01       	movw	r26, r14
     98e:	11 96       	adiw	r26, 0x01	; 1
     990:	8c 93       	st	X, r24
     992:	e0 90 6e 00 	lds	r14, 0x006E	; 0x80006e <char_ptr>
     996:	f0 90 6f 00 	lds	r15, 0x006F	; 0x80006f <char_ptr+0x1>
     99a:	c7 01       	movw	r24, r14
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <char_ptr+0x1>
     9a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <char_ptr>
	*char_ptr = read_data_from_slave(0);char_ptr += 1;
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	16 dc       	rcall	.-2004   	; 0x1d6 <read_data_from_slave>
     9aa:	f7 01       	movw	r30, r14
     9ac:	81 83       	std	Z+1, r24	; 0x01
     9ae:	e0 90 6e 00 	lds	r14, 0x006E	; 0x80006e <char_ptr>
     9b2:	f0 90 6f 00 	lds	r15, 0x006F	; 0x80006f <char_ptr+0x1>
     9b6:	c7 01       	movw	r24, r14
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <char_ptr+0x1>
     9be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <char_ptr>
	*char_ptr = read_data_from_slave(1);
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	08 dc       	rcall	.-2032   	; 0x1d6 <read_data_from_slave>
     9c6:	d7 01       	movw	r26, r14
     9c8:	11 96       	adiw	r26, 0x01	; 1
     9ca:	8c 93       	st	X, r24
	f_num_ptr = &flt_num;
     9cc:	10 93 96 00 	sts	0x0096, r17	; 0x800096 <f_num_ptr+0x1>
     9d0:	00 93 95 00 	sts	0x0095, r16	; 0x800095 <f_num_ptr>
	flt_num = *f_num_ptr;
     9d4:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <flt_num>
     9d8:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <flt_num+0x1>
     9dc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flt_num+0x2>
     9e0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <flt_num+0x3>
     9e4:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <flt_num>
     9e8:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <flt_num+0x1>
     9ec:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flt_num+0x2>
     9f0:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <flt_num+0x3>
	ftoaL(flt_num, flt_array);											//Convert the array to a floating point number
     9f4:	41 e8       	ldi	r20, 0x81	; 129
     9f6:	50 e0       	ldi	r21, 0x00	; 0
	break; }}
	
	else {	USI_TWI_Master_Stop();}										//Send stop in the absence of any response from the UNO.
	}
     9f8:	28 96       	adiw	r28, 0x08	; 8
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	bf 90       	pop	r11
     a16:	af 90       	pop	r10
     a18:	9f 90       	pop	r9
     a1a:	8f 90       	pop	r8
     a1c:	7f 90       	pop	r7
     a1e:	6f 90       	pop	r6
     a20:	5f 90       	pop	r5
     a22:	4f 90       	pop	r4
	*char_ptr = read_data_from_slave(0);char_ptr += 1;
	*char_ptr = read_data_from_slave(0);char_ptr += 1;
	*char_ptr = read_data_from_slave(1);
	f_num_ptr = &flt_num;
	flt_num = *f_num_ptr;
	ftoaL(flt_num, flt_array);											//Convert the array to a floating point number
     a24:	89 cd       	rjmp	.-1262   	; 0x538 <ftoaL>
	break; }}
	
	else {	USI_TWI_Master_Stop();}										//Send stop in the absence of any response from the UNO.
	}
     a26:	28 96       	adiw	r28, 0x08	; 8
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd bf       	out	0x3d, r28	; 61
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	bf 90       	pop	r11
     a44:	af 90       	pop	r10
     a46:	9f 90       	pop	r9
     a48:	8f 90       	pop	r8
     a4a:	7f 90       	pop	r7
     a4c:	6f 90       	pop	r6
     a4e:	5f 90       	pop	r5
     a50:	4f 90       	pop	r4
	f_num_ptr = &flt_num;
	flt_num = *f_num_ptr;
	ftoaL(flt_num, flt_array);											//Convert the array to a floating point number
	break; }}
	
	else {	USI_TWI_Master_Stop();}										//Send stop in the absence of any response from the UNO.
     a52:	a2 cb       	rjmp	.-2236   	; 0x198 <USI_TWI_Master_Stop>
	}
     a54:	28 96       	adiw	r28, 0x08	; 8
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	7f 90       	pop	r7
     a7a:	6f 90       	pop	r6
     a7c:	5f 90       	pop	r5
     a7e:	4f 90       	pop	r4
     a80:	08 95       	ret

00000a82 <__vector_6>:
wdt_enable(WDTO_60MS); while(1);}



/******************************************************************************************************/
ISR (TIMER0_OVF_vect){TCNT0H = 0xE0;								//Generates interrupt every 1mS.
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	2f 93       	push	r18
     a8e:	3f 93       	push	r19
     a90:	4f 93       	push	r20
     a92:	5f 93       	push	r21
     a94:	6f 93       	push	r22
     a96:	7f 93       	push	r23
     a98:	8f 93       	push	r24
     a9a:	9f 93       	push	r25
     a9c:	af 93       	push	r26
     a9e:	bf 93       	push	r27
     aa0:	ef 93       	push	r30
     aa2:	ff 93       	push	r31
     aa4:	80 ee       	ldi	r24, 0xE0	; 224
     aa6:	84 bb       	out	0x14, r24	; 20
	TCNT0L = 0x0;
     aa8:	12 be       	out	0x32, r1	; 50
			
		int_counter ++;												//Counts timer overflow interrupts
     aaa:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <int_counter>
     aae:	8f 5f       	subi	r24, 0xFF	; 255
     ab0:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <int_counter>
				
		if (int_counter == 20){	int_counter = 0; 					//update display every 20mS
     ab4:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <int_counter>
     ab8:	84 31       	cpi	r24, 0x14	; 20
     aba:	19 f5       	brne	.+70     	; 0xb02 <__vector_6+0x80>
     abc:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <int_counter>
		if(Display_mode == 1){
     ac0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Display_mode>
     ac4:	81 30       	cpi	r24, 0x01	; 1
     ac6:	29 f0       	breq	.+10     	; 0xad2 <__vector_6+0x50>
			display_buf[m] = flt_array[m];}
			
			else {for(int m = 0; m <= 7; m++)						//Copy the array to the display buffer
			display_buf[m] = Non_exp_array[m];}	}
				
		TCCR0B = 0; data_from_UNO(); TCCR0B = 1;}					//Get data from UNO every 20mS
     ac8:	13 be       	out	0x33, r1	; 51
     aca:	45 de       	rcall	.-886    	; 0x756 <data_from_UNO>
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	83 bf       	out	0x33, r24	; 51
     ad0:	18 c0       	rjmp	.+48     	; 0xb02 <__vector_6+0x80>
			
		int_counter ++;												//Counts timer overflow interrupts
				
		if (int_counter == 20){	int_counter = 0; 					//update display every 20mS
		if(Display_mode == 1){
			if(PINA &(1 << PA1)){for(int m = 0; m <= 7; m++)		//Copy the array to the display buffer
     ad2:	c9 9b       	sbis	0x19, 1	; 25
     ad4:	0b c0       	rjmp	.+22     	; 0xaec <__vector_6+0x6a>
     ad6:	e1 e8       	ldi	r30, 0x81	; 129
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	a4 e7       	ldi	r26, 0x74	; 116
     adc:	b0 e0       	ldi	r27, 0x00	; 0
			display_buf[m] = flt_array[m];}
     ade:	81 91       	ld	r24, Z+
     ae0:	8d 93       	st	X+, r24
			
		int_counter ++;												//Counts timer overflow interrupts
				
		if (int_counter == 20){	int_counter = 0; 					//update display every 20mS
		if(Display_mode == 1){
			if(PINA &(1 << PA1)){for(int m = 0; m <= 7; m++)		//Copy the array to the display buffer
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	e9 38       	cpi	r30, 0x89	; 137
     ae6:	f8 07       	cpc	r31, r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__vector_6+0x5c>
     aea:	ee cf       	rjmp	.-36     	; 0xac8 <__vector_6+0x46>
     aec:	e7 e9       	ldi	r30, 0x97	; 151
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	a4 e7       	ldi	r26, 0x74	; 116
     af2:	b0 e0       	ldi	r27, 0x00	; 0
			display_buf[m] = flt_array[m];}
			
			else {for(int m = 0; m <= 7; m++)						//Copy the array to the display buffer
			display_buf[m] = Non_exp_array[m];}	}
     af4:	81 91       	ld	r24, Z+
     af6:	8d 93       	st	X+, r24
		if (int_counter == 20){	int_counter = 0; 					//update display every 20mS
		if(Display_mode == 1){
			if(PINA &(1 << PA1)){for(int m = 0; m <= 7; m++)		//Copy the array to the display buffer
			display_buf[m] = flt_array[m];}
			
			else {for(int m = 0; m <= 7; m++)						//Copy the array to the display buffer
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	ef 39       	cpi	r30, 0x9F	; 159
     afc:	f8 07       	cpc	r31, r24
     afe:	d1 f7       	brne	.-12     	; 0xaf4 <__vector_6+0x72>
     b00:	e3 cf       	rjmp	.-58     	; 0xac8 <__vector_6+0x46>
			display_buf[m] = Non_exp_array[m];}	}
				
		TCCR0B = 0; data_from_UNO(); TCCR0B = 1;}					//Get data from UNO every 20mS

		if(int_counter == 10){										//Update slave every 10mS
     b02:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <int_counter>
     b06:	8a 30       	cpi	r24, 0x0A	; 10
     b08:	09 f5       	brne	.+66     	; 0xb4c <__vector_6+0xca>
			request_counter = 32;									//Poll slave a maximum of 32 times
     b0a:	80 e2       	ldi	r24, 0x20	; 32
     b0c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <request_counter>
			while (((!(send_save_address_plus_RW_bit(0x8))))\
     b10:	88 e0       	ldi	r24, 0x08	; 8
     b12:	28 db       	rcall	.-2480   	; 0x164 <send_save_address_plus_RW_bit>
     b14:	81 11       	cpse	r24, r1
     b16:	06 c0       	rjmp	.+12     	; 0xb24 <__vector_6+0xa2>
			 && (request_counter >= 0))								//Slave address is 4 and W/R bit is 1 for master transmit.
     b18:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <request_counter>
			{ request_counter -= 1;}
     b1c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <request_counter>
     b20:	81 50       	subi	r24, 0x01	; 1
     b22:	f4 cf       	rjmp	.-24     	; 0xb0c <__vector_6+0x8a>
			if (request_counter){
     b24:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <request_counter>
     b28:	88 23       	and	r24, r24
     b2a:	81 f0       	breq	.+32     	; 0xb4c <__vector_6+0xca>
				write_data_to_slave(display_buf[3], 0);
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <display_buf+0x3>
     b32:	40 db       	rcall	.-2432   	; 0x1b4 <write_data_to_slave>
				write_data_to_slave(display_buf[2], 0);
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <display_buf+0x2>
     b3a:	3c db       	rcall	.-2440   	; 0x1b4 <write_data_to_slave>
				write_data_to_slave(display_buf[1], 0);
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <display_buf+0x1>
     b42:	38 db       	rcall	.-2448   	; 0x1b4 <write_data_to_slave>
			write_data_to_slave(display_buf[0], 1);}}
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <display_buf>
     b4a:	34 db       	rcall	.-2456   	; 0x1b4 <write_data_to_slave>
		
		clear_digits;
     b4c:	88 b3       	in	r24, 0x18	; 24
     b4e:	86 66       	ori	r24, 0x66	; 102
     b50:	88 bb       	out	0x18, r24	; 24
		clear_display;}												//Display is cleared every mS
     b52:	8b b3       	in	r24, 0x1b	; 27
     b54:	87 70       	andi	r24, 0x07	; 7
     b56:	8b bb       	out	0x1b, r24	; 27
     b58:	88 b3       	in	r24, 0x18	; 24
     b5a:	86 7e       	andi	r24, 0xE6	; 230
     b5c:	88 bb       	out	0x18, r24	; 24
     b5e:	ff 91       	pop	r31
     b60:	ef 91       	pop	r30
     b62:	bf 91       	pop	r27
     b64:	af 91       	pop	r26
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	7f 91       	pop	r23
     b6c:	6f 91       	pop	r22
     b6e:	5f 91       	pop	r21
     b70:	4f 91       	pop	r20
     b72:	3f 91       	pop	r19
     b74:	2f 91       	pop	r18
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti

00000b80 <Char_definition>:
	{Display_driver();}}


/******************************************************************************************************/
	void Char_definition()
	{switch (display_buf[buf_ptr]){
     b80:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <buf_ptr>
     b84:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <buf_ptr+0x1>
     b88:	ec 58       	subi	r30, 0x8C	; 140
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	85 34       	cpi	r24, 0x45	; 69
     b90:	09 f4       	brne	.+2      	; 0xb94 <Char_definition+0x14>
     b92:	8a c0       	rjmp	.+276    	; 0xca8 <Char_definition+0x128>
     b94:	90 f5       	brcc	.+100    	; 0xbfa <Char_definition+0x7a>
     b96:	84 33       	cpi	r24, 0x34	; 52
     b98:	09 f4       	brne	.+2      	; 0xb9c <Char_definition+0x1c>
     b9a:	6c c0       	rjmp	.+216    	; 0xc74 <Char_definition+0xf4>
     b9c:	c8 f4       	brcc	.+50     	; 0xbd0 <Char_definition+0x50>
     b9e:	81 33       	cpi	r24, 0x31	; 49
     ba0:	09 f4       	brne	.+2      	; 0xba4 <Char_definition+0x24>
     ba2:	5f c0       	rjmp	.+190    	; 0xc62 <Char_definition+0xe2>
     ba4:	60 f4       	brcc	.+24     	; 0xbbe <Char_definition+0x3e>
     ba6:	8d 32       	cpi	r24, 0x2D	; 45
     ba8:	09 f4       	brne	.+2      	; 0xbac <Char_definition+0x2c>
     baa:	7c c0       	rjmp	.+248    	; 0xca4 <Char_definition+0x124>
     bac:	80 33       	cpi	r24, 0x30	; 48
     bae:	09 f0       	breq	.+2      	; 0xbb2 <Char_definition+0x32>
     bb0:	a2 c0       	rjmp	.+324    	; 0xcf6 <Char_definition+0x176>
		case '0': zero; break;
     bb2:	88 b3       	in	r24, 0x18	; 24
     bb4:	89 61       	ori	r24, 0x19	; 25
     bb6:	88 bb       	out	0x18, r24	; 24
     bb8:	8b b3       	in	r24, 0x1b	; 27
     bba:	88 65       	ori	r24, 0x58	; 88
     bbc:	59 c0       	rjmp	.+178    	; 0xc70 <Char_definition+0xf0>
	{Display_driver();}}


/******************************************************************************************************/
	void Char_definition()
	{switch (display_buf[buf_ptr]){
     bbe:	82 33       	cpi	r24, 0x32	; 50
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <Char_definition+0x44>
     bc2:	51 c0       	rjmp	.+162    	; 0xc66 <Char_definition+0xe6>
     bc4:	83 33       	cpi	r24, 0x33	; 51
     bc6:	09 f0       	breq	.+2      	; 0xbca <Char_definition+0x4a>
     bc8:	96 c0       	rjmp	.+300    	; 0xcf6 <Char_definition+0x176>
		case '0': zero; break;
		case '1': one; break;
		case '2': two; break;
		case '3': three; break;
     bca:	88 b3       	in	r24, 0x18	; 24
     bcc:	81 61       	ori	r24, 0x11	; 17
     bce:	57 c0       	rjmp	.+174    	; 0xc7e <Char_definition+0xfe>
	{Display_driver();}}


/******************************************************************************************************/
	void Char_definition()
	{switch (display_buf[buf_ptr]){
     bd0:	87 33       	cpi	r24, 0x37	; 55
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <Char_definition+0x56>
     bd4:	58 c0       	rjmp	.+176    	; 0xc86 <Char_definition+0x106>
     bd6:	40 f4       	brcc	.+16     	; 0xbe8 <Char_definition+0x68>
     bd8:	85 33       	cpi	r24, 0x35	; 53
     bda:	09 f4       	brne	.+2      	; 0xbde <Char_definition+0x5e>
     bdc:	4e c0       	rjmp	.+156    	; 0xc7a <Char_definition+0xfa>
     bde:	86 33       	cpi	r24, 0x36	; 54
     be0:	09 f0       	breq	.+2      	; 0xbe4 <Char_definition+0x64>
     be2:	89 c0       	rjmp	.+274    	; 0xcf6 <Char_definition+0x176>
		case '1': one; break;
		case '2': two; break;
		case '3': three; break;
		case '4': four; break;
		case '5': five; break;
		case '6': six; break;
     be4:	c3 9a       	sbi	0x18, 3	; 24
     be6:	57 c0       	rjmp	.+174    	; 0xc96 <Char_definition+0x116>
	{Display_driver();}}


/******************************************************************************************************/
	void Char_definition()
	{switch (display_buf[buf_ptr]){
     be8:	88 33       	cpi	r24, 0x38	; 56
     bea:	09 f4       	brne	.+2      	; 0xbee <Char_definition+0x6e>
     bec:	51 c0       	rjmp	.+162    	; 0xc90 <Char_definition+0x110>
     bee:	89 33       	cpi	r24, 0x39	; 57
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <Char_definition+0x74>
     bf2:	81 c0       	rjmp	.+258    	; 0xcf6 <Char_definition+0x176>
		case '4': four; break;
		case '5': five; break;
		case '6': six; break;
		case '7': seven; break;
		case '8': eight; break;
		case '9': nine; break;
     bf4:	88 b3       	in	r24, 0x18	; 24
     bf6:	89 61       	ori	r24, 0x19	; 25
     bf8:	51 c0       	rjmp	.+162    	; 0xc9c <Char_definition+0x11c>
	{Display_driver();}}


/******************************************************************************************************/
	void Char_definition()
	{switch (display_buf[buf_ptr]){
     bfa:	83 3b       	cpi	r24, 0xB3	; 179
     bfc:	09 f4       	brne	.+2      	; 0xc00 <Char_definition+0x80>
     bfe:	5f c0       	rjmp	.+190    	; 0xcbe <Char_definition+0x13e>
     c00:	c0 f4       	brcc	.+48     	; 0xc32 <Char_definition+0xb2>
     c02:	80 3b       	cpi	r24, 0xB0	; 176
     c04:	09 f4       	brne	.+2      	; 0xc08 <Char_definition+0x88>
     c06:	53 c0       	rjmp	.+166    	; 0xcae <Char_definition+0x12e>
     c08:	40 f4       	brcc	.+16     	; 0xc1a <Char_definition+0x9a>
     c0a:	85 36       	cpi	r24, 0x65	; 101
     c0c:	09 f4       	brne	.+2      	; 0xc10 <Char_definition+0x90>
     c0e:	4c c0       	rjmp	.+152    	; 0xca8 <Char_definition+0x128>
     c10:	8d 3a       	cpi	r24, 0xAD	; 173
     c12:	09 f0       	breq	.+2      	; 0xc16 <Char_definition+0x96>
     c14:	70 c0       	rjmp	.+224    	; 0xcf6 <Char_definition+0x176>
	case ('5' | 0x80): five_point; break;
	case ('6' | 0x80): six_point; break;
	case ('7' | 0x80): seven_point; break;
	case ('8' | 0x80): eight_point; break;
	case ('9' | 0x80): nine_point; break;
	case ('-' | 0x80): minus_point; break;}
     c16:	df 9a       	sbi	0x1b, 7	; 27
     c18:	6d c0       	rjmp	.+218    	; 0xcf4 <Char_definition+0x174>
	{Display_driver();}}


/******************************************************************************************************/
	void Char_definition()
	{switch (display_buf[buf_ptr]){
     c1a:	81 3b       	cpi	r24, 0xB1	; 177
     c1c:	09 f4       	brne	.+2      	; 0xc20 <Char_definition+0xa0>
     c1e:	4d c0       	rjmp	.+154    	; 0xcba <Char_definition+0x13a>
     c20:	82 3b       	cpi	r24, 0xB2	; 178
     c22:	09 f0       	breq	.+2      	; 0xc26 <Char_definition+0xa6>
     c24:	68 c0       	rjmp	.+208    	; 0xcf6 <Char_definition+0x176>
		case '-': minus; break;
		case 'E': case 'e': exponent; break;
	
	case ('0' | 0x80): zero_point; break;
	case ('1' | 0x80): one_point; break;
	case ('2' | 0x80): two_point; break;
     c26:	88 b3       	in	r24, 0x18	; 24
     c28:	81 61       	ori	r24, 0x11	; 17
     c2a:	88 bb       	out	0x18, r24	; 24
     c2c:	8b b3       	in	r24, 0x1b	; 27
     c2e:	88 69       	ori	r24, 0x98	; 152
     c30:	60 c0       	rjmp	.+192    	; 0xcf2 <Char_definition+0x172>
	{Display_driver();}}


/******************************************************************************************************/
	void Char_definition()
	{switch (display_buf[buf_ptr]){
     c32:	86 3b       	cpi	r24, 0xB6	; 182
     c34:	09 f4       	brne	.+2      	; 0xc38 <Char_definition+0xb8>
     c36:	4d c0       	rjmp	.+154    	; 0xcd2 <Char_definition+0x152>
     c38:	48 f4       	brcc	.+18     	; 0xc4c <Char_definition+0xcc>
     c3a:	84 3b       	cpi	r24, 0xB4	; 180
     c3c:	09 f4       	brne	.+2      	; 0xc40 <Char_definition+0xc0>
     c3e:	42 c0       	rjmp	.+132    	; 0xcc4 <Char_definition+0x144>
     c40:	85 3b       	cpi	r24, 0xB5	; 181
     c42:	09 f0       	breq	.+2      	; 0xc46 <Char_definition+0xc6>
     c44:	58 c0       	rjmp	.+176    	; 0xcf6 <Char_definition+0x176>
	case ('0' | 0x80): zero_point; break;
	case ('1' | 0x80): one_point; break;
	case ('2' | 0x80): two_point; break;
	case ('3' | 0x80): three_point; break;
	case ('4' | 0x80): four_point; break;
	case ('5' | 0x80): five_point; break;
     c46:	88 b3       	in	r24, 0x18	; 24
     c48:	88 61       	ori	r24, 0x18	; 24
     c4a:	3f c0       	rjmp	.+126    	; 0xcca <Char_definition+0x14a>
	{Display_driver();}}


/******************************************************************************************************/
	void Char_definition()
	{switch (display_buf[buf_ptr]){
     c4c:	88 3b       	cpi	r24, 0xB8	; 184
     c4e:	09 f4       	brne	.+2      	; 0xc52 <Char_definition+0xd2>
     c50:	47 c0       	rjmp	.+142    	; 0xce0 <Char_definition+0x160>
     c52:	08 f4       	brcc	.+2      	; 0xc56 <Char_definition+0xd6>
     c54:	40 c0       	rjmp	.+128    	; 0xcd6 <Char_definition+0x156>
     c56:	89 3b       	cpi	r24, 0xB9	; 185
     c58:	09 f0       	breq	.+2      	; 0xc5c <Char_definition+0xdc>
     c5a:	4d c0       	rjmp	.+154    	; 0xcf6 <Char_definition+0x176>
	case ('4' | 0x80): four_point; break;
	case ('5' | 0x80): five_point; break;
	case ('6' | 0x80): six_point; break;
	case ('7' | 0x80): seven_point; break;
	case ('8' | 0x80): eight_point; break;
	case ('9' | 0x80): nine_point; break;
     c5c:	88 b3       	in	r24, 0x18	; 24
     c5e:	89 61       	ori	r24, 0x19	; 25
     c60:	45 c0       	rjmp	.+138    	; 0xcec <Char_definition+0x16c>

/******************************************************************************************************/
	void Char_definition()
	{switch (display_buf[buf_ptr]){
		case '0': zero; break;
		case '1': one; break;
     c62:	c0 9a       	sbi	0x18, 0	; 24
     c64:	13 c0       	rjmp	.+38     	; 0xc8c <Char_definition+0x10c>
		case '2': two; break;
     c66:	88 b3       	in	r24, 0x18	; 24
     c68:	81 61       	ori	r24, 0x11	; 17
     c6a:	88 bb       	out	0x18, r24	; 24
     c6c:	8b b3       	in	r24, 0x1b	; 27
     c6e:	88 69       	ori	r24, 0x98	; 152
     c70:	8b bb       	out	0x1b, r24	; 27
     c72:	41 c0       	rjmp	.+130    	; 0xcf6 <Char_definition+0x176>
		case '3': three; break;
		case '4': four; break;
     c74:	88 b3       	in	r24, 0x18	; 24
     c76:	89 60       	ori	r24, 0x09	; 9
     c78:	11 c0       	rjmp	.+34     	; 0xc9c <Char_definition+0x11c>
		case '5': five; break;
     c7a:	88 b3       	in	r24, 0x18	; 24
     c7c:	88 61       	ori	r24, 0x18	; 24
     c7e:	88 bb       	out	0x18, r24	; 24
     c80:	8b b3       	in	r24, 0x1b	; 27
     c82:	80 6d       	ori	r24, 0xD0	; 208
     c84:	f5 cf       	rjmp	.-22     	; 0xc70 <Char_definition+0xf0>
		case '6': six; break;
		case '7': seven; break;
     c86:	88 b3       	in	r24, 0x18	; 24
     c88:	81 61       	ori	r24, 0x11	; 17
     c8a:	88 bb       	out	0x18, r24	; 24
     c8c:	de 9a       	sbi	0x1b, 6	; 27
     c8e:	33 c0       	rjmp	.+102    	; 0xcf6 <Char_definition+0x176>
		case '8': eight; break;
     c90:	88 b3       	in	r24, 0x18	; 24
     c92:	89 61       	ori	r24, 0x19	; 25
     c94:	88 bb       	out	0x18, r24	; 24
     c96:	8b b3       	in	r24, 0x1b	; 27
     c98:	88 6d       	ori	r24, 0xD8	; 216
     c9a:	ea cf       	rjmp	.-44     	; 0xc70 <Char_definition+0xf0>
		case '9': nine; break;
     c9c:	88 bb       	out	0x18, r24	; 24
     c9e:	8b b3       	in	r24, 0x1b	; 27
     ca0:	80 6c       	ori	r24, 0xC0	; 192
     ca2:	e6 cf       	rjmp	.-52     	; 0xc70 <Char_definition+0xf0>
		case '-': minus; break;
     ca4:	df 9a       	sbi	0x1b, 7	; 27
     ca6:	27 c0       	rjmp	.+78     	; 0xcf6 <Char_definition+0x176>
		case 'E': case 'e': exponent; break;
     ca8:	88 b3       	in	r24, 0x18	; 24
     caa:	88 61       	ori	r24, 0x18	; 24
     cac:	de cf       	rjmp	.-68     	; 0xc6a <Char_definition+0xea>
	
	case ('0' | 0x80): zero_point; break;
     cae:	88 b3       	in	r24, 0x18	; 24
     cb0:	89 61       	ori	r24, 0x19	; 25
     cb2:	88 bb       	out	0x18, r24	; 24
     cb4:	8b b3       	in	r24, 0x1b	; 27
     cb6:	88 65       	ori	r24, 0x58	; 88
     cb8:	1c c0       	rjmp	.+56     	; 0xcf2 <Char_definition+0x172>
	case ('1' | 0x80): one_point; break;
     cba:	c0 9a       	sbi	0x18, 0	; 24
     cbc:	0f c0       	rjmp	.+30     	; 0xcdc <Char_definition+0x15c>
	case ('2' | 0x80): two_point; break;
	case ('3' | 0x80): three_point; break;
     cbe:	88 b3       	in	r24, 0x18	; 24
     cc0:	81 61       	ori	r24, 0x11	; 17
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <Char_definition+0x14a>
	case ('4' | 0x80): four_point; break;
     cc4:	88 b3       	in	r24, 0x18	; 24
     cc6:	89 60       	ori	r24, 0x09	; 9
     cc8:	11 c0       	rjmp	.+34     	; 0xcec <Char_definition+0x16c>
	case ('5' | 0x80): five_point; break;
     cca:	88 bb       	out	0x18, r24	; 24
     ccc:	8b b3       	in	r24, 0x1b	; 27
     cce:	80 6d       	ori	r24, 0xD0	; 208
     cd0:	10 c0       	rjmp	.+32     	; 0xcf2 <Char_definition+0x172>
	case ('6' | 0x80): six_point; break;
     cd2:	c3 9a       	sbi	0x18, 3	; 24
     cd4:	08 c0       	rjmp	.+16     	; 0xce6 <Char_definition+0x166>
	case ('7' | 0x80): seven_point; break;
     cd6:	88 b3       	in	r24, 0x18	; 24
     cd8:	81 61       	ori	r24, 0x11	; 17
     cda:	88 bb       	out	0x18, r24	; 24
     cdc:	de 9a       	sbi	0x1b, 6	; 27
     cde:	0a c0       	rjmp	.+20     	; 0xcf4 <Char_definition+0x174>
	case ('8' | 0x80): eight_point; break;
     ce0:	88 b3       	in	r24, 0x18	; 24
     ce2:	89 61       	ori	r24, 0x19	; 25
     ce4:	88 bb       	out	0x18, r24	; 24
     ce6:	8b b3       	in	r24, 0x1b	; 27
     ce8:	88 6d       	ori	r24, 0xD8	; 216
     cea:	03 c0       	rjmp	.+6      	; 0xcf2 <Char_definition+0x172>
	case ('9' | 0x80): nine_point; break;
     cec:	88 bb       	out	0x18, r24	; 24
     cee:	8b b3       	in	r24, 0x1b	; 27
     cf0:	80 6c       	ori	r24, 0xC0	; 192
     cf2:	8b bb       	out	0x1b, r24	; 27
	case ('-' | 0x80): minus_point; break;}
     cf4:	dd 9a       	sbi	0x1b, 5	; 27
	buf_ptr++;}
     cf6:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <buf_ptr>
     cfa:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <buf_ptr+0x1>
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <buf_ptr+0x1>
     d04:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <buf_ptr>
     d08:	08 95       	ret

00000d0a <Display_driver>:



/******************************************************************************************************/
void Display_driver()												//Display multiplexer advances every 1 or every 4mS							
{ buf_ptr = buf_ptr%8;
     d0a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <buf_ptr>
     d0e:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <buf_ptr+0x1>
     d12:	68 e0       	ldi	r22, 0x08	; 8
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	f3 d5       	rcall	.+3046   	; 0x18fe <__divmodhi4>
     d18:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <buf_ptr+0x1>
     d1c:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <buf_ptr>
	if (!(buf_ptr))buf_ptr = 4;
     d20:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <buf_ptr>
     d24:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <buf_ptr+0x1>
     d28:	89 2b       	or	r24, r25
     d2a:	31 f4       	brne	.+12     	; 0xd38 <Display_driver+0x2e>
     d2c:	84 e0       	ldi	r24, 0x04	; 4
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <buf_ptr+0x1>
     d34:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <buf_ptr>
	
	switch(buf_ptr){
     d38:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <buf_ptr>
     d3c:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <buf_ptr+0x1>
     d40:	85 30       	cpi	r24, 0x05	; 5
     d42:	91 05       	cpc	r25, r1
     d44:	61 f0       	breq	.+24     	; 0xd5e <Display_driver+0x54>
     d46:	24 f4       	brge	.+8      	; 0xd50 <Display_driver+0x46>
     d48:	04 97       	sbiw	r24, 0x04	; 4
     d4a:	61 f4       	brne	.+24     	; 0xd64 <Display_driver+0x5a>
		case 4: {digit_7;} break;
     d4c:	c5 98       	cbi	0x18, 5	; 24
     d4e:	0a c0       	rjmp	.+20     	; 0xd64 <Display_driver+0x5a>
/******************************************************************************************************/
void Display_driver()												//Display multiplexer advances every 1 or every 4mS							
{ buf_ptr = buf_ptr%8;
	if (!(buf_ptr))buf_ptr = 4;
	
	switch(buf_ptr){
     d50:	86 30       	cpi	r24, 0x06	; 6
     d52:	91 05       	cpc	r25, r1
     d54:	31 f0       	breq	.+12     	; 0xd62 <Display_driver+0x58>
     d56:	07 97       	sbiw	r24, 0x07	; 7
     d58:	29 f4       	brne	.+10     	; 0xd64 <Display_driver+0x5a>
		case 4: {digit_7;} break;
		case 5: {digit_6;} break;
		case 6: {digit_5;} break;
		case 7: {digit_4;} break;}
     d5a:	c6 98       	cbi	0x18, 6	; 24
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <Display_driver+0x5a>
{ buf_ptr = buf_ptr%8;
	if (!(buf_ptr))buf_ptr = 4;
	
	switch(buf_ptr){
		case 4: {digit_7;} break;
		case 5: {digit_6;} break;
     d5e:	c2 98       	cbi	0x18, 2	; 24
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <Display_driver+0x5a>
		case 6: {digit_5;} break;
     d62:	c1 98       	cbi	0x18, 1	; 24
		case 7: {digit_4;} break;}
	Char_definition();}
     d64:	0d cf       	rjmp	.-486    	; 0xb80 <Char_definition>

00000d66 <__vector_14>:




/******************************************************************************************************/
	ISR (TIMER0_COMPA_vect){											//Controls display intensity
     d66:	1f 92       	push	r1
     d68:	0f 92       	push	r0
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	0f 92       	push	r0
     d6e:	11 24       	eor	r1, r1
     d70:	2f 93       	push	r18
     d72:	3f 93       	push	r19
     d74:	4f 93       	push	r20
     d76:	5f 93       	push	r21
     d78:	6f 93       	push	r22
     d7a:	7f 93       	push	r23
     d7c:	8f 93       	push	r24
     d7e:	9f 93       	push	r25
     d80:	af 93       	push	r26
     d82:	bf 93       	push	r27
     d84:	ef 93       	push	r30
     d86:	ff 93       	push	r31
	if(!(int_counter%intensity_control))								//Updates display mS or every 4mS
     d88:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <int_counter>
     d8c:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <intensity_control>
     d90:	9d d5       	rcall	.+2874   	; 0x18cc <__udivmodqi4>
     d92:	91 11       	cpse	r25, r1
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <__vector_14+0x32>
	{Display_driver();}}
     d96:	b9 df       	rcall	.-142    	; 0xd0a <Display_driver>
     d98:	ff 91       	pop	r31
     d9a:	ef 91       	pop	r30
     d9c:	bf 91       	pop	r27
     d9e:	af 91       	pop	r26
     da0:	9f 91       	pop	r25
     da2:	8f 91       	pop	r24
     da4:	7f 91       	pop	r23
     da6:	6f 91       	pop	r22
     da8:	5f 91       	pop	r21
     daa:	4f 91       	pop	r20
     dac:	3f 91       	pop	r19
     dae:	2f 91       	pop	r18
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <string_to_binary>:
	buf_ptr++;}
	
	

/*******************************************************************************************************************/
long string_to_binary(char array[]){
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	00 d0       	rcall	.+0      	; 0xdcc <string_to_binary+0x12>
     dcc:	1f 92       	push	r1
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	9b 83       	std	Y+3, r25	; 0x03
     dd4:	8a 83       	std	Y+2, r24	; 0x02
     dd6:	8c 01       	movw	r16, r24
     dd8:	08 5f       	subi	r16, 0xF8	; 248
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
	
	char sign = '+';
	long num = 0;
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	cb 01       	movw	r24, r22
	

/*******************************************************************************************************************/
long string_to_binary(char array[]){
	
	char sign = '+';
     de2:	2b e2       	ldi	r18, 0x2B	; 43
     de4:	29 83       	std	Y+1, r18	; 0x01
	long num = 0;

	for(int m = 0; m <= 7; m++){
				
		if(array[m]){
     de6:	ea 81       	ldd	r30, Y+2	; 0x02
     de8:	fb 81       	ldd	r31, Y+3	; 0x03
     dea:	f1 90       	ld	r15, Z+
     dec:	fb 83       	std	Y+3, r31	; 0x03
     dee:	ea 83       	std	Y+2, r30	; 0x02
     df0:	ff 20       	and	r15, r15
     df2:	e9 f0       	breq	.+58     	; 0xe2e <string_to_binary+0x74>
		if(array[m] == '-'){sign = '-'; continue;}
     df4:	fd e2       	ldi	r31, 0x2D	; 45
     df6:	ff 16       	cp	r15, r31
     df8:	c1 f0       	breq	.+48     	; 0xe2a <string_to_binary+0x70>
			
		if (array[m] & 0x80)	num = num*10 + ((array[m] & 0x7F) - '0');	//Ignore decimal point
     dfa:	2a e0       	ldi	r18, 0x0A	; 10
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	f7 fe       	sbrs	r15, 7
     e04:	04 c0       	rjmp	.+8      	; 0xe0e <string_to_binary+0x54>
     e06:	49 d5       	rcall	.+2706   	; 0x189a <__mulsi3>
     e08:	2f 2d       	mov	r18, r15
     e0a:	2f 77       	andi	r18, 0x7F	; 127
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <string_to_binary+0x58>
		else num = num*10 + (array[m] - '0');}}
     e0e:	45 d5       	rcall	.+2698   	; 0x189a <__mulsi3>
     e10:	2f 2d       	mov	r18, r15
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	20 53       	subi	r18, 0x30	; 48
     e16:	31 09       	sbc	r19, r1
     e18:	69 01       	movw	r12, r18
     e1a:	33 0f       	add	r19, r19
     e1c:	ee 08       	sbc	r14, r14
     e1e:	ff 08       	sbc	r15, r15
     e20:	6c 0d       	add	r22, r12
     e22:	7d 1d       	adc	r23, r13
     e24:	8e 1d       	adc	r24, r14
     e26:	9f 1d       	adc	r25, r15
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <string_to_binary+0x74>
	long num = 0;

	for(int m = 0; m <= 7; m++){
				
		if(array[m]){
		if(array[m] == '-'){sign = '-'; continue;}
     e2a:	2d e2       	ldi	r18, 0x2D	; 45
     e2c:	29 83       	std	Y+1, r18	; 0x01
long string_to_binary(char array[]){
	
	char sign = '+';
	long num = 0;

	for(int m = 0; m <= 7; m++){
     e2e:	ea 81       	ldd	r30, Y+2	; 0x02
     e30:	fb 81       	ldd	r31, Y+3	; 0x03
     e32:	e0 17       	cp	r30, r16
     e34:	f1 07       	cpc	r31, r17
     e36:	b9 f6       	brne	.-82     	; 0xde6 <string_to_binary+0x2c>
		if(array[m]){
		if(array[m] == '-'){sign = '-'; continue;}
			
		if (array[m] & 0x80)	num = num*10 + ((array[m] & 0x7F) - '0');	//Ignore decimal point
		else num = num*10 + (array[m] - '0');}}
	if (sign == '-')num *= (-1);
     e38:	f9 81       	ldd	r31, Y+1	; 0x01
     e3a:	fd 32       	cpi	r31, 0x2D	; 45
     e3c:	39 f4       	brne	.+14     	; 0xe4c <string_to_binary+0x92>
     e3e:	90 95       	com	r25
     e40:	80 95       	com	r24
     e42:	70 95       	com	r23
     e44:	61 95       	neg	r22
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
     e48:	8f 4f       	sbci	r24, 0xFF	; 255
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
	return num;}
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	08 95       	ret

00000e64 <main>:



int main (void){

setup_ATtiny_HW;	
     e64:	a8 95       	wdr
     e66:	84 b7       	in	r24, 0x34	; 52
     e68:	87 7f       	andi	r24, 0xF7	; 247
     e6a:	84 bf       	out	0x34, r24	; 52
     e6c:	81 b5       	in	r24, 0x21	; 33
     e6e:	88 61       	ori	r24, 0x18	; 24
     e70:	81 bd       	out	0x21, r24	; 33
     e72:	11 bc       	out	0x21, r1	; 33
     e74:	85 b7       	in	r24, 0x35	; 53
     e76:	8f 7b       	andi	r24, 0xBF	; 191
     e78:	85 bf       	out	0x35, r24	; 53
     e7a:	1a ba       	out	0x1a, r1	; 26
     e7c:	8f ef       	ldi	r24, 0xFF	; 255
     e7e:	8b bb       	out	0x1b, r24	; 27
     e80:	17 ba       	out	0x17, r1	; 23
     e82:	88 bb       	out	0x18, r24	; 24
     e84:	88 9a       	sbi	0x11, 0	; 17
     e86:	61 b7       	in	r22, 0x31	; 49
     e88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e8c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     e90:	03 97       	sbiw	r24, 0x03	; 3
     e92:	10 d7       	rcall	.+3616   	; 0x1cb4 <eeprom_write_byte>
     e94:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e98:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     e9c:	c8 01       	movw	r24, r16
     e9e:	02 97       	sbiw	r24, 0x02	; 2
     ea0:	01 d7       	rcall	.+3586   	; 0x1ca4 <eeprom_read_byte>
     ea2:	c8 2f       	mov	r28, r24
     ea4:	80 ef       	ldi	r24, 0xF0	; 240
     ea6:	8c 0f       	add	r24, r28
     ea8:	80 3e       	cpi	r24, 0xE0	; 224
     eaa:	30 f4       	brcc	.+12     	; 0xeb8 <main+0x54>
     eac:	c8 01       	movw	r24, r16
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f9 d6       	rcall	.+3570   	; 0x1ca4 <eeprom_read_byte>
     eb2:	c8 13       	cpse	r28, r24
     eb4:	01 c0       	rjmp	.+2      	; 0xeb8 <main+0x54>
     eb6:	c1 bf       	out	0x31, r28	; 49

buf_ptr = 0;														//Used by display driver: Points to next digit of display 
     eb8:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <buf_ptr+0x1>
     ebc:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <buf_ptr>
set_digit_drivers;
     ec0:	8a b3       	in	r24, 0x1a	; 26
     ec2:	88 6f       	ori	r24, 0xF8	; 248
     ec4:	8a bb       	out	0x1a, r24	; 26
     ec6:	87 b3       	in	r24, 0x17	; 23
     ec8:	8f 67       	ori	r24, 0x7F	; 127
     eca:	87 bb       	out	0x17, r24	; 23
clear_digits;
     ecc:	88 b3       	in	r24, 0x18	; 24
     ece:	86 66       	ori	r24, 0x66	; 102
     ed0:	88 bb       	out	0x18, r24	; 24
clear_display;	
     ed2:	8b b3       	in	r24, 0x1b	; 27
     ed4:	87 70       	andi	r24, 0x07	; 7
     ed6:	8b bb       	out	0x1b, r24	; 27
     ed8:	88 b3       	in	r24, 0x18	; 24
     eda:	86 7e       	andi	r24, 0xE6	; 230
     edc:	88 bb       	out	0x18, r24	; 24
TCCR0A |= 1 << TCW0;												//Timer0 in 16 bit mode
     ede:	af 9a       	sbi	0x15, 7	; 21
OCR0B =	0xE4;														//Used to control intensity
     ee0:	84 ee       	ldi	r24, 0xE4	; 228
     ee2:	82 bb       	out	0x12, r24	; 18
OCR0A = 0x0;
     ee4:	13 ba       	out	0x13, r1	; 19
TCNT0H = 0xE0;														//Generates 1mS interrupt stream 
     ee6:	80 ee       	ldi	r24, 0xE0	; 224
     ee8:	84 bb       	out	0x14, r24	; 20
TCNT0L = 0x0;		
     eea:	12 be       	out	0x32, r1	; 50
TIMSK |= (1 << TOIE0) | (1 << OCIE0A);								//Initialise Timer interrupts
     eec:	89 b7       	in	r24, 0x39	; 57
     eee:	82 61       	ori	r24, 0x12	; 18
     ef0:	89 bf       	out	0x39, r24	; 57

if ((eeprom_read_byte((uint8_t*)(EE_size - 7))== 4)\
     ef2:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ef6:	d0 91 61 00 	lds	r29, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     efa:	27 97       	sbiw	r28, 0x07	; 7
     efc:	ce 01       	movw	r24, r28
     efe:	d2 d6       	rcall	.+3492   	; 0x1ca4 <eeprom_read_byte>
     f00:	84 30       	cpi	r24, 0x04	; 4
     f02:	29 f0       	breq	.+10     	; 0xf0e <main+0xaa>
 ||  (eeprom_read_byte((uint8_t*)(EE_size - 7))== 1));				//Default intensity
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	19 f0       	breq	.+6      	; 0xf0e <main+0xaa>
else eeprom_write_byte((uint8_t*)(EE_size - 7), 1);
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	ce 01       	movw	r24, r28
     f0c:	d3 d6       	rcall	.+3494   	; 0x1cb4 <eeprom_write_byte>

int_counter = 0;													//T0 overflow interrupt counter
     f0e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <int_counter>
intensity_control =  eeprom_read_byte((uint8_t*)(EE_size - 7));
     f12:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     f16:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     f1a:	07 97       	sbiw	r24, 0x07	; 7
     f1c:	c3 d6       	rcall	.+3462   	; 0x1ca4 <eeprom_read_byte>
     f1e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <intensity_control>

sei();	
     f22:	78 94       	sei
TCCR0B = 1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	83 bf       	out	0x33, r24	; 51

if(!(PINA & (1 << PA1))){
     f28:	c9 99       	sbic	0x19, 1	; 25
     f2a:	0f c0       	rjmp	.+30     	; 0xf4a <main+0xe6>
	if (intensity_control == 1)intensity_control = 4;
     f2c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <intensity_control>
     f30:	91 30       	cpi	r25, 0x01	; 1
     f32:	09 f4       	brne	.+2      	; 0xf36 <main+0xd2>
     f34:	84 e0       	ldi	r24, 0x04	; 4
	else intensity_control = 1;
     f36:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <intensity_control>
	eeprom_write_byte((uint8_t*)(EE_size - 7),intensity_control);}
     f3a:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <intensity_control>
     f3e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     f42:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     f46:	07 97       	sbiw	r24, 0x07	; 7
     f48:	b5 d6       	rcall	.+3434   	; 0x1cb4 <eeprom_write_byte>
	
TCCR0B = 0;	
     f4a:	13 be       	out	0x33, r1	; 51

USI_TWI_Master_Initialise();
     f4c:	e7 d8       	rcall	.-3634   	; 0x11c <USI_TWI_Master_Initialise>
request_counter = 32;												//Maximum number of times master will poll slave
     f4e:	80 e2       	ldi	r24, 0x20	; 32
     f50:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <request_counter>
while (((!(send_save_address_plus_RW_bit(0x8))))\
     f54:	88 e0       	ldi	r24, 0x08	; 8
     f56:	06 d9       	rcall	.-3572   	; 0x164 <send_save_address_plus_RW_bit>
     f58:	81 11       	cpse	r24, r1
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <main+0x104>
 && (request_counter >= 0))											//Slave address is 4 and W/R bit is 0 for master transmit.
     f5c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <request_counter>
{ request_counter -= 1;}
     f60:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <request_counter>
     f64:	81 50       	subi	r24, 0x01	; 1
     f66:	f4 cf       	rjmp	.-24     	; 0xf50 <main+0xec>
if (request_counter){
     f68:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <request_counter>
     f6c:	88 23       	and	r24, r24
     f6e:	81 f0       	breq	.+32     	; 0xf90 <main+0x12c>
	
	write_data_to_slave(intensity_control, 0);
     f70:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <intensity_control>
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	1e d9       	rcall	.-3524   	; 0x1b4 <write_data_to_slave>
	write_data_to_slave(intensity_control, 0);
     f78:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <intensity_control>
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	1a d9       	rcall	.-3532   	; 0x1b4 <write_data_to_slave>
	write_data_to_slave(intensity_control, 0);
     f80:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <intensity_control>
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	16 d9       	rcall	.-3540   	; 0x1b4 <write_data_to_slave>
	write_data_to_slave(intensity_control, 1);}						//Slave is configured to receive 4 bytes at a time
     f88:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <intensity_control>
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	12 d9       	rcall	.-3548   	; 0x1b4 <write_data_to_slave>


TCCR0B = 1;															//Start 1mS Timer0 clock:TWI ready to receive binary or string data 
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	83 bf       	out	0x33, r24	; 51
flt_array[array_cntr-1]	&= 0x7F;}									//Remove the decimal point from digit with which it was combined

flt_num = atof(flt_array);											//Convert the floating point array to a floating point number
ftoaL(flt_num, flt_array);

char_ptr = (char*)&flt_num;											//Split the number into bytes and return them to the UNO
     f94:	c5 e6       	ldi	r28, 0x65	; 101
     f96:	d0 e0       	ldi	r29, 0x00	; 0
	if (!(flt_array[m] & 0x80))continue;								
array_cntr = m+1;break;}

if(array_cntr){for(int m = 9; m > array_cntr ; m--)					//Shift the array one place to the right creating space for the decimal point 
	{flt_array[m] = flt_array[m-1];}
flt_array[array_cntr] = '.';										//Insert the decimal point
     f98:	8e e2       	ldi	r24, 0x2E	; 46
     f9a:	f8 2e       	mov	r15, r24
	write_data_to_slave(intensity_control, 1);}						//Slave is configured to receive 4 bytes at a time


TCCR0B = 1;															//Start 1mS Timer0 clock:TWI ready to receive binary or string data 
while(1){
while (!(cr_keypress));												//Wait here for TWI interrupts. 
     f9c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
     fa0:	88 23       	and	r24, r24
     fa2:	e1 f3       	breq	.-8      	; 0xf9c <main+0x138>
cr_keypress = 0;													//String received from UNO: Clear carriage return 
     fa4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>



switch (transaction_type){
     fa8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <transaction_type>
     fac:	81 34       	cpi	r24, 0x41	; 65
     fae:	41 f0       	breq	.+16     	; 0xfc0 <main+0x15c>
     fb0:	83 34       	cpi	r24, 0x43	; 67
     fb2:	a1 f7       	brne	.-24     	; 0xf9c <main+0x138>
     fb4:	e4 e7       	ldi	r30, 0x74	; 116
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	df 01       	movw	r26, r30
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	40 c0       	rjmp	.+128    	; 0x1040 <main+0x1dc>
	case 'A':														//Integer string received
I_number = string_to_binary(display_buf);							//Convert the string to a binary I_number
     fc0:	84 e7       	ldi	r24, 0x74	; 116
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	fa de       	rcall	.-524    	; 0xdba <string_to_binary>
     fc6:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <I_number>
     fca:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <I_number+0x1>
     fce:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <I_number+0x2>
     fd2:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <I_number+0x3>

while (!(send_save_address_plus_RW_bit(0x6)));						//Return the I_number to the UNO
     fd6:	86 e0       	ldi	r24, 0x06	; 6
     fd8:	c5 d8       	rcall	.-3702   	; 0x164 <send_save_address_plus_RW_bit>
     fda:	88 23       	and	r24, r24
     fdc:	e1 f3       	breq	.-8      	; 0xfd6 <main+0x172>
     fde:	00 e0       	ldi	r16, 0x00	; 0
     fe0:	10 e0       	ldi	r17, 0x00	; 0
	for(int m = 0; m <= 3; m++){
		if(m == 3)write_data_to_slave(I_number, 1);
     fe2:	03 30       	cpi	r16, 0x03	; 3
     fe4:	11 05       	cpc	r17, r1
     fe6:	21 f4       	brne	.+8      	; 0xff0 <main+0x18c>
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <I_number>
     fee:	17 c0       	rjmp	.+46     	; 0x101e <main+0x1ba>
	else write_data_to_slave(I_number >> (8*(3-m)), 0);}break;
     ff0:	c8 01       	movw	r24, r16
     ff2:	68 ef       	ldi	r22, 0xF8	; 248
     ff4:	7f ef       	ldi	r23, 0xFF	; 255
     ff6:	40 d4       	rcall	.+2176   	; 0x1878 <__mulhi3>
     ff8:	9c 01       	movw	r18, r24
     ffa:	28 5e       	subi	r18, 0xE8	; 232
     ffc:	3f 4f       	sbci	r19, 0xFF	; 255
     ffe:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <I_number>
    1002:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <I_number+0x1>
    1006:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <I_number+0x2>
    100a:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <I_number+0x3>
    100e:	04 c0       	rjmp	.+8      	; 0x1018 <main+0x1b4>
    1010:	b5 95       	asr	r27
    1012:	a7 95       	ror	r26
    1014:	97 95       	ror	r25
    1016:	87 95       	ror	r24
    1018:	2a 95       	dec	r18
    101a:	d2 f7       	brpl	.-12     	; 0x1010 <main+0x1ac>
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	ca d8       	rcall	.-3692   	; 0x1b4 <write_data_to_slave>
switch (transaction_type){
	case 'A':														//Integer string received
I_number = string_to_binary(display_buf);							//Convert the string to a binary I_number

while (!(send_save_address_plus_RW_bit(0x6)));						//Return the I_number to the UNO
	for(int m = 0; m <= 3; m++){
    1020:	0f 5f       	subi	r16, 0xFF	; 255
    1022:	1f 4f       	sbci	r17, 0xFF	; 255
    1024:	04 30       	cpi	r16, 0x04	; 4
    1026:	11 05       	cpc	r17, r1
    1028:	e1 f6       	brne	.-72     	; 0xfe2 <main+0x17e>
    102a:	b8 cf       	rjmp	.-144    	; 0xf9c <main+0x138>


case 'C':															//Floating point number string received. Convert display format to C-format

for(int m = 0; m <= 7; m++){if(display_buf[m] & 0x80)break;			//Add decimal point if necessary
if (m == 7)display_buf[m] |= 0x80;}
    102c:	87 30       	cpi	r24, 0x07	; 7
    102e:	91 05       	cpc	r25, r1
    1030:	19 f4       	brne	.+6      	; 0x1038 <main+0x1d4>
    1032:	20 68       	ori	r18, 0x80	; 128
    1034:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <display_buf+0x7>
	else write_data_to_slave(I_number >> (8*(3-m)), 0);}break;


case 'C':															//Floating point number string received. Convert display format to C-format

for(int m = 0; m <= 7; m++){if(display_buf[m] & 0x80)break;			//Add decimal point if necessary
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	88 30       	cpi	r24, 0x08	; 8
    103c:	91 05       	cpc	r25, r1
    103e:	19 f0       	breq	.+6      	; 0x1046 <main+0x1e2>
    1040:	2d 91       	ld	r18, X+
    1042:	27 ff       	sbrs	r18, 7
    1044:	f3 cf       	rjmp	.-26     	; 0x102c <main+0x1c8>
while (!(cr_keypress));												//Wait here for TWI interrupts. 
cr_keypress = 0;													//String received from UNO: Clear carriage return 



switch (transaction_type){
    1046:	a1 e8       	ldi	r26, 0x81	; 129
    1048:	b0 e0       	ldi	r27, 0x00	; 0
for(int m = 0; m <= 7; m++){if(display_buf[m] & 0x80)break;			//Add decimal point if necessary
if (m == 7)display_buf[m] |= 0x80;}



for(int m = 0; m <= 15; m++)flt_array[m] = 0;						//Clear the array buffer
    104a:	1d 92       	st	X+, r1
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	a1 39       	cpi	r26, 0x91	; 145
    1050:	b8 07       	cpc	r27, r24
    1052:	d9 f7       	brne	.-10     	; 0x104a <main+0x1e6>
    1054:	a1 e8       	ldi	r26, 0x81	; 129
    1056:	b0 e0       	ldi	r27, 0x00	; 0
for(int m = 0; m <= 7; m++)flt_array[m] = display_buf[m];			//Copy the display into the buffer
    1058:	81 91       	ld	r24, Z+
    105a:	8d 93       	st	X+, r24
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	ec 37       	cpi	r30, 0x7C	; 124
    1060:	f8 07       	cpc	r31, r24
    1062:	d1 f7       	brne	.-12     	; 0x1058 <main+0x1f4>
while (!(flt_array[0]))												//Shift the buffer so array zero is occupied
    1064:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <flt_array>
    1068:	81 11       	cpse	r24, r1
    106a:	0a c0       	rjmp	.+20     	; 0x1080 <main+0x21c>
    106c:	e1 e8       	ldi	r30, 0x81	; 129
    106e:	f0 e0       	ldi	r31, 0x00	; 0
{ for(int m = 0; m < 7 ; m++)
	{flt_array[m] = flt_array[m+1]; flt_array[m+1] = 0;}}
    1070:	81 81       	ldd	r24, Z+1	; 0x01
    1072:	81 93       	st	Z+, r24
    1074:	10 82       	st	Z, r1


for(int m = 0; m <= 15; m++)flt_array[m] = 0;						//Clear the array buffer
for(int m = 0; m <= 7; m++)flt_array[m] = display_buf[m];			//Copy the display into the buffer
while (!(flt_array[0]))												//Shift the buffer so array zero is occupied
{ for(int m = 0; m < 7 ; m++)
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	e8 38       	cpi	r30, 0x88	; 136
    107a:	f8 07       	cpc	r31, r24
    107c:	c9 f7       	brne	.-14     	; 0x1070 <main+0x20c>
    107e:	f2 cf       	rjmp	.-28     	; 0x1064 <main+0x200>
	{flt_array[m] = flt_array[m+1]; flt_array[m+1] = 0;}}


array_cntr = 0;
    1080:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <array_cntr+0x1>
    1084:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <array_cntr>
    1088:	e1 e8       	ldi	r30, 0x81	; 129
    108a:	f0 e0       	ldi	r31, 0x00	; 0
for(int m = 0; m <= 9; m++){										//Locate the digit that is combined with a decimal point (if any)
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
	if (!(flt_array[m] & 0x80))continue;								
    1090:	21 91       	ld	r18, Z+
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	27 fd       	sbrc	r18, 7
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <main+0x23c>
{ for(int m = 0; m < 7 ; m++)
	{flt_array[m] = flt_array[m+1]; flt_array[m+1] = 0;}}


array_cntr = 0;
for(int m = 0; m <= 9; m++){										//Locate the digit that is combined with a decimal point (if any)
    1098:	8a 30       	cpi	r24, 0x0A	; 10
    109a:	91 05       	cpc	r25, r1
    109c:	c9 f7       	brne	.-14     	; 0x1090 <main+0x22c>
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <main+0x244>
	if (!(flt_array[m] & 0x80))continue;								
array_cntr = m+1;break;}
    10a0:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <array_cntr+0x1>
    10a4:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <array_cntr>

if(array_cntr){for(int m = 9; m > array_cntr ; m--)					//Shift the array one place to the right creating space for the decimal point 
    10a8:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <array_cntr>
    10ac:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <array_cntr+0x1>
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	a9 f0       	breq	.+42     	; 0x10de <main+0x27a>
    10b4:	ea e8       	ldi	r30, 0x8A	; 138
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	9f 01       	movw	r18, r30
    10ba:	21 58       	subi	r18, 0x81	; 129
    10bc:	30 40       	sbci	r19, 0x00	; 0
    10be:	82 17       	cp	r24, r18
    10c0:	93 07       	cpc	r25, r19
    10c2:	1c f4       	brge	.+6      	; 0x10ca <main+0x266>
	{flt_array[m] = flt_array[m-1];}
    10c4:	22 91       	ld	r18, -Z
    10c6:	21 83       	std	Z+1, r18	; 0x01
    10c8:	f7 cf       	rjmp	.-18     	; 0x10b8 <main+0x254>
flt_array[array_cntr] = '.';										//Insert the decimal point
    10ca:	fc 01       	movw	r30, r24
    10cc:	ef 57       	subi	r30, 0x7F	; 127
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	f0 82       	st	Z, r15
flt_array[array_cntr-1]	&= 0x7F;}									//Remove the decimal point from digit with which it was combined
    10d2:	fc 01       	movw	r30, r24
    10d4:	e0 58       	subi	r30, 0x80	; 128
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	80 81       	ld	r24, Z
    10da:	8f 77       	andi	r24, 0x7F	; 127
    10dc:	80 83       	st	Z, r24

flt_num = atof(flt_array);											//Convert the floating point array to a floating point number
    10de:	81 e8       	ldi	r24, 0x81	; 129
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	72 d4       	rcall	.+2276   	; 0x19c8 <atof>
    10e4:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <flt_num>
    10e8:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <flt_num+0x1>
    10ec:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flt_num+0x2>
    10f0:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <flt_num+0x3>
ftoaL(flt_num, flt_array);
    10f4:	41 e8       	ldi	r20, 0x81	; 129
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	1f da       	rcall	.-3010   	; 0x538 <ftoaL>

char_ptr = (char*)&flt_num;											//Split the number into bytes and return them to the UNO
    10fa:	d0 93 6f 00 	sts	0x006F, r29	; 0x80006f <char_ptr+0x1>
    10fe:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <char_ptr>
while (!(send_save_address_plus_RW_bit(0x6)));
    1102:	86 e0       	ldi	r24, 0x06	; 6
    1104:	2f d8       	rcall	.-4002   	; 0x164 <send_save_address_plus_RW_bit>
    1106:	88 23       	and	r24, r24
    1108:	e1 f3       	breq	.-8      	; 0x1102 <main+0x29e>
write_data_to_slave(*char_ptr, 0); char_ptr += 1;
    110a:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <char_ptr>
    110e:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <char_ptr+0x1>
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	4e d8       	rcall	.-3940   	; 0x1b4 <write_data_to_slave>
    1118:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <char_ptr>
    111c:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <char_ptr+0x1>
    1120:	cf 01       	movw	r24, r30
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <char_ptr+0x1>
    1128:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <char_ptr>
write_data_to_slave(*char_ptr, 0); char_ptr += 1;
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	81 81       	ldd	r24, Z+1	; 0x01
    1130:	41 d8       	rcall	.-3966   	; 0x1b4 <write_data_to_slave>
    1132:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <char_ptr>
    1136:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <char_ptr+0x1>
    113a:	cf 01       	movw	r24, r30
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <char_ptr+0x1>
    1142:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <char_ptr>
write_data_to_slave(*char_ptr, 0); char_ptr += 1;
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	81 81       	ldd	r24, Z+1	; 0x01
    114a:	34 d8       	rcall	.-3992   	; 0x1b4 <write_data_to_slave>
    114c:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <char_ptr>
    1150:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <char_ptr+0x1>
    1154:	cf 01       	movw	r24, r30
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <char_ptr+0x1>
    115c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <char_ptr>
write_data_to_slave(*char_ptr, 1);
    1160:	61 e0       	ldi	r22, 0x01	; 1
    1162:	81 81       	ldd	r24, Z+1	; 0x01
    1164:	27 d8       	rcall	.-4018   	; 0x1b4 <write_data_to_slave>
break;}}															//If binary data is received, display it but return nothing to the UNO
    1166:	1a cf       	rjmp	.-460    	; 0xf9c <main+0x138>

00001168 <__subsf3>:
    1168:	50 58       	subi	r21, 0x80	; 128

0000116a <__addsf3>:
    116a:	bb 27       	eor	r27, r27
    116c:	aa 27       	eor	r26, r26
    116e:	0e d0       	rcall	.+28     	; 0x118c <__addsf3x>
    1170:	75 c1       	rjmp	.+746    	; 0x145c <__fp_round>
    1172:	66 d1       	rcall	.+716    	; 0x1440 <__fp_pscA>
    1174:	30 f0       	brcs	.+12     	; 0x1182 <__addsf3+0x18>
    1176:	6b d1       	rcall	.+726    	; 0x144e <__fp_pscB>
    1178:	20 f0       	brcs	.+8      	; 0x1182 <__addsf3+0x18>
    117a:	31 f4       	brne	.+12     	; 0x1188 <__addsf3+0x1e>
    117c:	9f 3f       	cpi	r25, 0xFF	; 255
    117e:	11 f4       	brne	.+4      	; 0x1184 <__addsf3+0x1a>
    1180:	1e f4       	brtc	.+6      	; 0x1188 <__addsf3+0x1e>
    1182:	5b c1       	rjmp	.+694    	; 0x143a <__fp_nan>
    1184:	0e f4       	brtc	.+2      	; 0x1188 <__addsf3+0x1e>
    1186:	e0 95       	com	r30
    1188:	e7 fb       	bst	r30, 7
    118a:	51 c1       	rjmp	.+674    	; 0x142e <__fp_inf>

0000118c <__addsf3x>:
    118c:	e9 2f       	mov	r30, r25
    118e:	77 d1       	rcall	.+750    	; 0x147e <__fp_split3>
    1190:	80 f3       	brcs	.-32     	; 0x1172 <__addsf3+0x8>
    1192:	ba 17       	cp	r27, r26
    1194:	62 07       	cpc	r22, r18
    1196:	73 07       	cpc	r23, r19
    1198:	84 07       	cpc	r24, r20
    119a:	95 07       	cpc	r25, r21
    119c:	18 f0       	brcs	.+6      	; 0x11a4 <__addsf3x+0x18>
    119e:	71 f4       	brne	.+28     	; 0x11bc <__addsf3x+0x30>
    11a0:	9e f5       	brtc	.+102    	; 0x1208 <__addsf3x+0x7c>
    11a2:	8f c1       	rjmp	.+798    	; 0x14c2 <__fp_zero>
    11a4:	0e f4       	brtc	.+2      	; 0x11a8 <__addsf3x+0x1c>
    11a6:	e0 95       	com	r30
    11a8:	0b 2e       	mov	r0, r27
    11aa:	ba 2f       	mov	r27, r26
    11ac:	a0 2d       	mov	r26, r0
    11ae:	0b 01       	movw	r0, r22
    11b0:	b9 01       	movw	r22, r18
    11b2:	90 01       	movw	r18, r0
    11b4:	0c 01       	movw	r0, r24
    11b6:	ca 01       	movw	r24, r20
    11b8:	a0 01       	movw	r20, r0
    11ba:	11 24       	eor	r1, r1
    11bc:	ff 27       	eor	r31, r31
    11be:	59 1b       	sub	r21, r25
    11c0:	99 f0       	breq	.+38     	; 0x11e8 <__addsf3x+0x5c>
    11c2:	59 3f       	cpi	r21, 0xF9	; 249
    11c4:	50 f4       	brcc	.+20     	; 0x11da <__addsf3x+0x4e>
    11c6:	50 3e       	cpi	r21, 0xE0	; 224
    11c8:	68 f1       	brcs	.+90     	; 0x1224 <__addsf3x+0x98>
    11ca:	1a 16       	cp	r1, r26
    11cc:	f0 40       	sbci	r31, 0x00	; 0
    11ce:	a2 2f       	mov	r26, r18
    11d0:	23 2f       	mov	r18, r19
    11d2:	34 2f       	mov	r19, r20
    11d4:	44 27       	eor	r20, r20
    11d6:	58 5f       	subi	r21, 0xF8	; 248
    11d8:	f3 cf       	rjmp	.-26     	; 0x11c0 <__addsf3x+0x34>
    11da:	46 95       	lsr	r20
    11dc:	37 95       	ror	r19
    11de:	27 95       	ror	r18
    11e0:	a7 95       	ror	r26
    11e2:	f0 40       	sbci	r31, 0x00	; 0
    11e4:	53 95       	inc	r21
    11e6:	c9 f7       	brne	.-14     	; 0x11da <__addsf3x+0x4e>
    11e8:	7e f4       	brtc	.+30     	; 0x1208 <__addsf3x+0x7c>
    11ea:	1f 16       	cp	r1, r31
    11ec:	ba 0b       	sbc	r27, r26
    11ee:	62 0b       	sbc	r22, r18
    11f0:	73 0b       	sbc	r23, r19
    11f2:	84 0b       	sbc	r24, r20
    11f4:	ba f0       	brmi	.+46     	; 0x1224 <__addsf3x+0x98>
    11f6:	91 50       	subi	r25, 0x01	; 1
    11f8:	a1 f0       	breq	.+40     	; 0x1222 <__addsf3x+0x96>
    11fa:	ff 0f       	add	r31, r31
    11fc:	bb 1f       	adc	r27, r27
    11fe:	66 1f       	adc	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	c2 f7       	brpl	.-16     	; 0x11f6 <__addsf3x+0x6a>
    1206:	0e c0       	rjmp	.+28     	; 0x1224 <__addsf3x+0x98>
    1208:	ba 0f       	add	r27, r26
    120a:	62 1f       	adc	r22, r18
    120c:	73 1f       	adc	r23, r19
    120e:	84 1f       	adc	r24, r20
    1210:	48 f4       	brcc	.+18     	; 0x1224 <__addsf3x+0x98>
    1212:	87 95       	ror	r24
    1214:	77 95       	ror	r23
    1216:	67 95       	ror	r22
    1218:	b7 95       	ror	r27
    121a:	f7 95       	ror	r31
    121c:	9e 3f       	cpi	r25, 0xFE	; 254
    121e:	08 f0       	brcs	.+2      	; 0x1222 <__addsf3x+0x96>
    1220:	b3 cf       	rjmp	.-154    	; 0x1188 <__addsf3+0x1e>
    1222:	93 95       	inc	r25
    1224:	88 0f       	add	r24, r24
    1226:	08 f0       	brcs	.+2      	; 0x122a <__addsf3x+0x9e>
    1228:	99 27       	eor	r25, r25
    122a:	ee 0f       	add	r30, r30
    122c:	97 95       	ror	r25
    122e:	87 95       	ror	r24
    1230:	08 95       	ret

00001232 <__cmpsf2>:
    1232:	d9 d0       	rcall	.+434    	; 0x13e6 <__fp_cmp>
    1234:	08 f4       	brcc	.+2      	; 0x1238 <__cmpsf2+0x6>
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	08 95       	ret

0000123a <__divsf3>:
    123a:	0c d0       	rcall	.+24     	; 0x1254 <__divsf3x>
    123c:	0f c1       	rjmp	.+542    	; 0x145c <__fp_round>
    123e:	07 d1       	rcall	.+526    	; 0x144e <__fp_pscB>
    1240:	40 f0       	brcs	.+16     	; 0x1252 <__divsf3+0x18>
    1242:	fe d0       	rcall	.+508    	; 0x1440 <__fp_pscA>
    1244:	30 f0       	brcs	.+12     	; 0x1252 <__divsf3+0x18>
    1246:	21 f4       	brne	.+8      	; 0x1250 <__divsf3+0x16>
    1248:	5f 3f       	cpi	r21, 0xFF	; 255
    124a:	19 f0       	breq	.+6      	; 0x1252 <__divsf3+0x18>
    124c:	f0 c0       	rjmp	.+480    	; 0x142e <__fp_inf>
    124e:	51 11       	cpse	r21, r1
    1250:	39 c1       	rjmp	.+626    	; 0x14c4 <__fp_szero>
    1252:	f3 c0       	rjmp	.+486    	; 0x143a <__fp_nan>

00001254 <__divsf3x>:
    1254:	14 d1       	rcall	.+552    	; 0x147e <__fp_split3>
    1256:	98 f3       	brcs	.-26     	; 0x123e <__divsf3+0x4>

00001258 <__divsf3_pse>:
    1258:	99 23       	and	r25, r25
    125a:	c9 f3       	breq	.-14     	; 0x124e <__divsf3+0x14>
    125c:	55 23       	and	r21, r21
    125e:	b1 f3       	breq	.-20     	; 0x124c <__divsf3+0x12>
    1260:	95 1b       	sub	r25, r21
    1262:	55 0b       	sbc	r21, r21
    1264:	bb 27       	eor	r27, r27
    1266:	aa 27       	eor	r26, r26
    1268:	62 17       	cp	r22, r18
    126a:	73 07       	cpc	r23, r19
    126c:	84 07       	cpc	r24, r20
    126e:	38 f0       	brcs	.+14     	; 0x127e <__divsf3_pse+0x26>
    1270:	9f 5f       	subi	r25, 0xFF	; 255
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	22 0f       	add	r18, r18
    1276:	33 1f       	adc	r19, r19
    1278:	44 1f       	adc	r20, r20
    127a:	aa 1f       	adc	r26, r26
    127c:	a9 f3       	breq	.-22     	; 0x1268 <__divsf3_pse+0x10>
    127e:	33 d0       	rcall	.+102    	; 0x12e6 <__divsf3_pse+0x8e>
    1280:	0e 2e       	mov	r0, r30
    1282:	3a f0       	brmi	.+14     	; 0x1292 <__divsf3_pse+0x3a>
    1284:	e0 e8       	ldi	r30, 0x80	; 128
    1286:	30 d0       	rcall	.+96     	; 0x12e8 <__divsf3_pse+0x90>
    1288:	91 50       	subi	r25, 0x01	; 1
    128a:	50 40       	sbci	r21, 0x00	; 0
    128c:	e6 95       	lsr	r30
    128e:	00 1c       	adc	r0, r0
    1290:	ca f7       	brpl	.-14     	; 0x1284 <__divsf3_pse+0x2c>
    1292:	29 d0       	rcall	.+82     	; 0x12e6 <__divsf3_pse+0x8e>
    1294:	fe 2f       	mov	r31, r30
    1296:	27 d0       	rcall	.+78     	; 0x12e6 <__divsf3_pse+0x8e>
    1298:	66 0f       	add	r22, r22
    129a:	77 1f       	adc	r23, r23
    129c:	88 1f       	adc	r24, r24
    129e:	bb 1f       	adc	r27, r27
    12a0:	26 17       	cp	r18, r22
    12a2:	37 07       	cpc	r19, r23
    12a4:	48 07       	cpc	r20, r24
    12a6:	ab 07       	cpc	r26, r27
    12a8:	b0 e8       	ldi	r27, 0x80	; 128
    12aa:	09 f0       	breq	.+2      	; 0x12ae <__divsf3_pse+0x56>
    12ac:	bb 0b       	sbc	r27, r27
    12ae:	80 2d       	mov	r24, r0
    12b0:	bf 01       	movw	r22, r30
    12b2:	ff 27       	eor	r31, r31
    12b4:	93 58       	subi	r25, 0x83	; 131
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	2a f0       	brmi	.+10     	; 0x12c4 <__divsf3_pse+0x6c>
    12ba:	9e 3f       	cpi	r25, 0xFE	; 254
    12bc:	51 05       	cpc	r21, r1
    12be:	68 f0       	brcs	.+26     	; 0x12da <__divsf3_pse+0x82>
    12c0:	b6 c0       	rjmp	.+364    	; 0x142e <__fp_inf>
    12c2:	00 c1       	rjmp	.+512    	; 0x14c4 <__fp_szero>
    12c4:	5f 3f       	cpi	r21, 0xFF	; 255
    12c6:	ec f3       	brlt	.-6      	; 0x12c2 <__divsf3_pse+0x6a>
    12c8:	98 3e       	cpi	r25, 0xE8	; 232
    12ca:	dc f3       	brlt	.-10     	; 0x12c2 <__divsf3_pse+0x6a>
    12cc:	86 95       	lsr	r24
    12ce:	77 95       	ror	r23
    12d0:	67 95       	ror	r22
    12d2:	b7 95       	ror	r27
    12d4:	f7 95       	ror	r31
    12d6:	9f 5f       	subi	r25, 0xFF	; 255
    12d8:	c9 f7       	brne	.-14     	; 0x12cc <__divsf3_pse+0x74>
    12da:	88 0f       	add	r24, r24
    12dc:	91 1d       	adc	r25, r1
    12de:	96 95       	lsr	r25
    12e0:	87 95       	ror	r24
    12e2:	97 f9       	bld	r25, 7
    12e4:	08 95       	ret
    12e6:	e1 e0       	ldi	r30, 0x01	; 1
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	bb 1f       	adc	r27, r27
    12f0:	62 17       	cp	r22, r18
    12f2:	73 07       	cpc	r23, r19
    12f4:	84 07       	cpc	r24, r20
    12f6:	ba 07       	cpc	r27, r26
    12f8:	20 f0       	brcs	.+8      	; 0x1302 <__divsf3_pse+0xaa>
    12fa:	62 1b       	sub	r22, r18
    12fc:	73 0b       	sbc	r23, r19
    12fe:	84 0b       	sbc	r24, r20
    1300:	ba 0b       	sbc	r27, r26
    1302:	ee 1f       	adc	r30, r30
    1304:	88 f7       	brcc	.-30     	; 0x12e8 <__divsf3_pse+0x90>
    1306:	e0 95       	com	r30
    1308:	08 95       	ret

0000130a <__fixsfsi>:
    130a:	04 d0       	rcall	.+8      	; 0x1314 <__fixunssfsi>
    130c:	68 94       	set
    130e:	b1 11       	cpse	r27, r1
    1310:	d9 c0       	rjmp	.+434    	; 0x14c4 <__fp_szero>
    1312:	08 95       	ret

00001314 <__fixunssfsi>:
    1314:	bc d0       	rcall	.+376    	; 0x148e <__fp_splitA>
    1316:	88 f0       	brcs	.+34     	; 0x133a <__fixunssfsi+0x26>
    1318:	9f 57       	subi	r25, 0x7F	; 127
    131a:	90 f0       	brcs	.+36     	; 0x1340 <__fixunssfsi+0x2c>
    131c:	b9 2f       	mov	r27, r25
    131e:	99 27       	eor	r25, r25
    1320:	b7 51       	subi	r27, 0x17	; 23
    1322:	a0 f0       	brcs	.+40     	; 0x134c <__fixunssfsi+0x38>
    1324:	d1 f0       	breq	.+52     	; 0x135a <__fixunssfsi+0x46>
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	1a f0       	brmi	.+6      	; 0x1336 <__fixunssfsi+0x22>
    1330:	ba 95       	dec	r27
    1332:	c9 f7       	brne	.-14     	; 0x1326 <__fixunssfsi+0x12>
    1334:	12 c0       	rjmp	.+36     	; 0x135a <__fixunssfsi+0x46>
    1336:	b1 30       	cpi	r27, 0x01	; 1
    1338:	81 f0       	breq	.+32     	; 0x135a <__fixunssfsi+0x46>
    133a:	c3 d0       	rcall	.+390    	; 0x14c2 <__fp_zero>
    133c:	b1 e0       	ldi	r27, 0x01	; 1
    133e:	08 95       	ret
    1340:	c0 c0       	rjmp	.+384    	; 0x14c2 <__fp_zero>
    1342:	67 2f       	mov	r22, r23
    1344:	78 2f       	mov	r23, r24
    1346:	88 27       	eor	r24, r24
    1348:	b8 5f       	subi	r27, 0xF8	; 248
    134a:	39 f0       	breq	.+14     	; 0x135a <__fixunssfsi+0x46>
    134c:	b9 3f       	cpi	r27, 0xF9	; 249
    134e:	cc f3       	brlt	.-14     	; 0x1342 <__fixunssfsi+0x2e>
    1350:	86 95       	lsr	r24
    1352:	77 95       	ror	r23
    1354:	67 95       	ror	r22
    1356:	b3 95       	inc	r27
    1358:	d9 f7       	brne	.-10     	; 0x1350 <__fixunssfsi+0x3c>
    135a:	3e f4       	brtc	.+14     	; 0x136a <__fixunssfsi+0x56>
    135c:	90 95       	com	r25
    135e:	80 95       	com	r24
    1360:	70 95       	com	r23
    1362:	61 95       	neg	r22
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	8f 4f       	sbci	r24, 0xFF	; 255
    1368:	9f 4f       	sbci	r25, 0xFF	; 255
    136a:	08 95       	ret

0000136c <__floatunsisf>:
    136c:	e8 94       	clt
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <__floatsisf+0x12>

00001370 <__floatsisf>:
    1370:	97 fb       	bst	r25, 7
    1372:	3e f4       	brtc	.+14     	; 0x1382 <__floatsisf+0x12>
    1374:	90 95       	com	r25
    1376:	80 95       	com	r24
    1378:	70 95       	com	r23
    137a:	61 95       	neg	r22
    137c:	7f 4f       	sbci	r23, 0xFF	; 255
    137e:	8f 4f       	sbci	r24, 0xFF	; 255
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	99 23       	and	r25, r25
    1384:	a9 f0       	breq	.+42     	; 0x13b0 <__floatsisf+0x40>
    1386:	f9 2f       	mov	r31, r25
    1388:	96 e9       	ldi	r25, 0x96	; 150
    138a:	bb 27       	eor	r27, r27
    138c:	93 95       	inc	r25
    138e:	f6 95       	lsr	r31
    1390:	87 95       	ror	r24
    1392:	77 95       	ror	r23
    1394:	67 95       	ror	r22
    1396:	b7 95       	ror	r27
    1398:	f1 11       	cpse	r31, r1
    139a:	f8 cf       	rjmp	.-16     	; 0x138c <__floatsisf+0x1c>
    139c:	fa f4       	brpl	.+62     	; 0x13dc <__floatsisf+0x6c>
    139e:	bb 0f       	add	r27, r27
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <__floatsisf+0x36>
    13a2:	60 ff       	sbrs	r22, 0
    13a4:	1b c0       	rjmp	.+54     	; 0x13dc <__floatsisf+0x6c>
    13a6:	6f 5f       	subi	r22, 0xFF	; 255
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	8f 4f       	sbci	r24, 0xFF	; 255
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	16 c0       	rjmp	.+44     	; 0x13dc <__floatsisf+0x6c>
    13b0:	88 23       	and	r24, r24
    13b2:	11 f0       	breq	.+4      	; 0x13b8 <__floatsisf+0x48>
    13b4:	96 e9       	ldi	r25, 0x96	; 150
    13b6:	11 c0       	rjmp	.+34     	; 0x13da <__floatsisf+0x6a>
    13b8:	77 23       	and	r23, r23
    13ba:	21 f0       	breq	.+8      	; 0x13c4 <__floatsisf+0x54>
    13bc:	9e e8       	ldi	r25, 0x8E	; 142
    13be:	87 2f       	mov	r24, r23
    13c0:	76 2f       	mov	r23, r22
    13c2:	05 c0       	rjmp	.+10     	; 0x13ce <__floatsisf+0x5e>
    13c4:	66 23       	and	r22, r22
    13c6:	71 f0       	breq	.+28     	; 0x13e4 <__floatsisf+0x74>
    13c8:	96 e8       	ldi	r25, 0x86	; 134
    13ca:	86 2f       	mov	r24, r22
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	2a f0       	brmi	.+10     	; 0x13dc <__floatsisf+0x6c>
    13d2:	9a 95       	dec	r25
    13d4:	66 0f       	add	r22, r22
    13d6:	77 1f       	adc	r23, r23
    13d8:	88 1f       	adc	r24, r24
    13da:	da f7       	brpl	.-10     	; 0x13d2 <__floatsisf+0x62>
    13dc:	88 0f       	add	r24, r24
    13de:	96 95       	lsr	r25
    13e0:	87 95       	ror	r24
    13e2:	97 f9       	bld	r25, 7
    13e4:	08 95       	ret

000013e6 <__fp_cmp>:
    13e6:	99 0f       	add	r25, r25
    13e8:	00 08       	sbc	r0, r0
    13ea:	55 0f       	add	r21, r21
    13ec:	aa 0b       	sbc	r26, r26
    13ee:	e0 e8       	ldi	r30, 0x80	; 128
    13f0:	fe ef       	ldi	r31, 0xFE	; 254
    13f2:	16 16       	cp	r1, r22
    13f4:	17 06       	cpc	r1, r23
    13f6:	e8 07       	cpc	r30, r24
    13f8:	f9 07       	cpc	r31, r25
    13fa:	c0 f0       	brcs	.+48     	; 0x142c <__fp_cmp+0x46>
    13fc:	12 16       	cp	r1, r18
    13fe:	13 06       	cpc	r1, r19
    1400:	e4 07       	cpc	r30, r20
    1402:	f5 07       	cpc	r31, r21
    1404:	98 f0       	brcs	.+38     	; 0x142c <__fp_cmp+0x46>
    1406:	62 1b       	sub	r22, r18
    1408:	73 0b       	sbc	r23, r19
    140a:	84 0b       	sbc	r24, r20
    140c:	95 0b       	sbc	r25, r21
    140e:	39 f4       	brne	.+14     	; 0x141e <__fp_cmp+0x38>
    1410:	0a 26       	eor	r0, r26
    1412:	61 f0       	breq	.+24     	; 0x142c <__fp_cmp+0x46>
    1414:	23 2b       	or	r18, r19
    1416:	24 2b       	or	r18, r20
    1418:	25 2b       	or	r18, r21
    141a:	21 f4       	brne	.+8      	; 0x1424 <__fp_cmp+0x3e>
    141c:	08 95       	ret
    141e:	0a 26       	eor	r0, r26
    1420:	09 f4       	brne	.+2      	; 0x1424 <__fp_cmp+0x3e>
    1422:	a1 40       	sbci	r26, 0x01	; 1
    1424:	a6 95       	lsr	r26
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	81 1d       	adc	r24, r1
    142a:	81 1d       	adc	r24, r1
    142c:	08 95       	ret

0000142e <__fp_inf>:
    142e:	97 f9       	bld	r25, 7
    1430:	9f 67       	ori	r25, 0x7F	; 127
    1432:	80 e8       	ldi	r24, 0x80	; 128
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	08 95       	ret

0000143a <__fp_nan>:
    143a:	9f ef       	ldi	r25, 0xFF	; 255
    143c:	80 ec       	ldi	r24, 0xC0	; 192
    143e:	08 95       	ret

00001440 <__fp_pscA>:
    1440:	00 24       	eor	r0, r0
    1442:	0a 94       	dec	r0
    1444:	16 16       	cp	r1, r22
    1446:	17 06       	cpc	r1, r23
    1448:	18 06       	cpc	r1, r24
    144a:	09 06       	cpc	r0, r25
    144c:	08 95       	ret

0000144e <__fp_pscB>:
    144e:	00 24       	eor	r0, r0
    1450:	0a 94       	dec	r0
    1452:	12 16       	cp	r1, r18
    1454:	13 06       	cpc	r1, r19
    1456:	14 06       	cpc	r1, r20
    1458:	05 06       	cpc	r0, r21
    145a:	08 95       	ret

0000145c <__fp_round>:
    145c:	09 2e       	mov	r0, r25
    145e:	03 94       	inc	r0
    1460:	00 0c       	add	r0, r0
    1462:	11 f4       	brne	.+4      	; 0x1468 <__fp_round+0xc>
    1464:	88 23       	and	r24, r24
    1466:	52 f0       	brmi	.+20     	; 0x147c <__fp_round+0x20>
    1468:	bb 0f       	add	r27, r27
    146a:	40 f4       	brcc	.+16     	; 0x147c <__fp_round+0x20>
    146c:	bf 2b       	or	r27, r31
    146e:	11 f4       	brne	.+4      	; 0x1474 <__fp_round+0x18>
    1470:	60 ff       	sbrs	r22, 0
    1472:	04 c0       	rjmp	.+8      	; 0x147c <__fp_round+0x20>
    1474:	6f 5f       	subi	r22, 0xFF	; 255
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f 4f       	sbci	r24, 0xFF	; 255
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	08 95       	ret

0000147e <__fp_split3>:
    147e:	57 fd       	sbrc	r21, 7
    1480:	90 58       	subi	r25, 0x80	; 128
    1482:	44 0f       	add	r20, r20
    1484:	55 1f       	adc	r21, r21
    1486:	59 f0       	breq	.+22     	; 0x149e <__fp_splitA+0x10>
    1488:	5f 3f       	cpi	r21, 0xFF	; 255
    148a:	71 f0       	breq	.+28     	; 0x14a8 <__fp_splitA+0x1a>
    148c:	47 95       	ror	r20

0000148e <__fp_splitA>:
    148e:	88 0f       	add	r24, r24
    1490:	97 fb       	bst	r25, 7
    1492:	99 1f       	adc	r25, r25
    1494:	61 f0       	breq	.+24     	; 0x14ae <__fp_splitA+0x20>
    1496:	9f 3f       	cpi	r25, 0xFF	; 255
    1498:	79 f0       	breq	.+30     	; 0x14b8 <__fp_splitA+0x2a>
    149a:	87 95       	ror	r24
    149c:	08 95       	ret
    149e:	12 16       	cp	r1, r18
    14a0:	13 06       	cpc	r1, r19
    14a2:	14 06       	cpc	r1, r20
    14a4:	55 1f       	adc	r21, r21
    14a6:	f2 cf       	rjmp	.-28     	; 0x148c <__fp_split3+0xe>
    14a8:	46 95       	lsr	r20
    14aa:	f1 df       	rcall	.-30     	; 0x148e <__fp_splitA>
    14ac:	08 c0       	rjmp	.+16     	; 0x14be <__fp_splitA+0x30>
    14ae:	16 16       	cp	r1, r22
    14b0:	17 06       	cpc	r1, r23
    14b2:	18 06       	cpc	r1, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	f1 cf       	rjmp	.-30     	; 0x149a <__fp_splitA+0xc>
    14b8:	86 95       	lsr	r24
    14ba:	71 05       	cpc	r23, r1
    14bc:	61 05       	cpc	r22, r1
    14be:	08 94       	sec
    14c0:	08 95       	ret

000014c2 <__fp_zero>:
    14c2:	e8 94       	clt

000014c4 <__fp_szero>:
    14c4:	bb 27       	eor	r27, r27
    14c6:	66 27       	eor	r22, r22
    14c8:	77 27       	eor	r23, r23
    14ca:	cb 01       	movw	r24, r22
    14cc:	97 f9       	bld	r25, 7
    14ce:	08 95       	ret

000014d0 <__gesf2>:
    14d0:	8a df       	rcall	.-236    	; 0x13e6 <__fp_cmp>
    14d2:	08 f4       	brcc	.+2      	; 0x14d6 <__gesf2+0x6>
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	08 95       	ret

000014d8 <__mulsf3>:
    14d8:	0a d0       	rcall	.+20     	; 0x14ee <__mulsf3x>
    14da:	c0 cf       	rjmp	.-128    	; 0x145c <__fp_round>
    14dc:	b1 df       	rcall	.-158    	; 0x1440 <__fp_pscA>
    14de:	28 f0       	brcs	.+10     	; 0x14ea <__mulsf3+0x12>
    14e0:	b6 df       	rcall	.-148    	; 0x144e <__fp_pscB>
    14e2:	18 f0       	brcs	.+6      	; 0x14ea <__mulsf3+0x12>
    14e4:	95 23       	and	r25, r21
    14e6:	09 f0       	breq	.+2      	; 0x14ea <__mulsf3+0x12>
    14e8:	a2 cf       	rjmp	.-188    	; 0x142e <__fp_inf>
    14ea:	a7 cf       	rjmp	.-178    	; 0x143a <__fp_nan>
    14ec:	eb cf       	rjmp	.-42     	; 0x14c4 <__fp_szero>

000014ee <__mulsf3x>:
    14ee:	c7 df       	rcall	.-114    	; 0x147e <__fp_split3>
    14f0:	a8 f3       	brcs	.-22     	; 0x14dc <__mulsf3+0x4>

000014f2 <__mulsf3_pse>:
    14f2:	99 23       	and	r25, r25
    14f4:	d9 f3       	breq	.-10     	; 0x14ec <__mulsf3+0x14>
    14f6:	55 23       	and	r21, r21
    14f8:	c9 f3       	breq	.-14     	; 0x14ec <__mulsf3+0x14>
    14fa:	95 0f       	add	r25, r21
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	55 1f       	adc	r21, r21
    1500:	aa 27       	eor	r26, r26
    1502:	ee 27       	eor	r30, r30
    1504:	ff 27       	eor	r31, r31
    1506:	bb 27       	eor	r27, r27
    1508:	00 24       	eor	r0, r0
    150a:	08 94       	sec
    150c:	67 95       	ror	r22
    150e:	20 f4       	brcc	.+8      	; 0x1518 <__mulsf3_pse+0x26>
    1510:	e2 0f       	add	r30, r18
    1512:	f3 1f       	adc	r31, r19
    1514:	b4 1f       	adc	r27, r20
    1516:	0a 1e       	adc	r0, r26
    1518:	22 0f       	add	r18, r18
    151a:	33 1f       	adc	r19, r19
    151c:	44 1f       	adc	r20, r20
    151e:	aa 1f       	adc	r26, r26
    1520:	66 95       	lsr	r22
    1522:	a9 f7       	brne	.-22     	; 0x150e <__mulsf3_pse+0x1c>
    1524:	77 95       	ror	r23
    1526:	30 f4       	brcc	.+12     	; 0x1534 <__mulsf3_pse+0x42>
    1528:	f3 0f       	add	r31, r19
    152a:	b4 1f       	adc	r27, r20
    152c:	0a 1e       	adc	r0, r26
    152e:	12 1e       	adc	r1, r18
    1530:	08 f4       	brcc	.+2      	; 0x1534 <__mulsf3_pse+0x42>
    1532:	63 95       	inc	r22
    1534:	33 0f       	add	r19, r19
    1536:	44 1f       	adc	r20, r20
    1538:	aa 1f       	adc	r26, r26
    153a:	22 1f       	adc	r18, r18
    153c:	76 95       	lsr	r23
    153e:	99 f7       	brne	.-26     	; 0x1526 <__mulsf3_pse+0x34>
    1540:	87 95       	ror	r24
    1542:	20 f4       	brcc	.+8      	; 0x154c <__mulsf3_pse+0x5a>
    1544:	b4 0f       	add	r27, r20
    1546:	0a 1e       	adc	r0, r26
    1548:	12 1e       	adc	r1, r18
    154a:	63 1f       	adc	r22, r19
    154c:	44 0f       	add	r20, r20
    154e:	aa 1f       	adc	r26, r26
    1550:	22 1f       	adc	r18, r18
    1552:	33 1f       	adc	r19, r19
    1554:	86 95       	lsr	r24
    1556:	a9 f7       	brne	.-22     	; 0x1542 <__mulsf3_pse+0x50>
    1558:	86 2f       	mov	r24, r22
    155a:	71 2d       	mov	r23, r1
    155c:	60 2d       	mov	r22, r0
    155e:	11 24       	eor	r1, r1
    1560:	9f 57       	subi	r25, 0x7F	; 127
    1562:	50 40       	sbci	r21, 0x00	; 0
    1564:	8a f0       	brmi	.+34     	; 0x1588 <__mulsf3_pse+0x96>
    1566:	e1 f0       	breq	.+56     	; 0x15a0 <__mulsf3_pse+0xae>
    1568:	88 23       	and	r24, r24
    156a:	4a f0       	brmi	.+18     	; 0x157e <__mulsf3_pse+0x8c>
    156c:	ee 0f       	add	r30, r30
    156e:	ff 1f       	adc	r31, r31
    1570:	bb 1f       	adc	r27, r27
    1572:	66 1f       	adc	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	91 50       	subi	r25, 0x01	; 1
    157a:	50 40       	sbci	r21, 0x00	; 0
    157c:	a9 f7       	brne	.-22     	; 0x1568 <__mulsf3_pse+0x76>
    157e:	9e 3f       	cpi	r25, 0xFE	; 254
    1580:	51 05       	cpc	r21, r1
    1582:	70 f0       	brcs	.+28     	; 0x15a0 <__mulsf3_pse+0xae>
    1584:	54 cf       	rjmp	.-344    	; 0x142e <__fp_inf>
    1586:	9e cf       	rjmp	.-196    	; 0x14c4 <__fp_szero>
    1588:	5f 3f       	cpi	r21, 0xFF	; 255
    158a:	ec f3       	brlt	.-6      	; 0x1586 <__mulsf3_pse+0x94>
    158c:	98 3e       	cpi	r25, 0xE8	; 232
    158e:	dc f3       	brlt	.-10     	; 0x1586 <__mulsf3_pse+0x94>
    1590:	86 95       	lsr	r24
    1592:	77 95       	ror	r23
    1594:	67 95       	ror	r22
    1596:	b7 95       	ror	r27
    1598:	f7 95       	ror	r31
    159a:	e7 95       	ror	r30
    159c:	9f 5f       	subi	r25, 0xFF	; 255
    159e:	c1 f7       	brne	.-16     	; 0x1590 <__mulsf3_pse+0x9e>
    15a0:	fe 2b       	or	r31, r30
    15a2:	88 0f       	add	r24, r24
    15a4:	91 1d       	adc	r25, r1
    15a6:	96 95       	lsr	r25
    15a8:	87 95       	ror	r24
    15aa:	97 f9       	bld	r25, 7
    15ac:	08 95       	ret

000015ae <pow>:
    15ae:	fa 01       	movw	r30, r20
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	30 96       	adiw	r30, 0x00	; 0
    15b6:	21 05       	cpc	r18, r1
    15b8:	31 05       	cpc	r19, r1
    15ba:	99 f1       	breq	.+102    	; 0x1622 <pow+0x74>
    15bc:	61 15       	cp	r22, r1
    15be:	71 05       	cpc	r23, r1
    15c0:	61 f4       	brne	.+24     	; 0x15da <pow+0x2c>
    15c2:	80 38       	cpi	r24, 0x80	; 128
    15c4:	bf e3       	ldi	r27, 0x3F	; 63
    15c6:	9b 07       	cpc	r25, r27
    15c8:	49 f1       	breq	.+82     	; 0x161c <pow+0x6e>
    15ca:	68 94       	set
    15cc:	90 38       	cpi	r25, 0x80	; 128
    15ce:	81 05       	cpc	r24, r1
    15d0:	61 f0       	breq	.+24     	; 0x15ea <pow+0x3c>
    15d2:	80 38       	cpi	r24, 0x80	; 128
    15d4:	bf ef       	ldi	r27, 0xFF	; 255
    15d6:	9b 07       	cpc	r25, r27
    15d8:	41 f0       	breq	.+16     	; 0x15ea <pow+0x3c>
    15da:	99 23       	and	r25, r25
    15dc:	42 f5       	brpl	.+80     	; 0x162e <pow+0x80>
    15de:	ff 3f       	cpi	r31, 0xFF	; 255
    15e0:	e1 05       	cpc	r30, r1
    15e2:	31 05       	cpc	r19, r1
    15e4:	21 05       	cpc	r18, r1
    15e6:	11 f1       	breq	.+68     	; 0x162c <pow+0x7e>
    15e8:	e8 94       	clt
    15ea:	08 94       	sec
    15ec:	e7 95       	ror	r30
    15ee:	d9 01       	movw	r26, r18
    15f0:	aa 23       	and	r26, r26
    15f2:	29 f4       	brne	.+10     	; 0x15fe <pow+0x50>
    15f4:	ab 2f       	mov	r26, r27
    15f6:	be 2f       	mov	r27, r30
    15f8:	f8 5f       	subi	r31, 0xF8	; 248
    15fa:	d0 f3       	brcs	.-12     	; 0x15f0 <pow+0x42>
    15fc:	10 c0       	rjmp	.+32     	; 0x161e <pow+0x70>
    15fe:	ff 5f       	subi	r31, 0xFF	; 255
    1600:	70 f4       	brcc	.+28     	; 0x161e <pow+0x70>
    1602:	a6 95       	lsr	r26
    1604:	e0 f7       	brcc	.-8      	; 0x15fe <pow+0x50>
    1606:	f7 39       	cpi	r31, 0x97	; 151
    1608:	50 f0       	brcs	.+20     	; 0x161e <pow+0x70>
    160a:	19 f0       	breq	.+6      	; 0x1612 <pow+0x64>
    160c:	ff 3a       	cpi	r31, 0xAF	; 175
    160e:	38 f4       	brcc	.+14     	; 0x161e <pow+0x70>
    1610:	9f 77       	andi	r25, 0x7F	; 127
    1612:	9f 93       	push	r25
    1614:	0c d0       	rcall	.+24     	; 0x162e <pow+0x80>
    1616:	0f 90       	pop	r0
    1618:	07 fc       	sbrc	r0, 7
    161a:	90 58       	subi	r25, 0x80	; 128
    161c:	08 95       	ret
    161e:	3e f0       	brts	.+14     	; 0x162e <pow+0x80>
    1620:	0c cf       	rjmp	.-488    	; 0x143a <__fp_nan>
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	80 e8       	ldi	r24, 0x80	; 128
    1628:	9f e3       	ldi	r25, 0x3F	; 63
    162a:	08 95       	ret
    162c:	4f e7       	ldi	r20, 0x7F	; 127
    162e:	9f 77       	andi	r25, 0x7F	; 127
    1630:	5f 93       	push	r21
    1632:	4f 93       	push	r20
    1634:	3f 93       	push	r19
    1636:	2f 93       	push	r18
    1638:	9e d0       	rcall	.+316    	; 0x1776 <log>
    163a:	2f 91       	pop	r18
    163c:	3f 91       	pop	r19
    163e:	4f 91       	pop	r20
    1640:	5f 91       	pop	r21
    1642:	4a df       	rcall	.-364    	; 0x14d8 <__mulsf3>
    1644:	05 c0       	rjmp	.+10     	; 0x1650 <exp>
    1646:	19 f4       	brne	.+6      	; 0x164e <pow+0xa0>
    1648:	0e f0       	brts	.+2      	; 0x164c <pow+0x9e>
    164a:	f1 ce       	rjmp	.-542    	; 0x142e <__fp_inf>
    164c:	3a cf       	rjmp	.-396    	; 0x14c2 <__fp_zero>
    164e:	f5 ce       	rjmp	.-534    	; 0x143a <__fp_nan>

00001650 <exp>:
    1650:	1e df       	rcall	.-452    	; 0x148e <__fp_splitA>
    1652:	c8 f3       	brcs	.-14     	; 0x1646 <pow+0x98>
    1654:	96 38       	cpi	r25, 0x86	; 134
    1656:	c0 f7       	brcc	.-16     	; 0x1648 <pow+0x9a>
    1658:	07 f8       	bld	r0, 7
    165a:	0f 92       	push	r0
    165c:	e8 94       	clt
    165e:	2b e3       	ldi	r18, 0x3B	; 59
    1660:	3a ea       	ldi	r19, 0xAA	; 170
    1662:	48 eb       	ldi	r20, 0xB8	; 184
    1664:	5f e7       	ldi	r21, 0x7F	; 127
    1666:	45 df       	rcall	.-374    	; 0x14f2 <__mulsf3_pse>
    1668:	0f 92       	push	r0
    166a:	0f 92       	push	r0
    166c:	0f 92       	push	r0
    166e:	4d b7       	in	r20, 0x3d	; 61
    1670:	5e b7       	in	r21, 0x3e	; 62
    1672:	0f 92       	push	r0
    1674:	c0 d0       	rcall	.+384    	; 0x17f6 <modf>
    1676:	e6 e2       	ldi	r30, 0x26	; 38
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	16 d0       	rcall	.+44     	; 0x16a8 <__fp_powser>
    167c:	4f 91       	pop	r20
    167e:	5f 91       	pop	r21
    1680:	ef 91       	pop	r30
    1682:	ff 91       	pop	r31
    1684:	e5 95       	asr	r30
    1686:	ee 1f       	adc	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	49 f0       	breq	.+18     	; 0x169e <exp+0x4e>
    168c:	fe 57       	subi	r31, 0x7E	; 126
    168e:	e0 68       	ori	r30, 0x80	; 128
    1690:	44 27       	eor	r20, r20
    1692:	ee 0f       	add	r30, r30
    1694:	44 1f       	adc	r20, r20
    1696:	fa 95       	dec	r31
    1698:	e1 f7       	brne	.-8      	; 0x1692 <exp+0x42>
    169a:	41 95       	neg	r20
    169c:	55 0b       	sbc	r21, r21
    169e:	32 d0       	rcall	.+100    	; 0x1704 <ldexp>
    16a0:	0f 90       	pop	r0
    16a2:	07 fe       	sbrs	r0, 7
    16a4:	26 c0       	rjmp	.+76     	; 0x16f2 <inverse>
    16a6:	08 95       	ret

000016a8 <__fp_powser>:
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	1f 93       	push	r17
    16ae:	0f 93       	push	r16
    16b0:	ff 92       	push	r15
    16b2:	ef 92       	push	r14
    16b4:	df 92       	push	r13
    16b6:	7b 01       	movw	r14, r22
    16b8:	8c 01       	movw	r16, r24
    16ba:	68 94       	set
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <__fp_powser+0x20>
    16be:	da 2e       	mov	r13, r26
    16c0:	ef 01       	movw	r28, r30
    16c2:	15 df       	rcall	.-470    	; 0x14ee <__mulsf3x>
    16c4:	fe 01       	movw	r30, r28
    16c6:	e8 94       	clt
    16c8:	a5 91       	lpm	r26, Z+
    16ca:	25 91       	lpm	r18, Z+
    16cc:	35 91       	lpm	r19, Z+
    16ce:	45 91       	lpm	r20, Z+
    16d0:	55 91       	lpm	r21, Z+
    16d2:	ae f3       	brts	.-22     	; 0x16be <__fp_powser+0x16>
    16d4:	ef 01       	movw	r28, r30
    16d6:	5a dd       	rcall	.-1356   	; 0x118c <__addsf3x>
    16d8:	fe 01       	movw	r30, r28
    16da:	97 01       	movw	r18, r14
    16dc:	a8 01       	movw	r20, r16
    16de:	da 94       	dec	r13
    16e0:	79 f7       	brne	.-34     	; 0x16c0 <__fp_powser+0x18>
    16e2:	df 90       	pop	r13
    16e4:	ef 90       	pop	r14
    16e6:	ff 90       	pop	r15
    16e8:	0f 91       	pop	r16
    16ea:	1f 91       	pop	r17
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <inverse>:
    16f2:	9b 01       	movw	r18, r22
    16f4:	ac 01       	movw	r20, r24
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	80 e8       	ldi	r24, 0x80	; 128
    16fc:	9f e3       	ldi	r25, 0x3F	; 63
    16fe:	9d cd       	rjmp	.-1222   	; 0x123a <__divsf3>
    1700:	96 ce       	rjmp	.-724    	; 0x142e <__fp_inf>
    1702:	ac c0       	rjmp	.+344    	; 0x185c <__fp_mpack>

00001704 <ldexp>:
    1704:	c4 de       	rcall	.-632    	; 0x148e <__fp_splitA>
    1706:	e8 f3       	brcs	.-6      	; 0x1702 <inverse+0x10>
    1708:	99 23       	and	r25, r25
    170a:	d9 f3       	breq	.-10     	; 0x1702 <inverse+0x10>
    170c:	94 0f       	add	r25, r20
    170e:	51 1d       	adc	r21, r1
    1710:	bb f3       	brvs	.-18     	; 0x1700 <inverse+0xe>
    1712:	91 50       	subi	r25, 0x01	; 1
    1714:	50 40       	sbci	r21, 0x00	; 0
    1716:	94 f0       	brlt	.+36     	; 0x173c <ldexp+0x38>
    1718:	59 f0       	breq	.+22     	; 0x1730 <ldexp+0x2c>
    171a:	88 23       	and	r24, r24
    171c:	32 f0       	brmi	.+12     	; 0x172a <ldexp+0x26>
    171e:	66 0f       	add	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	88 1f       	adc	r24, r24
    1724:	91 50       	subi	r25, 0x01	; 1
    1726:	50 40       	sbci	r21, 0x00	; 0
    1728:	c1 f7       	brne	.-16     	; 0x171a <ldexp+0x16>
    172a:	9e 3f       	cpi	r25, 0xFE	; 254
    172c:	51 05       	cpc	r21, r1
    172e:	44 f7       	brge	.-48     	; 0x1700 <inverse+0xe>
    1730:	88 0f       	add	r24, r24
    1732:	91 1d       	adc	r25, r1
    1734:	96 95       	lsr	r25
    1736:	87 95       	ror	r24
    1738:	97 f9       	bld	r25, 7
    173a:	08 95       	ret
    173c:	5f 3f       	cpi	r21, 0xFF	; 255
    173e:	ac f0       	brlt	.+42     	; 0x176a <ldexp+0x66>
    1740:	98 3e       	cpi	r25, 0xE8	; 232
    1742:	9c f0       	brlt	.+38     	; 0x176a <ldexp+0x66>
    1744:	bb 27       	eor	r27, r27
    1746:	86 95       	lsr	r24
    1748:	77 95       	ror	r23
    174a:	67 95       	ror	r22
    174c:	b7 95       	ror	r27
    174e:	08 f4       	brcc	.+2      	; 0x1752 <ldexp+0x4e>
    1750:	b1 60       	ori	r27, 0x01	; 1
    1752:	93 95       	inc	r25
    1754:	c1 f7       	brne	.-16     	; 0x1746 <ldexp+0x42>
    1756:	bb 0f       	add	r27, r27
    1758:	58 f7       	brcc	.-42     	; 0x1730 <ldexp+0x2c>
    175a:	11 f4       	brne	.+4      	; 0x1760 <ldexp+0x5c>
    175c:	60 ff       	sbrs	r22, 0
    175e:	e8 cf       	rjmp	.-48     	; 0x1730 <ldexp+0x2c>
    1760:	6f 5f       	subi	r22, 0xFF	; 255
    1762:	7f 4f       	sbci	r23, 0xFF	; 255
    1764:	8f 4f       	sbci	r24, 0xFF	; 255
    1766:	9f 4f       	sbci	r25, 0xFF	; 255
    1768:	e3 cf       	rjmp	.-58     	; 0x1730 <ldexp+0x2c>
    176a:	ac ce       	rjmp	.-680    	; 0x14c4 <__fp_szero>
    176c:	0e f0       	brts	.+2      	; 0x1770 <ldexp+0x6c>
    176e:	76 c0       	rjmp	.+236    	; 0x185c <__fp_mpack>
    1770:	64 ce       	rjmp	.-824    	; 0x143a <__fp_nan>
    1772:	68 94       	set
    1774:	5c ce       	rjmp	.-840    	; 0x142e <__fp_inf>

00001776 <log>:
    1776:	8b de       	rcall	.-746    	; 0x148e <__fp_splitA>
    1778:	c8 f3       	brcs	.-14     	; 0x176c <ldexp+0x68>
    177a:	99 23       	and	r25, r25
    177c:	d1 f3       	breq	.-12     	; 0x1772 <ldexp+0x6e>
    177e:	c6 f3       	brts	.-16     	; 0x1770 <ldexp+0x6c>
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	1f 93       	push	r17
    1786:	0f 93       	push	r16
    1788:	ff 92       	push	r15
    178a:	c9 2f       	mov	r28, r25
    178c:	dd 27       	eor	r29, r29
    178e:	88 23       	and	r24, r24
    1790:	2a f0       	brmi	.+10     	; 0x179c <log+0x26>
    1792:	21 97       	sbiw	r28, 0x01	; 1
    1794:	66 0f       	add	r22, r22
    1796:	77 1f       	adc	r23, r23
    1798:	88 1f       	adc	r24, r24
    179a:	da f7       	brpl	.-10     	; 0x1792 <log+0x1c>
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f eb       	ldi	r21, 0xBF	; 191
    17a4:	9f e3       	ldi	r25, 0x3F	; 63
    17a6:	88 39       	cpi	r24, 0x98	; 152
    17a8:	20 f0       	brcs	.+8      	; 0x17b2 <log+0x3c>
    17aa:	80 3e       	cpi	r24, 0xE0	; 224
    17ac:	30 f0       	brcs	.+12     	; 0x17ba <log+0x44>
    17ae:	21 96       	adiw	r28, 0x01	; 1
    17b0:	8f 77       	andi	r24, 0x7F	; 127
    17b2:	db dc       	rcall	.-1610   	; 0x116a <__addsf3>
    17b4:	ee e4       	ldi	r30, 0x4E	; 78
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	03 c0       	rjmp	.+6      	; 0x17c0 <log+0x4a>
    17ba:	d7 dc       	rcall	.-1618   	; 0x116a <__addsf3>
    17bc:	eb e7       	ldi	r30, 0x7B	; 123
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	73 df       	rcall	.-282    	; 0x16a8 <__fp_powser>
    17c2:	8b 01       	movw	r16, r22
    17c4:	be 01       	movw	r22, r28
    17c6:	ec 01       	movw	r28, r24
    17c8:	fb 2e       	mov	r15, r27
    17ca:	6f 57       	subi	r22, 0x7F	; 127
    17cc:	71 09       	sbc	r23, r1
    17ce:	75 95       	asr	r23
    17d0:	77 1f       	adc	r23, r23
    17d2:	88 0b       	sbc	r24, r24
    17d4:	99 0b       	sbc	r25, r25
    17d6:	cc dd       	rcall	.-1128   	; 0x1370 <__floatsisf>
    17d8:	28 e1       	ldi	r18, 0x18	; 24
    17da:	32 e7       	ldi	r19, 0x72	; 114
    17dc:	41 e3       	ldi	r20, 0x31	; 49
    17de:	5f e3       	ldi	r21, 0x3F	; 63
    17e0:	86 de       	rcall	.-756    	; 0x14ee <__mulsf3x>
    17e2:	af 2d       	mov	r26, r15
    17e4:	98 01       	movw	r18, r16
    17e6:	ae 01       	movw	r20, r28
    17e8:	ff 90       	pop	r15
    17ea:	0f 91       	pop	r16
    17ec:	1f 91       	pop	r17
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	cc dc       	rcall	.-1640   	; 0x118c <__addsf3x>
    17f4:	33 ce       	rjmp	.-922    	; 0x145c <__fp_round>

000017f6 <modf>:
    17f6:	fa 01       	movw	r30, r20
    17f8:	dc 01       	movw	r26, r24
    17fa:	aa 0f       	add	r26, r26
    17fc:	bb 1f       	adc	r27, r27
    17fe:	9b 01       	movw	r18, r22
    1800:	ac 01       	movw	r20, r24
    1802:	bf 57       	subi	r27, 0x7F	; 127
    1804:	28 f4       	brcc	.+10     	; 0x1810 <modf+0x1a>
    1806:	22 27       	eor	r18, r18
    1808:	33 27       	eor	r19, r19
    180a:	44 27       	eor	r20, r20
    180c:	50 78       	andi	r21, 0x80	; 128
    180e:	1f c0       	rjmp	.+62     	; 0x184e <modf+0x58>
    1810:	b7 51       	subi	r27, 0x17	; 23
    1812:	88 f4       	brcc	.+34     	; 0x1836 <modf+0x40>
    1814:	ab 2f       	mov	r26, r27
    1816:	00 24       	eor	r0, r0
    1818:	46 95       	lsr	r20
    181a:	37 95       	ror	r19
    181c:	27 95       	ror	r18
    181e:	01 1c       	adc	r0, r1
    1820:	a3 95       	inc	r26
    1822:	d2 f3       	brmi	.-12     	; 0x1818 <modf+0x22>
    1824:	00 20       	and	r0, r0
    1826:	69 f0       	breq	.+26     	; 0x1842 <modf+0x4c>
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	44 1f       	adc	r20, r20
    182e:	b3 95       	inc	r27
    1830:	da f3       	brmi	.-10     	; 0x1828 <modf+0x32>
    1832:	0d d0       	rcall	.+26     	; 0x184e <modf+0x58>
    1834:	99 cc       	rjmp	.-1742   	; 0x1168 <__subsf3>
    1836:	61 30       	cpi	r22, 0x01	; 1
    1838:	71 05       	cpc	r23, r1
    183a:	a0 e8       	ldi	r26, 0x80	; 128
    183c:	8a 07       	cpc	r24, r26
    183e:	b9 46       	sbci	r27, 0x69	; 105
    1840:	30 f4       	brcc	.+12     	; 0x184e <modf+0x58>
    1842:	9b 01       	movw	r18, r22
    1844:	ac 01       	movw	r20, r24
    1846:	66 27       	eor	r22, r22
    1848:	77 27       	eor	r23, r23
    184a:	88 27       	eor	r24, r24
    184c:	90 78       	andi	r25, 0x80	; 128
    184e:	30 96       	adiw	r30, 0x00	; 0
    1850:	21 f0       	breq	.+8      	; 0x185a <modf+0x64>
    1852:	20 83       	st	Z, r18
    1854:	31 83       	std	Z+1, r19	; 0x01
    1856:	42 83       	std	Z+2, r20	; 0x02
    1858:	53 83       	std	Z+3, r21	; 0x03
    185a:	08 95       	ret

0000185c <__fp_mpack>:
    185c:	9f 3f       	cpi	r25, 0xFF	; 255
    185e:	31 f0       	breq	.+12     	; 0x186c <__fp_mpack_finite+0xc>

00001860 <__fp_mpack_finite>:
    1860:	91 50       	subi	r25, 0x01	; 1
    1862:	20 f4       	brcc	.+8      	; 0x186c <__fp_mpack_finite+0xc>
    1864:	87 95       	ror	r24
    1866:	77 95       	ror	r23
    1868:	67 95       	ror	r22
    186a:	b7 95       	ror	r27
    186c:	88 0f       	add	r24, r24
    186e:	91 1d       	adc	r25, r1
    1870:	96 95       	lsr	r25
    1872:	87 95       	ror	r24
    1874:	97 f9       	bld	r25, 7
    1876:	08 95       	ret

00001878 <__mulhi3>:
    1878:	00 24       	eor	r0, r0
    187a:	55 27       	eor	r21, r21
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <__mulhi3+0xe>
    187e:	08 0e       	add	r0, r24
    1880:	59 1f       	adc	r21, r25
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	29 f0       	breq	.+10     	; 0x1894 <__mulhi3+0x1c>
    188a:	76 95       	lsr	r23
    188c:	67 95       	ror	r22
    188e:	b8 f3       	brcs	.-18     	; 0x187e <__mulhi3+0x6>
    1890:	71 05       	cpc	r23, r1
    1892:	b9 f7       	brne	.-18     	; 0x1882 <__mulhi3+0xa>
    1894:	80 2d       	mov	r24, r0
    1896:	95 2f       	mov	r25, r21
    1898:	08 95       	ret

0000189a <__mulsi3>:
    189a:	ee 27       	eor	r30, r30
    189c:	ff 27       	eor	r31, r31

0000189e <__mulsi3_helper>:
    189e:	aa 27       	eor	r26, r26
    18a0:	bb 27       	eor	r27, r27
    18a2:	08 c0       	rjmp	.+16     	; 0x18b4 <__mulsi3_helper+0x16>
    18a4:	a2 0f       	add	r26, r18
    18a6:	b3 1f       	adc	r27, r19
    18a8:	e4 1f       	adc	r30, r20
    18aa:	f5 1f       	adc	r31, r21
    18ac:	22 0f       	add	r18, r18
    18ae:	33 1f       	adc	r19, r19
    18b0:	44 1f       	adc	r20, r20
    18b2:	55 1f       	adc	r21, r21
    18b4:	96 95       	lsr	r25
    18b6:	87 95       	ror	r24
    18b8:	77 95       	ror	r23
    18ba:	67 95       	ror	r22
    18bc:	98 f3       	brcs	.-26     	; 0x18a4 <__mulsi3_helper+0x6>
    18be:	70 40       	sbci	r23, 0x00	; 0
    18c0:	a9 f7       	brne	.-22     	; 0x18ac <__mulsi3_helper+0xe>
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	99 f7       	brne	.-26     	; 0x18ac <__mulsi3_helper+0xe>
    18c6:	bd 01       	movw	r22, r26
    18c8:	cf 01       	movw	r24, r30
    18ca:	08 95       	ret

000018cc <__udivmodqi4>:
    18cc:	99 1b       	sub	r25, r25
    18ce:	79 e0       	ldi	r23, 0x09	; 9
    18d0:	04 c0       	rjmp	.+8      	; 0x18da <__udivmodqi4_ep>

000018d2 <__udivmodqi4_loop>:
    18d2:	99 1f       	adc	r25, r25
    18d4:	96 17       	cp	r25, r22
    18d6:	08 f0       	brcs	.+2      	; 0x18da <__udivmodqi4_ep>
    18d8:	96 1b       	sub	r25, r22

000018da <__udivmodqi4_ep>:
    18da:	88 1f       	adc	r24, r24
    18dc:	7a 95       	dec	r23
    18de:	c9 f7       	brne	.-14     	; 0x18d2 <__udivmodqi4_loop>
    18e0:	80 95       	com	r24
    18e2:	08 95       	ret

000018e4 <__divmodqi4>:
    18e4:	87 fb       	bst	r24, 7
    18e6:	08 2e       	mov	r0, r24
    18e8:	06 26       	eor	r0, r22
    18ea:	87 fd       	sbrc	r24, 7
    18ec:	81 95       	neg	r24
    18ee:	67 fd       	sbrc	r22, 7
    18f0:	61 95       	neg	r22
    18f2:	ec df       	rcall	.-40     	; 0x18cc <__udivmodqi4>
    18f4:	0e f4       	brtc	.+2      	; 0x18f8 <__divmodqi4_1>
    18f6:	91 95       	neg	r25

000018f8 <__divmodqi4_1>:
    18f8:	07 fc       	sbrc	r0, 7
    18fa:	81 95       	neg	r24

000018fc <__divmodqi4_exit>:
    18fc:	08 95       	ret

000018fe <__divmodhi4>:
    18fe:	97 fb       	bst	r25, 7
    1900:	07 2e       	mov	r0, r23
    1902:	16 f4       	brtc	.+4      	; 0x1908 <__divmodhi4+0xa>
    1904:	00 94       	com	r0
    1906:	06 d0       	rcall	.+12     	; 0x1914 <__divmodhi4_neg1>
    1908:	77 fd       	sbrc	r23, 7
    190a:	08 d0       	rcall	.+16     	; 0x191c <__divmodhi4_neg2>
    190c:	27 d0       	rcall	.+78     	; 0x195c <__udivmodhi4>
    190e:	07 fc       	sbrc	r0, 7
    1910:	05 d0       	rcall	.+10     	; 0x191c <__divmodhi4_neg2>
    1912:	3e f4       	brtc	.+14     	; 0x1922 <__divmodhi4_exit>

00001914 <__divmodhi4_neg1>:
    1914:	90 95       	com	r25
    1916:	81 95       	neg	r24
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	08 95       	ret

0000191c <__divmodhi4_neg2>:
    191c:	70 95       	com	r23
    191e:	61 95       	neg	r22
    1920:	7f 4f       	sbci	r23, 0xFF	; 255

00001922 <__divmodhi4_exit>:
    1922:	08 95       	ret

00001924 <__divmodsi4>:
    1924:	05 2e       	mov	r0, r21
    1926:	97 fb       	bst	r25, 7
    1928:	16 f4       	brtc	.+4      	; 0x192e <__divmodsi4+0xa>
    192a:	00 94       	com	r0
    192c:	0f d0       	rcall	.+30     	; 0x194c <__negsi2>
    192e:	57 fd       	sbrc	r21, 7
    1930:	05 d0       	rcall	.+10     	; 0x193c <__divmodsi4_neg2>
    1932:	28 d0       	rcall	.+80     	; 0x1984 <__udivmodsi4>
    1934:	07 fc       	sbrc	r0, 7
    1936:	02 d0       	rcall	.+4      	; 0x193c <__divmodsi4_neg2>
    1938:	46 f4       	brtc	.+16     	; 0x194a <__divmodsi4_exit>
    193a:	08 c0       	rjmp	.+16     	; 0x194c <__negsi2>

0000193c <__divmodsi4_neg2>:
    193c:	50 95       	com	r21
    193e:	40 95       	com	r20
    1940:	30 95       	com	r19
    1942:	21 95       	neg	r18
    1944:	3f 4f       	sbci	r19, 0xFF	; 255
    1946:	4f 4f       	sbci	r20, 0xFF	; 255
    1948:	5f 4f       	sbci	r21, 0xFF	; 255

0000194a <__divmodsi4_exit>:
    194a:	08 95       	ret

0000194c <__negsi2>:
    194c:	90 95       	com	r25
    194e:	80 95       	com	r24
    1950:	70 95       	com	r23
    1952:	61 95       	neg	r22
    1954:	7f 4f       	sbci	r23, 0xFF	; 255
    1956:	8f 4f       	sbci	r24, 0xFF	; 255
    1958:	9f 4f       	sbci	r25, 0xFF	; 255
    195a:	08 95       	ret

0000195c <__udivmodhi4>:
    195c:	aa 1b       	sub	r26, r26
    195e:	bb 1b       	sub	r27, r27
    1960:	51 e1       	ldi	r21, 0x11	; 17
    1962:	07 c0       	rjmp	.+14     	; 0x1972 <__udivmodhi4_ep>

00001964 <__udivmodhi4_loop>:
    1964:	aa 1f       	adc	r26, r26
    1966:	bb 1f       	adc	r27, r27
    1968:	a6 17       	cp	r26, r22
    196a:	b7 07       	cpc	r27, r23
    196c:	10 f0       	brcs	.+4      	; 0x1972 <__udivmodhi4_ep>
    196e:	a6 1b       	sub	r26, r22
    1970:	b7 0b       	sbc	r27, r23

00001972 <__udivmodhi4_ep>:
    1972:	88 1f       	adc	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	5a 95       	dec	r21
    1978:	a9 f7       	brne	.-22     	; 0x1964 <__udivmodhi4_loop>
    197a:	80 95       	com	r24
    197c:	90 95       	com	r25
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	08 95       	ret

00001984 <__udivmodsi4>:
    1984:	a1 e2       	ldi	r26, 0x21	; 33
    1986:	1a 2e       	mov	r1, r26
    1988:	aa 1b       	sub	r26, r26
    198a:	bb 1b       	sub	r27, r27
    198c:	fd 01       	movw	r30, r26
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <__udivmodsi4_ep>

00001990 <__udivmodsi4_loop>:
    1990:	aa 1f       	adc	r26, r26
    1992:	bb 1f       	adc	r27, r27
    1994:	ee 1f       	adc	r30, r30
    1996:	ff 1f       	adc	r31, r31
    1998:	a2 17       	cp	r26, r18
    199a:	b3 07       	cpc	r27, r19
    199c:	e4 07       	cpc	r30, r20
    199e:	f5 07       	cpc	r31, r21
    19a0:	20 f0       	brcs	.+8      	; 0x19aa <__udivmodsi4_ep>
    19a2:	a2 1b       	sub	r26, r18
    19a4:	b3 0b       	sbc	r27, r19
    19a6:	e4 0b       	sbc	r30, r20
    19a8:	f5 0b       	sbc	r31, r21

000019aa <__udivmodsi4_ep>:
    19aa:	66 1f       	adc	r22, r22
    19ac:	77 1f       	adc	r23, r23
    19ae:	88 1f       	adc	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	1a 94       	dec	r1
    19b4:	69 f7       	brne	.-38     	; 0x1990 <__udivmodsi4_loop>
    19b6:	60 95       	com	r22
    19b8:	70 95       	com	r23
    19ba:	80 95       	com	r24
    19bc:	90 95       	com	r25
    19be:	9b 01       	movw	r18, r22
    19c0:	ac 01       	movw	r20, r24
    19c2:	bd 01       	movw	r22, r26
    19c4:	cf 01       	movw	r24, r30
    19c6:	08 95       	ret

000019c8 <atof>:
    19c8:	66 27       	eor	r22, r22
    19ca:	77 27       	eor	r23, r23
    19cc:	00 c0       	rjmp	.+0      	; 0x19ce <strtod>

000019ce <strtod>:
    19ce:	a0 e0       	ldi	r26, 0x00	; 0
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ec ee       	ldi	r30, 0xEC	; 236
    19d4:	fc e0       	ldi	r31, 0x0C	; 12
    19d6:	82 c1       	rjmp	.+772    	; 0x1cdc <__prologue_saves__+0xc>
    19d8:	ec 01       	movw	r28, r24
    19da:	7b 01       	movw	r14, r22
    19dc:	61 15       	cp	r22, r1
    19de:	71 05       	cpc	r23, r1
    19e0:	19 f0       	breq	.+6      	; 0x19e8 <strtod+0x1a>
    19e2:	fb 01       	movw	r30, r22
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
    19e8:	6e 01       	movw	r12, r28
    19ea:	ff ef       	ldi	r31, 0xFF	; 255
    19ec:	cf 1a       	sub	r12, r31
    19ee:	df 0a       	sbc	r13, r31
    19f0:	08 81       	ld	r16, Y
    19f2:	80 2f       	mov	r24, r16
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	33 d1       	rcall	.+614    	; 0x1c5e <isspace>
    19f8:	89 2b       	or	r24, r25
    19fa:	11 f0       	breq	.+4      	; 0x1a00 <strtod+0x32>
    19fc:	e6 01       	movw	r28, r12
    19fe:	f4 cf       	rjmp	.-24     	; 0x19e8 <strtod+0x1a>
    1a00:	0d 32       	cpi	r16, 0x2D	; 45
    1a02:	39 f4       	brne	.+14     	; 0x1a12 <strtod+0x44>
    1a04:	6e 01       	movw	r12, r28
    1a06:	32 e0       	ldi	r19, 0x02	; 2
    1a08:	c3 0e       	add	r12, r19
    1a0a:	d1 1c       	adc	r13, r1
    1a0c:	09 81       	ldd	r16, Y+1	; 0x01
    1a0e:	11 e0       	ldi	r17, 0x01	; 1
    1a10:	08 c0       	rjmp	.+16     	; 0x1a22 <strtod+0x54>
    1a12:	0b 32       	cpi	r16, 0x2B	; 43
    1a14:	29 f4       	brne	.+10     	; 0x1a20 <strtod+0x52>
    1a16:	6e 01       	movw	r12, r28
    1a18:	52 e0       	ldi	r21, 0x02	; 2
    1a1a:	c5 0e       	add	r12, r21
    1a1c:	d1 1c       	adc	r13, r1
    1a1e:	09 81       	ldd	r16, Y+1	; 0x01
    1a20:	10 e0       	ldi	r17, 0x00	; 0
    1a22:	e6 01       	movw	r28, r12
    1a24:	21 97       	sbiw	r28, 0x01	; 1
    1a26:	43 e0       	ldi	r20, 0x03	; 3
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	60 eb       	ldi	r22, 0xB0	; 176
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	ce 01       	movw	r24, r28
    1a30:	1e d1       	rcall	.+572    	; 0x1c6e <strncasecmp_P>
    1a32:	89 2b       	or	r24, r25
    1a34:	b9 f4       	brne	.+46     	; 0x1a64 <strtod+0x96>
    1a36:	23 96       	adiw	r28, 0x03	; 3
    1a38:	45 e0       	ldi	r20, 0x05	; 5
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	6b ea       	ldi	r22, 0xAB	; 171
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	ce 01       	movw	r24, r28
    1a42:	15 d1       	rcall	.+554    	; 0x1c6e <strncasecmp_P>
    1a44:	89 2b       	or	r24, r25
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <strtod+0x7c>
    1a48:	25 96       	adiw	r28, 0x05	; 5
    1a4a:	e1 14       	cp	r14, r1
    1a4c:	f1 04       	cpc	r15, r1
    1a4e:	19 f0       	breq	.+6      	; 0x1a56 <strtod+0x88>
    1a50:	f7 01       	movw	r30, r14
    1a52:	d1 83       	std	Z+1, r29	; 0x01
    1a54:	c0 83       	st	Z, r28
    1a56:	11 11       	cpse	r17, r1
    1a58:	f5 c0       	rjmp	.+490    	; 0x1c44 <strtod+0x276>
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	80 e8       	ldi	r24, 0x80	; 128
    1a60:	9f e7       	ldi	r25, 0x7F	; 127
    1a62:	f9 c0       	rjmp	.+498    	; 0x1c56 <strtod+0x288>
    1a64:	43 e0       	ldi	r20, 0x03	; 3
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	68 ea       	ldi	r22, 0xA8	; 168
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	ff d0       	rcall	.+510    	; 0x1c6e <strncasecmp_P>
    1a70:	89 2b       	or	r24, r25
    1a72:	51 f4       	brne	.+20     	; 0x1a88 <strtod+0xba>
    1a74:	e1 14       	cp	r14, r1
    1a76:	f1 04       	cpc	r15, r1
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <strtod+0xae>
    1a7a:	e9 c0       	rjmp	.+466    	; 0x1c4e <strtod+0x280>
    1a7c:	c6 01       	movw	r24, r12
    1a7e:	02 96       	adiw	r24, 0x02	; 2
    1a80:	f7 01       	movw	r30, r14
    1a82:	91 83       	std	Z+1, r25	; 0x01
    1a84:	80 83       	st	Z, r24
    1a86:	e3 c0       	rjmp	.+454    	; 0x1c4e <strtod+0x280>
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	c0 e0       	ldi	r28, 0x00	; 0
    1a90:	d0 e0       	ldi	r29, 0x00	; 0
    1a92:	f6 01       	movw	r30, r12
    1a94:	30 ed       	ldi	r19, 0xD0	; 208
    1a96:	30 0f       	add	r19, r16
    1a98:	3a 30       	cpi	r19, 0x0A	; 10
    1a9a:	78 f5       	brcc	.+94     	; 0x1afa <strtod+0x12c>
    1a9c:	21 2f       	mov	r18, r17
    1a9e:	22 60       	ori	r18, 0x02	; 2
    1aa0:	a1 2f       	mov	r26, r17
    1aa2:	a8 70       	andi	r26, 0x08	; 8
    1aa4:	12 ff       	sbrs	r17, 2
    1aa6:	04 c0       	rjmp	.+8      	; 0x1ab0 <strtod+0xe2>
    1aa8:	a1 11       	cpse	r26, r1
    1aaa:	2d c0       	rjmp	.+90     	; 0x1b06 <strtod+0x138>
    1aac:	21 96       	adiw	r28, 0x01	; 1
    1aae:	2b c0       	rjmp	.+86     	; 0x1b06 <strtod+0x138>
    1ab0:	a1 11       	cpse	r26, r1
    1ab2:	21 97       	sbiw	r28, 0x01	; 1
    1ab4:	4b 01       	movw	r8, r22
    1ab6:	5c 01       	movw	r10, r24
    1ab8:	b2 e0       	ldi	r27, 0x02	; 2
    1aba:	88 0c       	add	r8, r8
    1abc:	99 1c       	adc	r9, r9
    1abe:	aa 1c       	adc	r10, r10
    1ac0:	bb 1c       	adc	r11, r11
    1ac2:	ba 95       	dec	r27
    1ac4:	d1 f7       	brne	.-12     	; 0x1aba <strtod+0xec>
    1ac6:	ab 01       	movw	r20, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	48 0d       	add	r20, r8
    1acc:	59 1d       	adc	r21, r9
    1ace:	6a 1d       	adc	r22, r10
    1ad0:	7b 1d       	adc	r23, r11
    1ad2:	44 0f       	add	r20, r20
    1ad4:	55 1f       	adc	r21, r21
    1ad6:	66 1f       	adc	r22, r22
    1ad8:	77 1f       	adc	r23, r23
    1ada:	cb 01       	movw	r24, r22
    1adc:	ba 01       	movw	r22, r20
    1ade:	63 0f       	add	r22, r19
    1ae0:	71 1d       	adc	r23, r1
    1ae2:	81 1d       	adc	r24, r1
    1ae4:	91 1d       	adc	r25, r1
    1ae6:	68 39       	cpi	r22, 0x98	; 152
    1ae8:	39 e9       	ldi	r19, 0x99	; 153
    1aea:	73 07       	cpc	r23, r19
    1aec:	83 07       	cpc	r24, r19
    1aee:	39 e1       	ldi	r19, 0x19	; 25
    1af0:	93 07       	cpc	r25, r19
    1af2:	48 f0       	brcs	.+18     	; 0x1b06 <strtod+0x138>
    1af4:	21 2f       	mov	r18, r17
    1af6:	26 60       	ori	r18, 0x06	; 6
    1af8:	06 c0       	rjmp	.+12     	; 0x1b06 <strtod+0x138>
    1afa:	3e 3f       	cpi	r19, 0xFE	; 254
    1afc:	51 f4       	brne	.+20     	; 0x1b12 <strtod+0x144>
    1afe:	13 fd       	sbrc	r17, 3
    1b00:	40 c0       	rjmp	.+128    	; 0x1b82 <strtod+0x1b4>
    1b02:	21 2f       	mov	r18, r17
    1b04:	28 60       	ori	r18, 0x08	; 8
    1b06:	5f ef       	ldi	r21, 0xFF	; 255
    1b08:	c5 1a       	sub	r12, r21
    1b0a:	d5 0a       	sbc	r13, r21
    1b0c:	00 81       	ld	r16, Z
    1b0e:	12 2f       	mov	r17, r18
    1b10:	c0 cf       	rjmp	.-128    	; 0x1a92 <strtod+0xc4>
    1b12:	20 2f       	mov	r18, r16
    1b14:	2f 7d       	andi	r18, 0xDF	; 223
    1b16:	25 34       	cpi	r18, 0x45	; 69
    1b18:	a1 f5       	brne	.+104    	; 0x1b82 <strtod+0x1b4>
    1b1a:	40 81       	ld	r20, Z
    1b1c:	4d 32       	cpi	r20, 0x2D	; 45
    1b1e:	11 f4       	brne	.+4      	; 0x1b24 <strtod+0x156>
    1b20:	10 61       	ori	r17, 0x10	; 16
    1b22:	06 c0       	rjmp	.+12     	; 0x1b30 <strtod+0x162>
    1b24:	4b 32       	cpi	r20, 0x2B	; 43
    1b26:	21 f0       	breq	.+8      	; 0x1b30 <strtod+0x162>
    1b28:	31 96       	adiw	r30, 0x01	; 1
    1b2a:	21 e0       	ldi	r18, 0x01	; 1
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	04 c0       	rjmp	.+8      	; 0x1b38 <strtod+0x16a>
    1b30:	41 81       	ldd	r20, Z+1	; 0x01
    1b32:	32 96       	adiw	r30, 0x02	; 2
    1b34:	22 e0       	ldi	r18, 0x02	; 2
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 53       	subi	r20, 0x30	; 48
    1b3a:	4a 30       	cpi	r20, 0x0A	; 10
    1b3c:	18 f0       	brcs	.+6      	; 0x1b44 <strtod+0x176>
    1b3e:	e2 1b       	sub	r30, r18
    1b40:	f3 0b       	sbc	r31, r19
    1b42:	1f c0       	rjmp	.+62     	; 0x1b82 <strtod+0x1b4>
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	20 38       	cpi	r18, 0x80	; 128
    1b4a:	5c e0       	ldi	r21, 0x0C	; 12
    1b4c:	35 07       	cpc	r19, r21
    1b4e:	5c f4       	brge	.+22     	; 0x1b66 <strtod+0x198>
    1b50:	d9 01       	movw	r26, r18
    1b52:	aa 0f       	add	r26, r26
    1b54:	bb 1f       	adc	r27, r27
    1b56:	aa 0f       	add	r26, r26
    1b58:	bb 1f       	adc	r27, r27
    1b5a:	2a 0f       	add	r18, r26
    1b5c:	3b 1f       	adc	r19, r27
    1b5e:	22 0f       	add	r18, r18
    1b60:	33 1f       	adc	r19, r19
    1b62:	24 0f       	add	r18, r20
    1b64:	31 1d       	adc	r19, r1
    1b66:	31 96       	adiw	r30, 0x01	; 1
    1b68:	df 01       	movw	r26, r30
    1b6a:	11 97       	sbiw	r26, 0x01	; 1
    1b6c:	4c 91       	ld	r20, X
    1b6e:	40 53       	subi	r20, 0x30	; 48
    1b70:	4a 30       	cpi	r20, 0x0A	; 10
    1b72:	50 f3       	brcs	.-44     	; 0x1b48 <strtod+0x17a>
    1b74:	14 ff       	sbrs	r17, 4
    1b76:	03 c0       	rjmp	.+6      	; 0x1b7e <strtod+0x1b0>
    1b78:	31 95       	neg	r19
    1b7a:	21 95       	neg	r18
    1b7c:	31 09       	sbc	r19, r1
    1b7e:	c2 0f       	add	r28, r18
    1b80:	d3 1f       	adc	r29, r19
    1b82:	11 ff       	sbrs	r17, 1
    1b84:	09 c0       	rjmp	.+18     	; 0x1b98 <strtod+0x1ca>
    1b86:	e1 14       	cp	r14, r1
    1b88:	f1 04       	cpc	r15, r1
    1b8a:	31 f0       	breq	.+12     	; 0x1b98 <strtod+0x1ca>
    1b8c:	9f 01       	movw	r18, r30
    1b8e:	21 50       	subi	r18, 0x01	; 1
    1b90:	31 09       	sbc	r19, r1
    1b92:	f7 01       	movw	r30, r14
    1b94:	31 83       	std	Z+1, r19	; 0x01
    1b96:	20 83       	st	Z, r18
    1b98:	e9 db       	rcall	.-2094   	; 0x136c <__floatunsisf>
    1b9a:	21 2f       	mov	r18, r17
    1b9c:	23 70       	andi	r18, 0x03	; 3
    1b9e:	23 30       	cpi	r18, 0x03	; 3
    1ba0:	19 f0       	breq	.+6      	; 0x1ba8 <strtod+0x1da>
    1ba2:	4b 01       	movw	r8, r22
    1ba4:	5c 01       	movw	r10, r24
    1ba6:	06 c0       	rjmp	.+12     	; 0x1bb4 <strtod+0x1e6>
    1ba8:	4b 01       	movw	r8, r22
    1baa:	5c 01       	movw	r10, r24
    1bac:	b7 fa       	bst	r11, 7
    1bae:	b0 94       	com	r11
    1bb0:	b7 f8       	bld	r11, 7
    1bb2:	b0 94       	com	r11
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	a9 01       	movw	r20, r18
    1bba:	c5 01       	movw	r24, r10
    1bbc:	b4 01       	movw	r22, r8
    1bbe:	39 db       	rcall	.-2446   	; 0x1232 <__cmpsf2>
    1bc0:	88 23       	and	r24, r24
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <strtod+0x1f8>
    1bc4:	3c c0       	rjmp	.+120    	; 0x1c3e <strtod+0x270>
    1bc6:	d7 ff       	sbrs	r29, 7
    1bc8:	06 c0       	rjmp	.+12     	; 0x1bd6 <strtod+0x208>
    1bca:	d1 95       	neg	r29
    1bcc:	c1 95       	neg	r28
    1bce:	d1 09       	sbc	r29, r1
    1bd0:	07 ec       	ldi	r16, 0xC7	; 199
    1bd2:	10 e0       	ldi	r17, 0x00	; 0
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <strtod+0x20c>
    1bd6:	0f ed       	ldi	r16, 0xDF	; 223
    1bd8:	10 e0       	ldi	r17, 0x00	; 0
    1bda:	68 01       	movw	r12, r16
    1bdc:	f8 e1       	ldi	r31, 0x18	; 24
    1bde:	cf 1a       	sub	r12, r31
    1be0:	d1 08       	sbc	r13, r1
    1be2:	90 e2       	ldi	r25, 0x20	; 32
    1be4:	e9 2e       	mov	r14, r25
    1be6:	f1 2c       	mov	r15, r1
    1be8:	ce 15       	cp	r28, r14
    1bea:	df 05       	cpc	r29, r15
    1bec:	6c f0       	brlt	.+26     	; 0x1c08 <strtod+0x23a>
    1bee:	f8 01       	movw	r30, r16
    1bf0:	25 91       	lpm	r18, Z+
    1bf2:	35 91       	lpm	r19, Z+
    1bf4:	45 91       	lpm	r20, Z+
    1bf6:	54 91       	lpm	r21, Z
    1bf8:	c5 01       	movw	r24, r10
    1bfa:	b4 01       	movw	r22, r8
    1bfc:	6d dc       	rcall	.-1830   	; 0x14d8 <__mulsf3>
    1bfe:	4b 01       	movw	r8, r22
    1c00:	5c 01       	movw	r10, r24
    1c02:	ce 19       	sub	r28, r14
    1c04:	df 09       	sbc	r29, r15
    1c06:	f0 cf       	rjmp	.-32     	; 0x1be8 <strtod+0x21a>
    1c08:	04 50       	subi	r16, 0x04	; 4
    1c0a:	11 09       	sbc	r17, r1
    1c0c:	f5 94       	asr	r15
    1c0e:	e7 94       	ror	r14
    1c10:	0c 15       	cp	r16, r12
    1c12:	1d 05       	cpc	r17, r13
    1c14:	49 f7       	brne	.-46     	; 0x1be8 <strtod+0x21a>
    1c16:	8a 2d       	mov	r24, r10
    1c18:	88 0f       	add	r24, r24
    1c1a:	8b 2d       	mov	r24, r11
    1c1c:	88 1f       	adc	r24, r24
    1c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c20:	41 f0       	breq	.+16     	; 0x1c32 <strtod+0x264>
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	a9 01       	movw	r20, r18
    1c28:	c5 01       	movw	r24, r10
    1c2a:	b4 01       	movw	r22, r8
    1c2c:	02 db       	rcall	.-2556   	; 0x1232 <__cmpsf2>
    1c2e:	81 11       	cpse	r24, r1
    1c30:	06 c0       	rjmp	.+12     	; 0x1c3e <strtod+0x270>
    1c32:	82 e2       	ldi	r24, 0x22	; 34
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <errno+0x1>
    1c3a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <errno>
    1c3e:	c5 01       	movw	r24, r10
    1c40:	b4 01       	movw	r22, r8
    1c42:	09 c0       	rjmp	.+18     	; 0x1c56 <strtod+0x288>
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	80 e8       	ldi	r24, 0x80	; 128
    1c4a:	9f ef       	ldi	r25, 0xFF	; 255
    1c4c:	04 c0       	rjmp	.+8      	; 0x1c56 <strtod+0x288>
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	80 ec       	ldi	r24, 0xC0	; 192
    1c54:	9f e7       	ldi	r25, 0x7F	; 127
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	ec e0       	ldi	r30, 0x0C	; 12
    1c5c:	5b c0       	rjmp	.+182    	; 0x1d14 <__epilogue_restores__+0xc>

00001c5e <isspace>:
    1c5e:	91 11       	cpse	r25, r1
    1c60:	1e c0       	rjmp	.+60     	; 0x1c9e <__ctype_isfalse>
    1c62:	80 32       	cpi	r24, 0x20	; 32
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <isspace+0xe>
    1c66:	89 50       	subi	r24, 0x09	; 9
    1c68:	85 50       	subi	r24, 0x05	; 5
    1c6a:	d0 f7       	brcc	.-12     	; 0x1c60 <isspace+0x2>
    1c6c:	08 95       	ret

00001c6e <strncasecmp_P>:
    1c6e:	fb 01       	movw	r30, r22
    1c70:	dc 01       	movw	r26, r24
    1c72:	41 50       	subi	r20, 0x01	; 1
    1c74:	50 40       	sbci	r21, 0x00	; 0
    1c76:	88 f0       	brcs	.+34     	; 0x1c9a <strncasecmp_P+0x2c>
    1c78:	8d 91       	ld	r24, X+
    1c7a:	81 34       	cpi	r24, 0x41	; 65
    1c7c:	1c f0       	brlt	.+6      	; 0x1c84 <strncasecmp_P+0x16>
    1c7e:	8b 35       	cpi	r24, 0x5B	; 91
    1c80:	0c f4       	brge	.+2      	; 0x1c84 <strncasecmp_P+0x16>
    1c82:	80 5e       	subi	r24, 0xE0	; 224
    1c84:	65 91       	lpm	r22, Z+
    1c86:	61 34       	cpi	r22, 0x41	; 65
    1c88:	1c f0       	brlt	.+6      	; 0x1c90 <strncasecmp_P+0x22>
    1c8a:	6b 35       	cpi	r22, 0x5B	; 91
    1c8c:	0c f4       	brge	.+2      	; 0x1c90 <strncasecmp_P+0x22>
    1c8e:	60 5e       	subi	r22, 0xE0	; 224
    1c90:	86 1b       	sub	r24, r22
    1c92:	61 11       	cpse	r22, r1
    1c94:	71 f3       	breq	.-36     	; 0x1c72 <strncasecmp_P+0x4>
    1c96:	99 0b       	sbc	r25, r25
    1c98:	08 95       	ret
    1c9a:	88 1b       	sub	r24, r24
    1c9c:	fc cf       	rjmp	.-8      	; 0x1c96 <strncasecmp_P+0x28>

00001c9e <__ctype_isfalse>:
    1c9e:	99 27       	eor	r25, r25
    1ca0:	88 27       	eor	r24, r24

00001ca2 <__ctype_istrue>:
    1ca2:	08 95       	ret

00001ca4 <eeprom_read_byte>:
    1ca4:	e1 99       	sbic	0x1c, 1	; 28
    1ca6:	fe cf       	rjmp	.-4      	; 0x1ca4 <eeprom_read_byte>
    1ca8:	9f bb       	out	0x1f, r25	; 31
    1caa:	8e bb       	out	0x1e, r24	; 30
    1cac:	e0 9a       	sbi	0x1c, 0	; 28
    1cae:	99 27       	eor	r25, r25
    1cb0:	8d b3       	in	r24, 0x1d	; 29
    1cb2:	08 95       	ret

00001cb4 <eeprom_write_byte>:
    1cb4:	26 2f       	mov	r18, r22

00001cb6 <eeprom_write_r18>:
    1cb6:	e1 99       	sbic	0x1c, 1	; 28
    1cb8:	fe cf       	rjmp	.-4      	; 0x1cb6 <eeprom_write_r18>
    1cba:	1c ba       	out	0x1c, r1	; 28
    1cbc:	9f bb       	out	0x1f, r25	; 31
    1cbe:	8e bb       	out	0x1e, r24	; 30
    1cc0:	2d bb       	out	0x1d, r18	; 29
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	e2 9a       	sbi	0x1c, 2	; 28
    1cc8:	e1 9a       	sbi	0x1c, 1	; 28
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	08 95       	ret

00001cd0 <__prologue_saves__>:
    1cd0:	2f 92       	push	r2
    1cd2:	3f 92       	push	r3
    1cd4:	4f 92       	push	r4
    1cd6:	5f 92       	push	r5
    1cd8:	6f 92       	push	r6
    1cda:	7f 92       	push	r7
    1cdc:	8f 92       	push	r8
    1cde:	9f 92       	push	r9
    1ce0:	af 92       	push	r10
    1ce2:	bf 92       	push	r11
    1ce4:	cf 92       	push	r12
    1ce6:	df 92       	push	r13
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
    1cec:	0f 93       	push	r16
    1cee:	1f 93       	push	r17
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	ca 1b       	sub	r28, r26
    1cfa:	db 0b       	sbc	r29, r27
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	09 94       	ijmp

00001d08 <__epilogue_restores__>:
    1d08:	2a 88       	ldd	r2, Y+18	; 0x12
    1d0a:	39 88       	ldd	r3, Y+17	; 0x11
    1d0c:	48 88       	ldd	r4, Y+16	; 0x10
    1d0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d10:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d12:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d14:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d16:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d18:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d1a:	b9 84       	ldd	r11, Y+9	; 0x09
    1d1c:	c8 84       	ldd	r12, Y+8	; 0x08
    1d1e:	df 80       	ldd	r13, Y+7	; 0x07
    1d20:	ee 80       	ldd	r14, Y+6	; 0x06
    1d22:	fd 80       	ldd	r15, Y+5	; 0x05
    1d24:	0c 81       	ldd	r16, Y+4	; 0x04
    1d26:	1b 81       	ldd	r17, Y+3	; 0x03
    1d28:	aa 81       	ldd	r26, Y+2	; 0x02
    1d2a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d2c:	ce 0f       	add	r28, r30
    1d2e:	d1 1d       	adc	r29, r1
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	ed 01       	movw	r28, r26
    1d3c:	08 95       	ret

00001d3e <_exit>:
    1d3e:	f8 94       	cli

00001d40 <__stop_program>:
    1d40:	ff cf       	rjmp	.-2      	; 0x1d40 <__stop_program>
